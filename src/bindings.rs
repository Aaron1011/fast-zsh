/* automatically generated by rust-bindgen */

#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::std::marker::PhantomData<T>);
impl <T> __IncompleteArrayField<T> {
    #[inline]
    pub fn new() -> Self {
        __IncompleteArrayField(::std::marker::PhantomData)
    }
    #[inline]
    pub unsafe fn as_ptr(&self) -> *const T { ::std::mem::transmute(self) }
    #[inline]
    pub unsafe fn as_mut_ptr(&mut self) -> *mut T {
        ::std::mem::transmute(self)
    }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        ::std::slice::from_raw_parts(self.as_ptr(), len)
    }
    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        ::std::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
    }
}
impl <T> ::std::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
impl <T> ::std::clone::Clone for __IncompleteArrayField<T> {
    #[inline]
    fn clone(&self) -> Self { Self::new() }
}
impl <T> ::std::marker::Copy for __IncompleteArrayField<T> { }
#[repr(C)]
pub struct __BindgenUnionField<T>(::std::marker::PhantomData<T>);
impl <T> __BindgenUnionField<T> {
    #[inline]
    pub fn new() -> Self { __BindgenUnionField(::std::marker::PhantomData) }
    #[inline]
    pub unsafe fn as_ref(&self) -> &T { ::std::mem::transmute(self) }
    #[inline]
    pub unsafe fn as_mut(&mut self) -> &mut T { ::std::mem::transmute(self) }
}
impl <T> ::std::default::Default for __BindgenUnionField<T> {
    #[inline]
    fn default() -> Self { Self::new() }
}
impl <T> ::std::clone::Clone for __BindgenUnionField<T> {
    #[inline]
    fn clone(&self) -> Self { Self::new() }
}
impl <T> ::std::marker::Copy for __BindgenUnionField<T> { }
impl <T> ::std::fmt::Debug for __BindgenUnionField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        fmt.write_str("__BindgenUnionField")
    }
}
pub const PASSWD_FILE: &'static [u8; 12usize] = b"/etc/passwd\x00";
pub const PASSWD_MAP: &'static [u8; 14usize] = b"passwd.byname\x00";
pub const CACHE_USERNAMES: ::std::os::raw::c_uint = 1;
pub const JOB_CONTROL: ::std::os::raw::c_uint = 1;
pub const USE_SUSPENDED: ::std::os::raw::c_uint = 1;
pub const DEFAULT_HISTSIZE: ::std::os::raw::c_uint = 30;
pub const DEFAULT_FCEDIT: &'static [u8; 3usize] = b"vi\x00";
pub const DEFAULT_TMPPREFIX: &'static [u8; 9usize] = b"/tmp/zsh\x00";
pub const CONFIG_LOCALE: ::std::os::raw::c_uint = 1;
pub const DEFAULT_PATH: &'static [u8; 14usize] = b"/bin:/usr/bin\x00";
pub const DEFAULT_READNULLCMD: &'static [u8; 5usize] = b"more\x00";
pub const DL_EXT: &'static [u8; 3usize] = b"so\x00";
pub const DYNAMIC: ::std::os::raw::c_uint = 1;
pub const DYNAMIC_NAME_CLASH_OK: ::std::os::raw::c_uint = 1;
pub const GETCWD_CALLS_MALLOC: ::std::os::raw::c_uint = 1;
pub const GETPGRP_VOID: ::std::os::raw::c_uint = 1;
pub const GLOBAL_ZLOGIN: &'static [u8; 12usize] = b"/etc/zlogin\x00";
pub const GLOBAL_ZLOGOUT: &'static [u8; 13usize] = b"/etc/zlogout\x00";
pub const GLOBAL_ZPROFILE: &'static [u8; 14usize] = b"/etc/zprofile\x00";
pub const GLOBAL_ZSHENV: &'static [u8; 12usize] = b"/etc/zshenv\x00";
pub const GLOBAL_ZSHRC: &'static [u8; 11usize] = b"/etc/zshrc\x00";
pub const GWINSZ_IN_SYS_IOCTL: ::std::os::raw::c_uint = 1;
pub const HAVE_ALLOCA: ::std::os::raw::c_uint = 1;
pub const HAVE_ALLOCA_H: ::std::os::raw::c_uint = 1;
pub const HAVE_BOOLCODES: ::std::os::raw::c_uint = 1;
pub const HAVE_BOOLNAMES: ::std::os::raw::c_uint = 1;
pub const HAVE_BRK: ::std::os::raw::c_uint = 1;
pub const HAVE_BRK_PROTO: ::std::os::raw::c_uint = 1;
pub const HAVE_CANONICALIZE_FILE_NAME: ::std::os::raw::c_uint = 1;
pub const HAVE_CLOCK_GETTIME: ::std::os::raw::c_uint = 1;
pub const HAVE_CURSES_H: ::std::os::raw::c_uint = 1;
pub const HAVE_DIFFTIME: ::std::os::raw::c_uint = 1;
pub const HAVE_DIRENT_H: ::std::os::raw::c_uint = 1;
pub const HAVE_DLCLOSE: ::std::os::raw::c_uint = 1;
pub const HAVE_DLERROR: ::std::os::raw::c_uint = 1;
pub const HAVE_DLFCN_H: ::std::os::raw::c_uint = 1;
pub const HAVE_DLOPEN: ::std::os::raw::c_uint = 1;
pub const HAVE_DLSYM: ::std::os::raw::c_uint = 1;
pub const HAVE_ENDUTXENT: ::std::os::raw::c_uint = 1;
pub const HAVE_ERAND48: ::std::os::raw::c_uint = 1;
pub const HAVE_ERRNO_H: ::std::os::raw::c_uint = 1;
pub const HAVE_FCHDIR: ::std::os::raw::c_uint = 1;
pub const HAVE_FCHMOD: ::std::os::raw::c_uint = 1;
pub const HAVE_FCHOWN: ::std::os::raw::c_uint = 1;
pub const HAVE_FCNTL_H: ::std::os::raw::c_uint = 1;
pub const HAVE_FIFOS: ::std::os::raw::c_uint = 1;
pub const HAVE_FSEEKO: ::std::os::raw::c_uint = 1;
pub const HAVE_FSTAT: ::std::os::raw::c_uint = 1;
pub const HAVE_FTELLO: ::std::os::raw::c_uint = 1;
pub const HAVE_FTRUNCATE: ::std::os::raw::c_uint = 1;
pub const HAVE_GDBM_H: ::std::os::raw::c_uint = 1;
pub const HAVE_GDBM_OPEN: ::std::os::raw::c_uint = 1;
pub const HAVE_GETCCHAR: ::std::os::raw::c_uint = 1;
pub const HAVE_GETCWD: ::std::os::raw::c_uint = 1;
pub const HAVE_GETENV: ::std::os::raw::c_uint = 1;
pub const HAVE_GETGRGID: ::std::os::raw::c_uint = 1;
pub const HAVE_GETGRNAM: ::std::os::raw::c_uint = 1;
pub const HAVE_GETHOSTBYNAME2: ::std::os::raw::c_uint = 1;
pub const HAVE_GETHOSTNAME: ::std::os::raw::c_uint = 1;
pub const HAVE_GETLOGIN: ::std::os::raw::c_uint = 1;
pub const HAVE_GETPAGESIZE: ::std::os::raw::c_uint = 1;
pub const HAVE_GETPWENT: ::std::os::raw::c_uint = 1;
pub const HAVE_GETPWNAM: ::std::os::raw::c_uint = 1;
pub const HAVE_GETPWUID: ::std::os::raw::c_uint = 1;
pub const HAVE_GETRLIMIT: ::std::os::raw::c_uint = 1;
pub const HAVE_GETRUSAGE: ::std::os::raw::c_uint = 1;
pub const HAVE_GETTIMEOFDAY: ::std::os::raw::c_uint = 1;
pub const HAVE_GETUTENT: ::std::os::raw::c_uint = 1;
pub const HAVE_GETUTXENT: ::std::os::raw::c_uint = 1;
pub const HAVE_GETXATTR: ::std::os::raw::c_uint = 1;
pub const HAVE_GRANTPT: ::std::os::raw::c_uint = 1;
pub const HAVE_GRP_H: ::std::os::raw::c_uint = 1;
pub const HAVE_HTONS: ::std::os::raw::c_uint = 1;
pub const HAVE_ICONV: ::std::os::raw::c_uint = 1;
pub const HAVE_ICONV_H: ::std::os::raw::c_uint = 1;
pub const HAVE_INET_ATON: ::std::os::raw::c_uint = 1;
pub const HAVE_INET_NTOP: ::std::os::raw::c_uint = 1;
pub const HAVE_INET_PTON: ::std::os::raw::c_uint = 1;
pub const HAVE_INITGROUPS: ::std::os::raw::c_uint = 1;
pub const HAVE_INITSCR: ::std::os::raw::c_uint = 1;
pub const HAVE_INTTYPES_H: ::std::os::raw::c_uint = 1;
pub const HAVE_IOCTL_PROTO: ::std::os::raw::c_uint = 1;
pub const HAVE_KILLPG: ::std::os::raw::c_uint = 1;
pub const HAVE_LANGINFO_H: ::std::os::raw::c_uint = 1;
pub const HAVE_LCHOWN: ::std::os::raw::c_uint = 1;
pub const HAVE_LIBDL: ::std::os::raw::c_uint = 1;
pub const HAVE_LIBGDBM: ::std::os::raw::c_uint = 1;
pub const HAVE_LIBM: ::std::os::raw::c_uint = 1;
pub const HAVE_LIBRT: ::std::os::raw::c_uint = 1;
pub const HAVE_LIMITS_H: ::std::os::raw::c_uint = 1;
pub const HAVE_LINK: ::std::os::raw::c_uint = 1;
pub const HAVE_LOCALE_H: ::std::os::raw::c_uint = 1;
pub const HAVE_LSTAT: ::std::os::raw::c_uint = 1;
pub const HAVE_MEMCPY: ::std::os::raw::c_uint = 1;
pub const HAVE_MEMMOVE: ::std::os::raw::c_uint = 1;
pub const HAVE_MEMORY_H: ::std::os::raw::c_uint = 1;
pub const HAVE_MKFIFO: ::std::os::raw::c_uint = 1;
pub const HAVE_MKNOD_PROTO: ::std::os::raw::c_uint = 1;
pub const HAVE_MKSTEMP: ::std::os::raw::c_uint = 1;
pub const HAVE_MKTIME: ::std::os::raw::c_uint = 1;
pub const HAVE_MMAP: ::std::os::raw::c_uint = 1;
pub const HAVE_MSYNC: ::std::os::raw::c_uint = 1;
pub const HAVE_MUNMAP: ::std::os::raw::c_uint = 1;
pub const HAVE_NANOSLEEP: ::std::os::raw::c_uint = 1;
pub const HAVE_NCURSES_H: ::std::os::raw::c_uint = 1;
pub const HAVE_NETINET_IN_SYSTM_H: ::std::os::raw::c_uint = 1;
pub const HAVE_NICE: ::std::os::raw::c_uint = 1;
pub const HAVE_NL_LANGINFO: ::std::os::raw::c_uint = 1;
pub const HAVE_NTOHS: ::std::os::raw::c_uint = 1;
pub const HAVE_NUMCODES: ::std::os::raw::c_uint = 1;
pub const HAVE_NUMNAMES: ::std::os::raw::c_uint = 1;
pub const HAVE_OPEN_MEMSTREAM: ::std::os::raw::c_uint = 1;
pub const HAVE_OSPEED: ::std::os::raw::c_uint = 1;
pub const HAVE_PATHCONF: ::std::os::raw::c_uint = 1;
pub const HAVE_PCRE_H: ::std::os::raw::c_uint = 1;
pub const HAVE_POLL: ::std::os::raw::c_uint = 1;
pub const HAVE_POLL_H: ::std::os::raw::c_uint = 1;
pub const HAVE_POSIX_OPENPT: ::std::os::raw::c_uint = 1;
pub const HAVE_PTSNAME: ::std::os::raw::c_uint = 1;
pub const HAVE_PUTENV: ::std::os::raw::c_uint = 1;
pub const HAVE_PWD_H: ::std::os::raw::c_uint = 1;
pub const HAVE_READLINK: ::std::os::raw::c_uint = 1;
pub const HAVE_REALPATH: ::std::os::raw::c_uint = 1;
pub const HAVE_REGCOMP: ::std::os::raw::c_uint = 1;
pub const HAVE_REGERROR: ::std::os::raw::c_uint = 1;
pub const HAVE_REGEXEC: ::std::os::raw::c_uint = 1;
pub const HAVE_REGFREE: ::std::os::raw::c_uint = 1;
pub const HAVE_RESIZE_TERM: ::std::os::raw::c_uint = 1;
pub const HAVE_RLIMIT_AS: ::std::os::raw::c_uint = 1;
pub const HAVE_RLIMIT_LOCKS: ::std::os::raw::c_uint = 1;
pub const HAVE_RLIMIT_MEMLOCK: ::std::os::raw::c_uint = 1;
pub const HAVE_RLIMIT_MSGQUEUE: ::std::os::raw::c_uint = 1;
pub const HAVE_RLIMIT_NICE: ::std::os::raw::c_uint = 1;
pub const HAVE_RLIMIT_NOFILE: ::std::os::raw::c_uint = 1;
pub const HAVE_RLIMIT_NPROC: ::std::os::raw::c_uint = 1;
pub const HAVE_RLIMIT_RSS: ::std::os::raw::c_uint = 1;
pub const HAVE_RLIMIT_RTPRIO: ::std::os::raw::c_uint = 1;
pub const HAVE_RLIMIT_SIGPENDING: ::std::os::raw::c_uint = 1;
pub const HAVE_SBRK: ::std::os::raw::c_uint = 1;
pub const HAVE_SBRK_PROTO: ::std::os::raw::c_uint = 1;
pub const HAVE_SCALBN: ::std::os::raw::c_uint = 1;
pub const HAVE_SELECT: ::std::os::raw::c_uint = 1;
pub const HAVE_SETCCHAR: ::std::os::raw::c_uint = 1;
pub const HAVE_SETENV: ::std::os::raw::c_uint = 1;
pub const HAVE_SETEUID: ::std::os::raw::c_uint = 1;
pub const HAVE_SETLOCALE: ::std::os::raw::c_uint = 1;
pub const HAVE_SETPGID: ::std::os::raw::c_uint = 1;
pub const HAVE_SETPGRP: ::std::os::raw::c_uint = 1;
pub const HAVE_SETRESUID: ::std::os::raw::c_uint = 1;
pub const HAVE_SETREUID: ::std::os::raw::c_uint = 1;
pub const HAVE_SETSID: ::std::os::raw::c_uint = 1;
pub const HAVE_SETUID: ::std::os::raw::c_uint = 1;
pub const HAVE_SETUPTERM: ::std::os::raw::c_uint = 1;
pub const HAVE_SETUTXENT: ::std::os::raw::c_uint = 1;
pub const HAVE_SIGACTION: ::std::os::raw::c_uint = 1;
pub const HAVE_SIGBLOCK: ::std::os::raw::c_uint = 1;
pub const HAVE_SIGHOLD: ::std::os::raw::c_uint = 1;
pub const HAVE_SIGNGAM: ::std::os::raw::c_uint = 1;
pub const HAVE_SIGPROCMASK: ::std::os::raw::c_uint = 1;
pub const HAVE_SIGRELSE: ::std::os::raw::c_uint = 1;
pub const HAVE_SIGSETMASK: ::std::os::raw::c_uint = 1;
pub const HAVE_STDARG_H: ::std::os::raw::c_uint = 1;
pub const HAVE_STDDEF_H: ::std::os::raw::c_uint = 1;
pub const HAVE_STDINT_H: ::std::os::raw::c_uint = 1;
pub const HAVE_STDIO_H: ::std::os::raw::c_uint = 1;
pub const HAVE_STDLIB_H: ::std::os::raw::c_uint = 1;
pub const HAVE_STRCODES: ::std::os::raw::c_uint = 1;
pub const HAVE_STRCOLL: ::std::os::raw::c_uint = 1;
pub const HAVE_STRERROR: ::std::os::raw::c_uint = 1;
pub const HAVE_STRFTIME: ::std::os::raw::c_uint = 1;
pub const HAVE_STRINGS_H: ::std::os::raw::c_uint = 1;
pub const HAVE_STRING_H: ::std::os::raw::c_uint = 1;
pub const HAVE_STRNAMES: ::std::os::raw::c_uint = 1;
pub const HAVE_STRPTIME: ::std::os::raw::c_uint = 1;
pub const HAVE_STRSTR: ::std::os::raw::c_uint = 1;
pub const HAVE_STRTOUL: ::std::os::raw::c_uint = 1;
pub const HAVE_STRUCT_DIRENT_D_INO: ::std::os::raw::c_uint = 1;
pub const HAVE_STRUCT_RUSAGE_RU_IDRSS: ::std::os::raw::c_uint = 1;
pub const HAVE_STRUCT_RUSAGE_RU_INBLOCK: ::std::os::raw::c_uint = 1;
pub const HAVE_STRUCT_RUSAGE_RU_ISRSS: ::std::os::raw::c_uint = 1;
pub const HAVE_STRUCT_RUSAGE_RU_IXRSS: ::std::os::raw::c_uint = 1;
pub const HAVE_STRUCT_RUSAGE_RU_MAJFLT: ::std::os::raw::c_uint = 1;
pub const HAVE_STRUCT_RUSAGE_RU_MAXRSS: ::std::os::raw::c_uint = 1;
pub const HAVE_STRUCT_RUSAGE_RU_MINFLT: ::std::os::raw::c_uint = 1;
pub const HAVE_STRUCT_RUSAGE_RU_MSGRCV: ::std::os::raw::c_uint = 1;
pub const HAVE_STRUCT_RUSAGE_RU_MSGSND: ::std::os::raw::c_uint = 1;
pub const HAVE_STRUCT_RUSAGE_RU_NIVCSW: ::std::os::raw::c_uint = 1;
pub const HAVE_STRUCT_RUSAGE_RU_NSIGNALS: ::std::os::raw::c_uint = 1;
pub const HAVE_STRUCT_RUSAGE_RU_NSWAP: ::std::os::raw::c_uint = 1;
pub const HAVE_STRUCT_RUSAGE_RU_NVCSW: ::std::os::raw::c_uint = 1;
pub const HAVE_STRUCT_RUSAGE_RU_OUBLOCK: ::std::os::raw::c_uint = 1;
pub const HAVE_STRUCT_SOCKADDR_IN6_SIN6_SCOPE_ID: ::std::os::raw::c_uint = 1;
pub const HAVE_STRUCT_STAT_ST_ATIM_TV_NSEC: ::std::os::raw::c_uint = 1;
pub const HAVE_STRUCT_STAT_ST_CTIM_TV_NSEC: ::std::os::raw::c_uint = 1;
pub const HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC: ::std::os::raw::c_uint = 1;
pub const HAVE_STRUCT_TIMEZONE: ::std::os::raw::c_uint = 1;
pub const HAVE_STRUCT_UTMP: ::std::os::raw::c_uint = 1;
pub const HAVE_STRUCT_UTMPX: ::std::os::raw::c_uint = 1;
pub const HAVE_STRUCT_UTMPX_UT_HOST: ::std::os::raw::c_uint = 1;
pub const HAVE_STRUCT_UTMPX_UT_TV: ::std::os::raw::c_uint = 1;
pub const HAVE_STRUCT_UTMP_UT_HOST: ::std::os::raw::c_uint = 1;
pub const HAVE_SYMLINK: ::std::os::raw::c_uint = 1;
pub const HAVE_SYSCONF: ::std::os::raw::c_uint = 1;
pub const HAVE_SYS_CAPABILITY_H: ::std::os::raw::c_uint = 1;
pub const HAVE_SYS_MMAN_H: ::std::os::raw::c_uint = 1;
pub const HAVE_SYS_PARAM_H: ::std::os::raw::c_uint = 1;
pub const HAVE_SYS_RESOURCE_H: ::std::os::raw::c_uint = 1;
pub const HAVE_SYS_SELECT_H: ::std::os::raw::c_uint = 1;
pub const HAVE_SYS_STAT_H: ::std::os::raw::c_uint = 1;
pub const HAVE_SYS_STROPTS_H: ::std::os::raw::c_uint = 1;
pub const HAVE_SYS_TIMES_H: ::std::os::raw::c_uint = 1;
pub const HAVE_SYS_TIME_H: ::std::os::raw::c_uint = 1;
pub const HAVE_SYS_TYPES_H: ::std::os::raw::c_uint = 1;
pub const HAVE_SYS_UTSNAME_H: ::std::os::raw::c_uint = 1;
pub const HAVE_SYS_WAIT_H: ::std::os::raw::c_uint = 1;
pub const HAVE_SYS_XATTR_H: ::std::os::raw::c_uint = 1;
pub const HAVE_TCGETATTR: ::std::os::raw::c_uint = 1;
pub const HAVE_TCSETPGRP: ::std::os::raw::c_uint = 1;
pub const HAVE_TERMCAP_H: ::std::os::raw::c_uint = 1;
pub const HAVE_TERMIOS_H: ::std::os::raw::c_uint = 1;
pub const HAVE_TERMIO_H: ::std::os::raw::c_uint = 1;
pub const HAVE_TERM_H: ::std::os::raw::c_uint = 1;
pub const HAVE_TGAMMA: ::std::os::raw::c_uint = 1;
pub const HAVE_TGETENT: ::std::os::raw::c_uint = 1;
pub const HAVE_TIGETFLAG: ::std::os::raw::c_uint = 1;
pub const HAVE_TIGETNUM: ::std::os::raw::c_uint = 1;
pub const HAVE_TIGETSTR: ::std::os::raw::c_uint = 1;
pub const HAVE_TIMELOCAL: ::std::os::raw::c_uint = 1;
pub const HAVE_UNAME: ::std::os::raw::c_uint = 1;
pub const HAVE_UNION_INIT: ::std::os::raw::c_uint = 1;
pub const HAVE_UNISTD_H: ::std::os::raw::c_uint = 1;
pub const HAVE_UNLOCKPT: ::std::os::raw::c_uint = 1;
pub const HAVE_UNSETENV: ::std::os::raw::c_uint = 1;
pub const HAVE_USE_DEFAULT_COLORS: ::std::os::raw::c_uint = 1;
pub const HAVE_UTMPX_H: ::std::os::raw::c_uint = 1;
pub const HAVE_UTMP_H: ::std::os::raw::c_uint = 1;
pub const HAVE_VARIABLE_LENGTH_ARRAYS: ::std::os::raw::c_uint = 1;
pub const HAVE_WADDWSTR: ::std::os::raw::c_uint = 1;
pub const HAVE_WAIT3: ::std::os::raw::c_uint = 1;
pub const HAVE_WAITPID: ::std::os::raw::c_uint = 1;
pub const HAVE_WCHAR_H: ::std::os::raw::c_uint = 1;
pub const HAVE_WCTOMB: ::std::os::raw::c_uint = 1;
pub const HAVE_WGET_WCH: ::std::os::raw::c_uint = 1;
pub const HAVE_WIN_WCH: ::std::os::raw::c_uint = 1;
pub const IOCTL_IN_SYS_IOCTL: ::std::os::raw::c_uint = 1;
pub const LONG_IS_64_BIT: ::std::os::raw::c_uint = 1;
pub const MACHTYPE: &'static [u8; 7usize] = b"x86_64\x00";
pub const MAX_FUNCTION_DEPTH: ::std::os::raw::c_uint = 1000;
pub const MULTIBYTE_SUPPORT: ::std::os::raw::c_uint = 1;
pub const OSTYPE: &'static [u8; 10usize] = b"linux-gnu\x00";
pub const PACKAGE_BUGREPORT: &'static [u8; 1usize] = b"\x00";
pub const PACKAGE_NAME: &'static [u8; 1usize] = b"\x00";
pub const PACKAGE_STRING: &'static [u8; 1usize] = b"\x00";
pub const PACKAGE_TARNAME: &'static [u8; 1usize] = b"\x00";
pub const PACKAGE_URL: &'static [u8; 1usize] = b"\x00";
pub const PACKAGE_VERSION: &'static [u8; 1usize] = b"\x00";
pub const PATH_DEV_FD: &'static [u8; 14usize] = b"/proc/self/fd\x00";
pub const PATH_UTMP_FILE: &'static [u8; 14usize] = b"/var/run/utmp\x00";
pub const PATH_WTMP_FILE: &'static [u8; 14usize] = b"/var/log/wtmp\x00";
pub const POSIX_SIGNALS: ::std::os::raw::c_uint = 1;
pub const PRINTF_HAS_LLD: ::std::os::raw::c_uint = 1;
pub const PROTOTYPES: ::std::os::raw::c_uint = 1;
pub const REALPATH_ACCEPTS_NULL: ::std::os::raw::c_uint = 1;
pub const RESTRICTED_R: ::std::os::raw::c_uint = 1;
pub const RLIM_T_IS_UNSIGNED: ::std::os::raw::c_uint = 1;
pub const STDC_HEADERS: ::std::os::raw::c_uint = 1;
pub const TGETENT_ACCEPTS_NULL: ::std::os::raw::c_uint = 1;
pub const TGETENT_SUCCESS: ::std::os::raw::c_uint = 1;
pub const TIME_WITH_SYS_TIME: ::std::os::raw::c_uint = 1;
pub const USE_DEV_PTMX: ::std::os::raw::c_uint = 1;
pub const USE_LOCAL_H_ERRNO: ::std::os::raw::c_uint = 1;
pub const VENDOR: &'static [u8; 8usize] = b"unknown\x00";
pub const ZSH_HAVE_CURSES_H: ::std::os::raw::c_uint = 1;
pub const ZSH_HAVE_TERM_H: ::std::os::raw::c_uint = 1;
pub const _DARWIN_USE_64_BIT_INODE: ::std::os::raw::c_uint = 1;
pub const _GNU_SOURCE: ::std::os::raw::c_uint = 1;
pub const _XOPEN_SOURCE_EXTENDED: ::std::os::raw::c_uint = 1;
pub const _SYS_TYPES_H: ::std::os::raw::c_uint = 1;
pub const _FEATURES_H: ::std::os::raw::c_uint = 1;
pub const _ISOC95_SOURCE: ::std::os::raw::c_uint = 1;
pub const _ISOC99_SOURCE: ::std::os::raw::c_uint = 1;
pub const _ISOC11_SOURCE: ::std::os::raw::c_uint = 1;
pub const _POSIX_SOURCE: ::std::os::raw::c_uint = 1;
pub const _POSIX_C_SOURCE: ::std::os::raw::c_uint = 200809;
pub const _XOPEN_SOURCE: ::std::os::raw::c_uint = 700;
pub const _LARGEFILE64_SOURCE: ::std::os::raw::c_uint = 1;
pub const _DEFAULT_SOURCE: ::std::os::raw::c_uint = 1;
pub const _ATFILE_SOURCE: ::std::os::raw::c_uint = 1;
pub const __USE_ISOC11: ::std::os::raw::c_uint = 1;
pub const __USE_ISOC99: ::std::os::raw::c_uint = 1;
pub const __USE_ISOC95: ::std::os::raw::c_uint = 1;
pub const __USE_POSIX: ::std::os::raw::c_uint = 1;
pub const __USE_POSIX2: ::std::os::raw::c_uint = 1;
pub const __USE_POSIX199309: ::std::os::raw::c_uint = 1;
pub const __USE_POSIX199506: ::std::os::raw::c_uint = 1;
pub const __USE_XOPEN2K: ::std::os::raw::c_uint = 1;
pub const __USE_XOPEN2K8: ::std::os::raw::c_uint = 1;
pub const __USE_XOPEN: ::std::os::raw::c_uint = 1;
pub const __USE_XOPEN_EXTENDED: ::std::os::raw::c_uint = 1;
pub const __USE_UNIX98: ::std::os::raw::c_uint = 1;
pub const _LARGEFILE_SOURCE: ::std::os::raw::c_uint = 1;
pub const __USE_XOPEN2K8XSI: ::std::os::raw::c_uint = 1;
pub const __USE_XOPEN2KXSI: ::std::os::raw::c_uint = 1;
pub const __USE_LARGEFILE: ::std::os::raw::c_uint = 1;
pub const __USE_LARGEFILE64: ::std::os::raw::c_uint = 1;
pub const __USE_MISC: ::std::os::raw::c_uint = 1;
pub const __USE_ATFILE: ::std::os::raw::c_uint = 1;
pub const __USE_GNU: ::std::os::raw::c_uint = 1;
pub const __USE_FORTIFY_LEVEL: ::std::os::raw::c_uint = 0;
pub const _STDC_PREDEF_H: ::std::os::raw::c_uint = 1;
pub const __STDC_IEC_559__: ::std::os::raw::c_uint = 1;
pub const __STDC_IEC_559_COMPLEX__: ::std::os::raw::c_uint = 1;
pub const __STDC_ISO_10646__: ::std::os::raw::c_uint = 201505;
pub const __STDC_NO_THREADS__: ::std::os::raw::c_uint = 1;
pub const __GNU_LIBRARY__: ::std::os::raw::c_uint = 6;
pub const __GLIBC__: ::std::os::raw::c_uint = 2;
pub const __GLIBC_MINOR__: ::std::os::raw::c_uint = 25;
pub const _SYS_CDEFS_H: ::std::os::raw::c_uint = 1;
pub const __glibc_c99_flexarr_available: ::std::os::raw::c_uint = 1;
pub const __WORDSIZE: ::std::os::raw::c_uint = 64;
pub const __WORDSIZE_TIME64_COMPAT32: ::std::os::raw::c_uint = 1;
pub const __SYSCALL_WORDSIZE: ::std::os::raw::c_uint = 64;
pub const _BITS_TYPES_H: ::std::os::raw::c_uint = 1;
pub const _BITS_TYPESIZES_H: ::std::os::raw::c_uint = 1;
pub const __OFF_T_MATCHES_OFF64_T: ::std::os::raw::c_uint = 1;
pub const __INO_T_MATCHES_INO64_T: ::std::os::raw::c_uint = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: ::std::os::raw::c_uint = 1;
pub const __FD_SETSIZE: ::std::os::raw::c_uint = 1024;
pub const __clock_t_defined: ::std::os::raw::c_uint = 1;
pub const __clockid_t_defined: ::std::os::raw::c_uint = 1;
pub const __time_t_defined: ::std::os::raw::c_uint = 1;
pub const __timer_t_defined: ::std::os::raw::c_uint = 1;
pub const __BIT_TYPES_DEFINED__: ::std::os::raw::c_uint = 1;
pub const _ENDIAN_H: ::std::os::raw::c_uint = 1;
pub const __LITTLE_ENDIAN: ::std::os::raw::c_uint = 1234;
pub const __BIG_ENDIAN: ::std::os::raw::c_uint = 4321;
pub const __PDP_ENDIAN: ::std::os::raw::c_uint = 3412;
pub const __BYTE_ORDER: ::std::os::raw::c_uint = 1234;
pub const __FLOAT_WORD_ORDER: ::std::os::raw::c_uint = 1234;
pub const LITTLE_ENDIAN: ::std::os::raw::c_uint = 1234;
pub const BIG_ENDIAN: ::std::os::raw::c_uint = 4321;
pub const PDP_ENDIAN: ::std::os::raw::c_uint = 3412;
pub const BYTE_ORDER: ::std::os::raw::c_uint = 1234;
pub const _BITS_BYTESWAP_H: ::std::os::raw::c_uint = 1;
pub const _BITS_UINTN_IDENTITY_H: ::std::os::raw::c_uint = 1;
pub const _SYS_SELECT_H: ::std::os::raw::c_uint = 1;
pub const __FD_ZERO_STOS: &'static [u8; 6usize] = b"stosq\x00";
pub const _SIGSET_H_types: ::std::os::raw::c_uint = 1;
pub const __timeval_defined: ::std::os::raw::c_uint = 1;
pub const __timespec_defined: ::std::os::raw::c_uint = 1;
pub const FD_SETSIZE: ::std::os::raw::c_uint = 1024;
pub const _SYS_SYSMACROS_H: ::std::os::raw::c_uint = 1;
pub const _BITS_SYSMACROS_H: ::std::os::raw::c_uint = 1;
pub const _BITS_PTHREADTYPES_H: ::std::os::raw::c_uint = 1;
pub const __SIZEOF_PTHREAD_ATTR_T: ::std::os::raw::c_uint = 56;
pub const __SIZEOF_PTHREAD_MUTEX_T: ::std::os::raw::c_uint = 40;
pub const __SIZEOF_PTHREAD_MUTEXATTR_T: ::std::os::raw::c_uint = 4;
pub const __SIZEOF_PTHREAD_COND_T: ::std::os::raw::c_uint = 48;
pub const __SIZEOF_PTHREAD_CONDATTR_T: ::std::os::raw::c_uint = 4;
pub const __SIZEOF_PTHREAD_RWLOCK_T: ::std::os::raw::c_uint = 56;
pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: ::std::os::raw::c_uint = 8;
pub const __SIZEOF_PTHREAD_BARRIER_T: ::std::os::raw::c_uint = 32;
pub const __SIZEOF_PTHREAD_BARRIERATTR_T: ::std::os::raw::c_uint = 4;
pub const __have_pthread_attr_t: ::std::os::raw::c_uint = 1;
pub const __PTHREAD_MUTEX_HAVE_PREV: ::std::os::raw::c_uint = 1;
pub const __PTHREAD_RWLOCK_INT_FLAGS_SHARED: ::std::os::raw::c_uint = 1;
pub const _UNISTD_H: ::std::os::raw::c_uint = 1;
pub const _POSIX_VERSION: ::std::os::raw::c_uint = 200809;
pub const __POSIX2_THIS_VERSION: ::std::os::raw::c_uint = 200809;
pub const _POSIX2_VERSION: ::std::os::raw::c_uint = 200809;
pub const _POSIX2_C_VERSION: ::std::os::raw::c_uint = 200809;
pub const _POSIX2_C_BIND: ::std::os::raw::c_uint = 200809;
pub const _POSIX2_C_DEV: ::std::os::raw::c_uint = 200809;
pub const _POSIX2_SW_DEV: ::std::os::raw::c_uint = 200809;
pub const _POSIX2_LOCALEDEF: ::std::os::raw::c_uint = 200809;
pub const _XOPEN_VERSION: ::std::os::raw::c_uint = 700;
pub const _XOPEN_XCU_VERSION: ::std::os::raw::c_uint = 4;
pub const _XOPEN_XPG2: ::std::os::raw::c_uint = 1;
pub const _XOPEN_XPG3: ::std::os::raw::c_uint = 1;
pub const _XOPEN_XPG4: ::std::os::raw::c_uint = 1;
pub const _XOPEN_UNIX: ::std::os::raw::c_uint = 1;
pub const _XOPEN_CRYPT: ::std::os::raw::c_uint = 1;
pub const _XOPEN_ENH_I18N: ::std::os::raw::c_uint = 1;
pub const _XOPEN_LEGACY: ::std::os::raw::c_uint = 1;
pub const _BITS_POSIX_OPT_H: ::std::os::raw::c_uint = 1;
pub const _POSIX_JOB_CONTROL: ::std::os::raw::c_uint = 1;
pub const _POSIX_SAVED_IDS: ::std::os::raw::c_uint = 1;
pub const _POSIX_PRIORITY_SCHEDULING: ::std::os::raw::c_uint = 200809;
pub const _POSIX_SYNCHRONIZED_IO: ::std::os::raw::c_uint = 200809;
pub const _POSIX_FSYNC: ::std::os::raw::c_uint = 200809;
pub const _POSIX_MAPPED_FILES: ::std::os::raw::c_uint = 200809;
pub const _POSIX_MEMLOCK: ::std::os::raw::c_uint = 200809;
pub const _POSIX_MEMLOCK_RANGE: ::std::os::raw::c_uint = 200809;
pub const _POSIX_MEMORY_PROTECTION: ::std::os::raw::c_uint = 200809;
pub const _POSIX_CHOWN_RESTRICTED: ::std::os::raw::c_uint = 0;
pub const _POSIX_VDISABLE: u8 = b'\x00';
pub const _POSIX_NO_TRUNC: ::std::os::raw::c_uint = 1;
pub const _XOPEN_REALTIME: ::std::os::raw::c_uint = 1;
pub const _XOPEN_REALTIME_THREADS: ::std::os::raw::c_uint = 1;
pub const _XOPEN_SHM: ::std::os::raw::c_uint = 1;
pub const _POSIX_THREADS: ::std::os::raw::c_uint = 200809;
pub const _POSIX_REENTRANT_FUNCTIONS: ::std::os::raw::c_uint = 1;
pub const _POSIX_THREAD_SAFE_FUNCTIONS: ::std::os::raw::c_uint = 200809;
pub const _POSIX_THREAD_PRIORITY_SCHEDULING: ::std::os::raw::c_uint = 200809;
pub const _POSIX_THREAD_ATTR_STACKSIZE: ::std::os::raw::c_uint = 200809;
pub const _POSIX_THREAD_ATTR_STACKADDR: ::std::os::raw::c_uint = 200809;
pub const _POSIX_THREAD_PRIO_INHERIT: ::std::os::raw::c_uint = 200809;
pub const _POSIX_THREAD_PRIO_PROTECT: ::std::os::raw::c_uint = 200809;
pub const _POSIX_THREAD_ROBUST_PRIO_INHERIT: ::std::os::raw::c_uint = 200809;
pub const _POSIX_THREAD_ROBUST_PRIO_PROTECT: ::std::os::raw::c_int = -1;
pub const _POSIX_SEMAPHORES: ::std::os::raw::c_uint = 200809;
pub const _POSIX_REALTIME_SIGNALS: ::std::os::raw::c_uint = 200809;
pub const _POSIX_ASYNCHRONOUS_IO: ::std::os::raw::c_uint = 200809;
pub const _POSIX_ASYNC_IO: ::std::os::raw::c_uint = 1;
pub const _LFS_ASYNCHRONOUS_IO: ::std::os::raw::c_uint = 1;
pub const _POSIX_PRIORITIZED_IO: ::std::os::raw::c_uint = 200809;
pub const _LFS64_ASYNCHRONOUS_IO: ::std::os::raw::c_uint = 1;
pub const _LFS_LARGEFILE: ::std::os::raw::c_uint = 1;
pub const _LFS64_LARGEFILE: ::std::os::raw::c_uint = 1;
pub const _LFS64_STDIO: ::std::os::raw::c_uint = 1;
pub const _POSIX_SHARED_MEMORY_OBJECTS: ::std::os::raw::c_uint = 200809;
pub const _POSIX_CPUTIME: ::std::os::raw::c_uint = 0;
pub const _POSIX_THREAD_CPUTIME: ::std::os::raw::c_uint = 0;
pub const _POSIX_REGEXP: ::std::os::raw::c_uint = 1;
pub const _POSIX_READER_WRITER_LOCKS: ::std::os::raw::c_uint = 200809;
pub const _POSIX_SHELL: ::std::os::raw::c_uint = 1;
pub const _POSIX_TIMEOUTS: ::std::os::raw::c_uint = 200809;
pub const _POSIX_SPIN_LOCKS: ::std::os::raw::c_uint = 200809;
pub const _POSIX_SPAWN: ::std::os::raw::c_uint = 200809;
pub const _POSIX_TIMERS: ::std::os::raw::c_uint = 200809;
pub const _POSIX_BARRIERS: ::std::os::raw::c_uint = 200809;
pub const _POSIX_MESSAGE_PASSING: ::std::os::raw::c_uint = 200809;
pub const _POSIX_THREAD_PROCESS_SHARED: ::std::os::raw::c_uint = 200809;
pub const _POSIX_MONOTONIC_CLOCK: ::std::os::raw::c_uint = 0;
pub const _POSIX_CLOCK_SELECTION: ::std::os::raw::c_uint = 200809;
pub const _POSIX_ADVISORY_INFO: ::std::os::raw::c_uint = 200809;
pub const _POSIX_IPV6: ::std::os::raw::c_uint = 200809;
pub const _POSIX_RAW_SOCKETS: ::std::os::raw::c_uint = 200809;
pub const _POSIX2_CHAR_TERM: ::std::os::raw::c_uint = 200809;
pub const _POSIX_SPORADIC_SERVER: ::std::os::raw::c_int = -1;
pub const _POSIX_THREAD_SPORADIC_SERVER: ::std::os::raw::c_int = -1;
pub const _POSIX_TRACE: ::std::os::raw::c_int = -1;
pub const _POSIX_TRACE_EVENT_FILTER: ::std::os::raw::c_int = -1;
pub const _POSIX_TRACE_INHERIT: ::std::os::raw::c_int = -1;
pub const _POSIX_TRACE_LOG: ::std::os::raw::c_int = -1;
pub const _POSIX_TYPED_MEMORY_OBJECTS: ::std::os::raw::c_int = -1;
pub const _POSIX_V7_LPBIG_OFFBIG: ::std::os::raw::c_int = -1;
pub const _POSIX_V6_LPBIG_OFFBIG: ::std::os::raw::c_int = -1;
pub const _XBS5_LPBIG_OFFBIG: ::std::os::raw::c_int = -1;
pub const _POSIX_V7_LP64_OFF64: ::std::os::raw::c_uint = 1;
pub const _POSIX_V6_LP64_OFF64: ::std::os::raw::c_uint = 1;
pub const _XBS5_LP64_OFF64: ::std::os::raw::c_uint = 1;
pub const __ILP32_OFF32_CFLAGS: &'static [u8; 5usize] = b"-m32\x00";
pub const __ILP32_OFF32_LDFLAGS: &'static [u8; 5usize] = b"-m32\x00";
pub const __ILP32_OFFBIG_CFLAGS: &'static [u8; 48usize] =
    b"-m32 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64\x00";
pub const __ILP32_OFFBIG_LDFLAGS: &'static [u8; 5usize] = b"-m32\x00";
pub const __LP64_OFF64_CFLAGS: &'static [u8; 5usize] = b"-m64\x00";
pub const __LP64_OFF64_LDFLAGS: &'static [u8; 5usize] = b"-m64\x00";
pub const STDIN_FILENO: ::std::os::raw::c_uint = 0;
pub const STDOUT_FILENO: ::std::os::raw::c_uint = 1;
pub const STDERR_FILENO: ::std::os::raw::c_uint = 2;
pub const R_OK: ::std::os::raw::c_uint = 4;
pub const W_OK: ::std::os::raw::c_uint = 2;
pub const X_OK: ::std::os::raw::c_uint = 1;
pub const F_OK: ::std::os::raw::c_uint = 0;
pub const SEEK_SET: ::std::os::raw::c_uint = 0;
pub const SEEK_CUR: ::std::os::raw::c_uint = 1;
pub const SEEK_END: ::std::os::raw::c_uint = 2;
pub const SEEK_DATA: ::std::os::raw::c_uint = 3;
pub const SEEK_HOLE: ::std::os::raw::c_uint = 4;
pub const L_SET: ::std::os::raw::c_uint = 0;
pub const L_INCR: ::std::os::raw::c_uint = 1;
pub const L_XTND: ::std::os::raw::c_uint = 2;
pub const F_ULOCK: ::std::os::raw::c_uint = 0;
pub const F_LOCK: ::std::os::raw::c_uint = 1;
pub const F_TLOCK: ::std::os::raw::c_uint = 2;
pub const F_TEST: ::std::os::raw::c_uint = 3;
pub const _STDIO_H: ::std::os::raw::c_uint = 1;
pub const __GLIBC_USE_LIB_EXT2: ::std::os::raw::c_uint = 1;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: ::std::os::raw::c_uint = 1;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: ::std::os::raw::c_uint = 1;
pub const __FILE_defined: ::std::os::raw::c_uint = 1;
pub const ____FILE_defined: ::std::os::raw::c_uint = 1;
pub const _G_config_h: ::std::os::raw::c_uint = 1;
pub const ____mbstate_t_defined: ::std::os::raw::c_uint = 1;
pub const _G_HAVE_MMAP: ::std::os::raw::c_uint = 1;
pub const _G_HAVE_MREMAP: ::std::os::raw::c_uint = 1;
pub const _G_IO_IO_FILE_VERSION: ::std::os::raw::c_uint = 131073;
pub const _G_BUFSIZ: ::std::os::raw::c_uint = 8192;
pub const _IO_BUFSIZ: ::std::os::raw::c_uint = 8192;
pub const __GNUC_VA_LIST: ::std::os::raw::c_uint = 1;
pub const _IO_UNIFIED_JUMPTABLES: ::std::os::raw::c_uint = 1;
pub const EOF: ::std::os::raw::c_int = -1;
pub const _IOS_INPUT: ::std::os::raw::c_uint = 1;
pub const _IOS_OUTPUT: ::std::os::raw::c_uint = 2;
pub const _IOS_ATEND: ::std::os::raw::c_uint = 4;
pub const _IOS_APPEND: ::std::os::raw::c_uint = 8;
pub const _IOS_TRUNC: ::std::os::raw::c_uint = 16;
pub const _IOS_NOCREATE: ::std::os::raw::c_uint = 32;
pub const _IOS_NOREPLACE: ::std::os::raw::c_uint = 64;
pub const _IOS_BIN: ::std::os::raw::c_uint = 128;
pub const _IO_MAGIC: ::std::os::raw::c_uint = 4222418944;
pub const _OLD_STDIO_MAGIC: ::std::os::raw::c_uint = 4206624768;
pub const _IO_MAGIC_MASK: ::std::os::raw::c_uint = 4294901760;
pub const _IO_USER_BUF: ::std::os::raw::c_uint = 1;
pub const _IO_UNBUFFERED: ::std::os::raw::c_uint = 2;
pub const _IO_NO_READS: ::std::os::raw::c_uint = 4;
pub const _IO_NO_WRITES: ::std::os::raw::c_uint = 8;
pub const _IO_EOF_SEEN: ::std::os::raw::c_uint = 16;
pub const _IO_ERR_SEEN: ::std::os::raw::c_uint = 32;
pub const _IO_DELETE_DONT_CLOSE: ::std::os::raw::c_uint = 64;
pub const _IO_LINKED: ::std::os::raw::c_uint = 128;
pub const _IO_IN_BACKUP: ::std::os::raw::c_uint = 256;
pub const _IO_LINE_BUF: ::std::os::raw::c_uint = 512;
pub const _IO_TIED_PUT_GET: ::std::os::raw::c_uint = 1024;
pub const _IO_CURRENTLY_PUTTING: ::std::os::raw::c_uint = 2048;
pub const _IO_IS_APPENDING: ::std::os::raw::c_uint = 4096;
pub const _IO_IS_FILEBUF: ::std::os::raw::c_uint = 8192;
pub const _IO_BAD_SEEN: ::std::os::raw::c_uint = 16384;
pub const _IO_USER_LOCK: ::std::os::raw::c_uint = 32768;
pub const _IO_FLAGS2_MMAP: ::std::os::raw::c_uint = 1;
pub const _IO_FLAGS2_NOTCANCEL: ::std::os::raw::c_uint = 2;
pub const _IO_FLAGS2_USER_WBUF: ::std::os::raw::c_uint = 8;
pub const _IO_SKIPWS: ::std::os::raw::c_uint = 1;
pub const _IO_LEFT: ::std::os::raw::c_uint = 2;
pub const _IO_RIGHT: ::std::os::raw::c_uint = 4;
pub const _IO_INTERNAL: ::std::os::raw::c_uint = 8;
pub const _IO_DEC: ::std::os::raw::c_uint = 16;
pub const _IO_OCT: ::std::os::raw::c_uint = 32;
pub const _IO_HEX: ::std::os::raw::c_uint = 64;
pub const _IO_SHOWBASE: ::std::os::raw::c_uint = 128;
pub const _IO_SHOWPOINT: ::std::os::raw::c_uint = 256;
pub const _IO_UPPERCASE: ::std::os::raw::c_uint = 512;
pub const _IO_SHOWPOS: ::std::os::raw::c_uint = 1024;
pub const _IO_SCIENTIFIC: ::std::os::raw::c_uint = 2048;
pub const _IO_FIXED: ::std::os::raw::c_uint = 4096;
pub const _IO_UNITBUF: ::std::os::raw::c_uint = 8192;
pub const _IO_STDIO: ::std::os::raw::c_uint = 16384;
pub const _IO_DONT_CLOSE: ::std::os::raw::c_uint = 32768;
pub const _IO_BOOLALPHA: ::std::os::raw::c_uint = 65536;
pub const _IOFBF: ::std::os::raw::c_uint = 0;
pub const _IOLBF: ::std::os::raw::c_uint = 1;
pub const _IONBF: ::std::os::raw::c_uint = 2;
pub const BUFSIZ: ::std::os::raw::c_uint = 8192;
pub const P_tmpdir: &'static [u8; 5usize] = b"/tmp\x00";
pub const L_tmpnam: ::std::os::raw::c_uint = 20;
pub const TMP_MAX: ::std::os::raw::c_uint = 238328;
pub const FILENAME_MAX: ::std::os::raw::c_uint = 4096;
pub const L_ctermid: ::std::os::raw::c_uint = 9;
pub const L_cuserid: ::std::os::raw::c_uint = 9;
pub const FOPEN_MAX: ::std::os::raw::c_uint = 16;
pub const _CTYPE_H: ::std::os::raw::c_uint = 1;
pub const _XLOCALE_H: ::std::os::raw::c_uint = 1;
pub const _SYS_STAT_H: ::std::os::raw::c_uint = 1;
pub const _BITS_STAT_H: ::std::os::raw::c_uint = 1;
pub const _STAT_VER_KERNEL: ::std::os::raw::c_uint = 0;
pub const _STAT_VER_LINUX: ::std::os::raw::c_uint = 1;
pub const _MKNOD_VER_LINUX: ::std::os::raw::c_uint = 0;
pub const _STAT_VER: ::std::os::raw::c_uint = 1;
pub const __S_IFMT: ::std::os::raw::c_uint = 61440;
pub const __S_IFDIR: ::std::os::raw::c_uint = 16384;
pub const __S_IFCHR: ::std::os::raw::c_uint = 8192;
pub const __S_IFBLK: ::std::os::raw::c_uint = 24576;
pub const __S_IFREG: ::std::os::raw::c_uint = 32768;
pub const __S_IFIFO: ::std::os::raw::c_uint = 4096;
pub const __S_IFLNK: ::std::os::raw::c_uint = 40960;
pub const __S_IFSOCK: ::std::os::raw::c_uint = 49152;
pub const __S_ISUID: ::std::os::raw::c_uint = 2048;
pub const __S_ISGID: ::std::os::raw::c_uint = 1024;
pub const __S_ISVTX: ::std::os::raw::c_uint = 512;
pub const __S_IREAD: ::std::os::raw::c_uint = 256;
pub const __S_IWRITE: ::std::os::raw::c_uint = 128;
pub const __S_IEXEC: ::std::os::raw::c_uint = 64;
pub const UTIME_NOW: ::std::os::raw::c_uint = 1073741823;
pub const UTIME_OMIT: ::std::os::raw::c_uint = 1073741822;
pub const S_IFMT: ::std::os::raw::c_uint = 61440;
pub const S_IFDIR: ::std::os::raw::c_uint = 16384;
pub const S_IFCHR: ::std::os::raw::c_uint = 8192;
pub const S_IFBLK: ::std::os::raw::c_uint = 24576;
pub const S_IFREG: ::std::os::raw::c_uint = 32768;
pub const S_IFIFO: ::std::os::raw::c_uint = 4096;
pub const S_IFLNK: ::std::os::raw::c_uint = 40960;
pub const S_IFSOCK: ::std::os::raw::c_uint = 49152;
pub const S_ISUID: ::std::os::raw::c_uint = 2048;
pub const S_ISGID: ::std::os::raw::c_uint = 1024;
pub const S_ISVTX: ::std::os::raw::c_uint = 512;
pub const S_IRUSR: ::std::os::raw::c_uint = 256;
pub const S_IWUSR: ::std::os::raw::c_uint = 128;
pub const S_IXUSR: ::std::os::raw::c_uint = 64;
pub const S_IRWXU: ::std::os::raw::c_uint = 448;
pub const S_IREAD: ::std::os::raw::c_uint = 256;
pub const S_IWRITE: ::std::os::raw::c_uint = 128;
pub const S_IEXEC: ::std::os::raw::c_uint = 64;
pub const S_IRGRP: ::std::os::raw::c_uint = 32;
pub const S_IWGRP: ::std::os::raw::c_uint = 16;
pub const S_IXGRP: ::std::os::raw::c_uint = 8;
pub const S_IRWXG: ::std::os::raw::c_uint = 56;
pub const S_IROTH: ::std::os::raw::c_uint = 4;
pub const S_IWOTH: ::std::os::raw::c_uint = 2;
pub const S_IXOTH: ::std::os::raw::c_uint = 1;
pub const S_IRWXO: ::std::os::raw::c_uint = 7;
pub const ACCESSPERMS: ::std::os::raw::c_uint = 511;
pub const ALLPERMS: ::std::os::raw::c_uint = 4095;
pub const DEFFILEMODE: ::std::os::raw::c_uint = 438;
pub const S_BLKSIZE: ::std::os::raw::c_uint = 512;
pub const _MKNOD_VER: ::std::os::raw::c_uint = 0;
pub const _SIGSET_H_fns: ::std::os::raw::c_uint = 1;
pub const SIGHUP: ::std::os::raw::c_uint = 1;
pub const SIGINT: ::std::os::raw::c_uint = 2;
pub const SIGQUIT: ::std::os::raw::c_uint = 3;
pub const SIGILL: ::std::os::raw::c_uint = 4;
pub const SIGTRAP: ::std::os::raw::c_uint = 5;
pub const SIGABRT: ::std::os::raw::c_uint = 6;
pub const SIGIOT: ::std::os::raw::c_uint = 6;
pub const SIGBUS: ::std::os::raw::c_uint = 7;
pub const SIGFPE: ::std::os::raw::c_uint = 8;
pub const SIGKILL: ::std::os::raw::c_uint = 9;
pub const SIGUSR1: ::std::os::raw::c_uint = 10;
pub const SIGSEGV: ::std::os::raw::c_uint = 11;
pub const SIGUSR2: ::std::os::raw::c_uint = 12;
pub const SIGPIPE: ::std::os::raw::c_uint = 13;
pub const SIGALRM: ::std::os::raw::c_uint = 14;
pub const SIGTERM: ::std::os::raw::c_uint = 15;
pub const SIGSTKFLT: ::std::os::raw::c_uint = 16;
pub const SIGCHLD: ::std::os::raw::c_uint = 17;
pub const SIGCONT: ::std::os::raw::c_uint = 18;
pub const SIGSTOP: ::std::os::raw::c_uint = 19;
pub const SIGTSTP: ::std::os::raw::c_uint = 20;
pub const SIGTTIN: ::std::os::raw::c_uint = 21;
pub const SIGTTOU: ::std::os::raw::c_uint = 22;
pub const SIGURG: ::std::os::raw::c_uint = 23;
pub const SIGXCPU: ::std::os::raw::c_uint = 24;
pub const SIGXFSZ: ::std::os::raw::c_uint = 25;
pub const SIGVTALRM: ::std::os::raw::c_uint = 26;
pub const SIGPROF: ::std::os::raw::c_uint = 27;
pub const SIGWINCH: ::std::os::raw::c_uint = 28;
pub const SIGIO: ::std::os::raw::c_uint = 29;
pub const SIGPWR: ::std::os::raw::c_uint = 30;
pub const SIGSYS: ::std::os::raw::c_uint = 31;
pub const SIGUNUSED: ::std::os::raw::c_uint = 31;
pub const _NSIG: ::std::os::raw::c_uint = 65;
pub const __SIGRTMIN: ::std::os::raw::c_uint = 32;
pub const __SIGRTMAX: ::std::os::raw::c_uint = 64;
pub const __have_sigval_t: ::std::os::raw::c_uint = 1;
pub const __have_siginfo_t: ::std::os::raw::c_uint = 1;
pub const __SI_MAX_SIZE: ::std::os::raw::c_uint = 128;
pub const __have_sigevent_t: ::std::os::raw::c_uint = 1;
pub const __SIGEV_MAX_SIZE: ::std::os::raw::c_uint = 64;
pub const NSIG: ::std::os::raw::c_uint = 65;
pub const SA_NOCLDSTOP: ::std::os::raw::c_uint = 1;
pub const SA_NOCLDWAIT: ::std::os::raw::c_uint = 2;
pub const SA_SIGINFO: ::std::os::raw::c_uint = 4;
pub const SA_ONSTACK: ::std::os::raw::c_uint = 134217728;
pub const SA_RESTART: ::std::os::raw::c_uint = 268435456;
pub const SA_NODEFER: ::std::os::raw::c_uint = 1073741824;
pub const SA_RESETHAND: ::std::os::raw::c_uint = 2147483648;
pub const SA_INTERRUPT: ::std::os::raw::c_uint = 536870912;
pub const SA_NOMASK: ::std::os::raw::c_uint = 1073741824;
pub const SA_ONESHOT: ::std::os::raw::c_uint = 2147483648;
pub const SA_STACK: ::std::os::raw::c_uint = 134217728;
pub const SIG_BLOCK: ::std::os::raw::c_uint = 0;
pub const SIG_UNBLOCK: ::std::os::raw::c_uint = 1;
pub const SIG_SETMASK: ::std::os::raw::c_uint = 2;
pub const _BITS_SIGCONTEXT_H: ::std::os::raw::c_uint = 1;
pub const FP_XSTATE_MAGIC1: ::std::os::raw::c_uint = 1179670611;
pub const FP_XSTATE_MAGIC2: ::std::os::raw::c_uint = 1179670597;
pub const _BITS_SIGSTACK_H: ::std::os::raw::c_uint = 1;
pub const MINSIGSTKSZ: ::std::os::raw::c_uint = 2048;
pub const SIGSTKSZ: ::std::os::raw::c_uint = 8192;
pub const _SYS_UCONTEXT_H: ::std::os::raw::c_uint = 1;
pub const NGREG: ::std::os::raw::c_uint = 23;
pub const _BITS_SIGTHREAD_H: ::std::os::raw::c_uint = 1;
pub const _SETJMP_H: ::std::os::raw::c_uint = 1;
pub const _BITS_SETJMP_H: ::std::os::raw::c_uint = 1;
pub const _PWD_H: ::std::os::raw::c_uint = 1;
pub const NSS_BUFLEN_PASSWD: ::std::os::raw::c_uint = 1024;
pub const _GRP_H: ::std::os::raw::c_uint = 1;
pub const NSS_BUFLEN_GROUP: ::std::os::raw::c_uint = 1024;
pub const _DIRENT_H: ::std::os::raw::c_uint = 1;
pub const _DIRENT_MATCHES_DIRENT64: ::std::os::raw::c_uint = 1;
pub const _BITS_POSIX1_LIM_H: ::std::os::raw::c_uint = 1;
pub const _POSIX_AIO_LISTIO_MAX: ::std::os::raw::c_uint = 2;
pub const _POSIX_AIO_MAX: ::std::os::raw::c_uint = 1;
pub const _POSIX_ARG_MAX: ::std::os::raw::c_uint = 4096;
pub const _POSIX_CHILD_MAX: ::std::os::raw::c_uint = 25;
pub const _POSIX_DELAYTIMER_MAX: ::std::os::raw::c_uint = 32;
pub const _POSIX_HOST_NAME_MAX: ::std::os::raw::c_uint = 255;
pub const _POSIX_LINK_MAX: ::std::os::raw::c_uint = 8;
pub const _POSIX_LOGIN_NAME_MAX: ::std::os::raw::c_uint = 9;
pub const _POSIX_MAX_CANON: ::std::os::raw::c_uint = 255;
pub const _POSIX_MAX_INPUT: ::std::os::raw::c_uint = 255;
pub const _POSIX_MQ_OPEN_MAX: ::std::os::raw::c_uint = 8;
pub const _POSIX_MQ_PRIO_MAX: ::std::os::raw::c_uint = 32;
pub const _POSIX_NAME_MAX: ::std::os::raw::c_uint = 14;
pub const _POSIX_NGROUPS_MAX: ::std::os::raw::c_uint = 8;
pub const _POSIX_OPEN_MAX: ::std::os::raw::c_uint = 20;
pub const _POSIX_FD_SETSIZE: ::std::os::raw::c_uint = 20;
pub const _POSIX_PATH_MAX: ::std::os::raw::c_uint = 256;
pub const _POSIX_PIPE_BUF: ::std::os::raw::c_uint = 512;
pub const _POSIX_RE_DUP_MAX: ::std::os::raw::c_uint = 255;
pub const _POSIX_RTSIG_MAX: ::std::os::raw::c_uint = 8;
pub const _POSIX_SEM_NSEMS_MAX: ::std::os::raw::c_uint = 256;
pub const _POSIX_SEM_VALUE_MAX: ::std::os::raw::c_uint = 32767;
pub const _POSIX_SIGQUEUE_MAX: ::std::os::raw::c_uint = 32;
pub const _POSIX_SSIZE_MAX: ::std::os::raw::c_uint = 32767;
pub const _POSIX_STREAM_MAX: ::std::os::raw::c_uint = 8;
pub const _POSIX_SYMLINK_MAX: ::std::os::raw::c_uint = 255;
pub const _POSIX_SYMLOOP_MAX: ::std::os::raw::c_uint = 8;
pub const _POSIX_TIMER_MAX: ::std::os::raw::c_uint = 32;
pub const _POSIX_TTY_NAME_MAX: ::std::os::raw::c_uint = 9;
pub const _POSIX_TZNAME_MAX: ::std::os::raw::c_uint = 6;
pub const _POSIX_QLIMIT: ::std::os::raw::c_uint = 1;
pub const _POSIX_HIWAT: ::std::os::raw::c_uint = 512;
pub const _POSIX_UIO_MAXIOV: ::std::os::raw::c_uint = 16;
pub const _POSIX_CLOCKRES_MIN: ::std::os::raw::c_uint = 20000000;
pub const NR_OPEN: ::std::os::raw::c_uint = 1024;
pub const NGROUPS_MAX: ::std::os::raw::c_uint = 65536;
pub const ARG_MAX: ::std::os::raw::c_uint = 131072;
pub const LINK_MAX: ::std::os::raw::c_uint = 127;
pub const MAX_CANON: ::std::os::raw::c_uint = 255;
pub const MAX_INPUT: ::std::os::raw::c_uint = 255;
pub const NAME_MAX: ::std::os::raw::c_uint = 255;
pub const PATH_MAX: ::std::os::raw::c_uint = 4096;
pub const PIPE_BUF: ::std::os::raw::c_uint = 4096;
pub const XATTR_NAME_MAX: ::std::os::raw::c_uint = 255;
pub const XATTR_SIZE_MAX: ::std::os::raw::c_uint = 65536;
pub const XATTR_LIST_MAX: ::std::os::raw::c_uint = 65536;
pub const RTSIG_MAX: ::std::os::raw::c_uint = 32;
pub const _POSIX_THREAD_KEYS_MAX: ::std::os::raw::c_uint = 128;
pub const PTHREAD_KEYS_MAX: ::std::os::raw::c_uint = 1024;
pub const _POSIX_THREAD_DESTRUCTOR_ITERATIONS: ::std::os::raw::c_uint = 4;
pub const PTHREAD_DESTRUCTOR_ITERATIONS: ::std::os::raw::c_uint = 4;
pub const _POSIX_THREAD_THREADS_MAX: ::std::os::raw::c_uint = 64;
pub const AIO_PRIO_DELTA_MAX: ::std::os::raw::c_uint = 20;
pub const PTHREAD_STACK_MIN: ::std::os::raw::c_uint = 16384;
pub const DELAYTIMER_MAX: ::std::os::raw::c_uint = 2147483647;
pub const TTY_NAME_MAX: ::std::os::raw::c_uint = 32;
pub const LOGIN_NAME_MAX: ::std::os::raw::c_uint = 256;
pub const HOST_NAME_MAX: ::std::os::raw::c_uint = 64;
pub const MQ_PRIO_MAX: ::std::os::raw::c_uint = 32768;
pub const SEM_VALUE_MAX: ::std::os::raw::c_uint = 2147483647;
pub const MAXNAMLEN: ::std::os::raw::c_uint = 255;
pub const _STDLIB_H: ::std::os::raw::c_uint = 1;
pub const WNOHANG: ::std::os::raw::c_uint = 1;
pub const WUNTRACED: ::std::os::raw::c_uint = 2;
pub const WSTOPPED: ::std::os::raw::c_uint = 2;
pub const WEXITED: ::std::os::raw::c_uint = 4;
pub const WCONTINUED: ::std::os::raw::c_uint = 8;
pub const WNOWAIT: ::std::os::raw::c_uint = 16777216;
pub const __WNOTHREAD: ::std::os::raw::c_uint = 536870912;
pub const __WALL: ::std::os::raw::c_uint = 1073741824;
pub const __WCLONE: ::std::os::raw::c_uint = 2147483648;
pub const __W_CONTINUED: ::std::os::raw::c_uint = 65535;
pub const __WCOREFLAG: ::std::os::raw::c_uint = 128;
pub const __ldiv_t_defined: ::std::os::raw::c_uint = 1;
pub const __lldiv_t_defined: ::std::os::raw::c_uint = 1;
pub const RAND_MAX: ::std::os::raw::c_uint = 2147483647;
pub const EXIT_FAILURE: ::std::os::raw::c_uint = 1;
pub const EXIT_SUCCESS: ::std::os::raw::c_uint = 0;
pub const _ALLOCA_H: ::std::os::raw::c_uint = 1;
pub const _ERRNO_H: ::std::os::raw::c_uint = 1;
pub const EPERM: ::std::os::raw::c_uint = 1;
pub const ENOENT: ::std::os::raw::c_uint = 2;
pub const ESRCH: ::std::os::raw::c_uint = 3;
pub const EINTR: ::std::os::raw::c_uint = 4;
pub const EIO: ::std::os::raw::c_uint = 5;
pub const ENXIO: ::std::os::raw::c_uint = 6;
pub const E2BIG: ::std::os::raw::c_uint = 7;
pub const ENOEXEC: ::std::os::raw::c_uint = 8;
pub const EBADF: ::std::os::raw::c_uint = 9;
pub const ECHILD: ::std::os::raw::c_uint = 10;
pub const EAGAIN: ::std::os::raw::c_uint = 11;
pub const ENOMEM: ::std::os::raw::c_uint = 12;
pub const EACCES: ::std::os::raw::c_uint = 13;
pub const EFAULT: ::std::os::raw::c_uint = 14;
pub const ENOTBLK: ::std::os::raw::c_uint = 15;
pub const EBUSY: ::std::os::raw::c_uint = 16;
pub const EEXIST: ::std::os::raw::c_uint = 17;
pub const EXDEV: ::std::os::raw::c_uint = 18;
pub const ENODEV: ::std::os::raw::c_uint = 19;
pub const ENOTDIR: ::std::os::raw::c_uint = 20;
pub const EISDIR: ::std::os::raw::c_uint = 21;
pub const EINVAL: ::std::os::raw::c_uint = 22;
pub const ENFILE: ::std::os::raw::c_uint = 23;
pub const EMFILE: ::std::os::raw::c_uint = 24;
pub const ENOTTY: ::std::os::raw::c_uint = 25;
pub const ETXTBSY: ::std::os::raw::c_uint = 26;
pub const EFBIG: ::std::os::raw::c_uint = 27;
pub const ENOSPC: ::std::os::raw::c_uint = 28;
pub const ESPIPE: ::std::os::raw::c_uint = 29;
pub const EROFS: ::std::os::raw::c_uint = 30;
pub const EMLINK: ::std::os::raw::c_uint = 31;
pub const EPIPE: ::std::os::raw::c_uint = 32;
pub const EDOM: ::std::os::raw::c_uint = 33;
pub const ERANGE: ::std::os::raw::c_uint = 34;
pub const EDEADLK: ::std::os::raw::c_uint = 35;
pub const ENAMETOOLONG: ::std::os::raw::c_uint = 36;
pub const ENOLCK: ::std::os::raw::c_uint = 37;
pub const ENOSYS: ::std::os::raw::c_uint = 38;
pub const ENOTEMPTY: ::std::os::raw::c_uint = 39;
pub const ELOOP: ::std::os::raw::c_uint = 40;
pub const EWOULDBLOCK: ::std::os::raw::c_uint = 11;
pub const ENOMSG: ::std::os::raw::c_uint = 42;
pub const EIDRM: ::std::os::raw::c_uint = 43;
pub const ECHRNG: ::std::os::raw::c_uint = 44;
pub const EL2NSYNC: ::std::os::raw::c_uint = 45;
pub const EL3HLT: ::std::os::raw::c_uint = 46;
pub const EL3RST: ::std::os::raw::c_uint = 47;
pub const ELNRNG: ::std::os::raw::c_uint = 48;
pub const EUNATCH: ::std::os::raw::c_uint = 49;
pub const ENOCSI: ::std::os::raw::c_uint = 50;
pub const EL2HLT: ::std::os::raw::c_uint = 51;
pub const EBADE: ::std::os::raw::c_uint = 52;
pub const EBADR: ::std::os::raw::c_uint = 53;
pub const EXFULL: ::std::os::raw::c_uint = 54;
pub const ENOANO: ::std::os::raw::c_uint = 55;
pub const EBADRQC: ::std::os::raw::c_uint = 56;
pub const EBADSLT: ::std::os::raw::c_uint = 57;
pub const EDEADLOCK: ::std::os::raw::c_uint = 35;
pub const EBFONT: ::std::os::raw::c_uint = 59;
pub const ENOSTR: ::std::os::raw::c_uint = 60;
pub const ENODATA: ::std::os::raw::c_uint = 61;
pub const ETIME: ::std::os::raw::c_uint = 62;
pub const ENOSR: ::std::os::raw::c_uint = 63;
pub const ENONET: ::std::os::raw::c_uint = 64;
pub const ENOPKG: ::std::os::raw::c_uint = 65;
pub const EREMOTE: ::std::os::raw::c_uint = 66;
pub const ENOLINK: ::std::os::raw::c_uint = 67;
pub const EADV: ::std::os::raw::c_uint = 68;
pub const ESRMNT: ::std::os::raw::c_uint = 69;
pub const ECOMM: ::std::os::raw::c_uint = 70;
pub const EPROTO: ::std::os::raw::c_uint = 71;
pub const EMULTIHOP: ::std::os::raw::c_uint = 72;
pub const EDOTDOT: ::std::os::raw::c_uint = 73;
pub const EBADMSG: ::std::os::raw::c_uint = 74;
pub const EOVERFLOW: ::std::os::raw::c_uint = 75;
pub const ENOTUNIQ: ::std::os::raw::c_uint = 76;
pub const EBADFD: ::std::os::raw::c_uint = 77;
pub const EREMCHG: ::std::os::raw::c_uint = 78;
pub const ELIBACC: ::std::os::raw::c_uint = 79;
pub const ELIBBAD: ::std::os::raw::c_uint = 80;
pub const ELIBSCN: ::std::os::raw::c_uint = 81;
pub const ELIBMAX: ::std::os::raw::c_uint = 82;
pub const ELIBEXEC: ::std::os::raw::c_uint = 83;
pub const EILSEQ: ::std::os::raw::c_uint = 84;
pub const ERESTART: ::std::os::raw::c_uint = 85;
pub const ESTRPIPE: ::std::os::raw::c_uint = 86;
pub const EUSERS: ::std::os::raw::c_uint = 87;
pub const ENOTSOCK: ::std::os::raw::c_uint = 88;
pub const EDESTADDRREQ: ::std::os::raw::c_uint = 89;
pub const EMSGSIZE: ::std::os::raw::c_uint = 90;
pub const EPROTOTYPE: ::std::os::raw::c_uint = 91;
pub const ENOPROTOOPT: ::std::os::raw::c_uint = 92;
pub const EPROTONOSUPPORT: ::std::os::raw::c_uint = 93;
pub const ESOCKTNOSUPPORT: ::std::os::raw::c_uint = 94;
pub const EOPNOTSUPP: ::std::os::raw::c_uint = 95;
pub const EPFNOSUPPORT: ::std::os::raw::c_uint = 96;
pub const EAFNOSUPPORT: ::std::os::raw::c_uint = 97;
pub const EADDRINUSE: ::std::os::raw::c_uint = 98;
pub const EADDRNOTAVAIL: ::std::os::raw::c_uint = 99;
pub const ENETDOWN: ::std::os::raw::c_uint = 100;
pub const ENETUNREACH: ::std::os::raw::c_uint = 101;
pub const ENETRESET: ::std::os::raw::c_uint = 102;
pub const ECONNABORTED: ::std::os::raw::c_uint = 103;
pub const ECONNRESET: ::std::os::raw::c_uint = 104;
pub const ENOBUFS: ::std::os::raw::c_uint = 105;
pub const EISCONN: ::std::os::raw::c_uint = 106;
pub const ENOTCONN: ::std::os::raw::c_uint = 107;
pub const ESHUTDOWN: ::std::os::raw::c_uint = 108;
pub const ETOOMANYREFS: ::std::os::raw::c_uint = 109;
pub const ETIMEDOUT: ::std::os::raw::c_uint = 110;
pub const ECONNREFUSED: ::std::os::raw::c_uint = 111;
pub const EHOSTDOWN: ::std::os::raw::c_uint = 112;
pub const EHOSTUNREACH: ::std::os::raw::c_uint = 113;
pub const EALREADY: ::std::os::raw::c_uint = 114;
pub const EINPROGRESS: ::std::os::raw::c_uint = 115;
pub const ESTALE: ::std::os::raw::c_uint = 116;
pub const EUCLEAN: ::std::os::raw::c_uint = 117;
pub const ENOTNAM: ::std::os::raw::c_uint = 118;
pub const ENAVAIL: ::std::os::raw::c_uint = 119;
pub const EISNAM: ::std::os::raw::c_uint = 120;
pub const EREMOTEIO: ::std::os::raw::c_uint = 121;
pub const EDQUOT: ::std::os::raw::c_uint = 122;
pub const ENOMEDIUM: ::std::os::raw::c_uint = 123;
pub const EMEDIUMTYPE: ::std::os::raw::c_uint = 124;
pub const ECANCELED: ::std::os::raw::c_uint = 125;
pub const ENOKEY: ::std::os::raw::c_uint = 126;
pub const EKEYEXPIRED: ::std::os::raw::c_uint = 127;
pub const EKEYREVOKED: ::std::os::raw::c_uint = 128;
pub const EKEYREJECTED: ::std::os::raw::c_uint = 129;
pub const EOWNERDEAD: ::std::os::raw::c_uint = 130;
pub const ENOTRECOVERABLE: ::std::os::raw::c_uint = 131;
pub const ERFKILL: ::std::os::raw::c_uint = 132;
pub const EHWPOISON: ::std::os::raw::c_uint = 133;
pub const ENOTSUP: ::std::os::raw::c_uint = 95;
pub const __error_t_defined: ::std::os::raw::c_uint = 1;
pub const _SYS_TIME_H: ::std::os::raw::c_uint = 1;
pub const _TIME_H: ::std::os::raw::c_uint = 1;
pub const _BITS_TIME_H: ::std::os::raw::c_uint = 1;
pub const CLOCK_REALTIME: ::std::os::raw::c_uint = 0;
pub const CLOCK_MONOTONIC: ::std::os::raw::c_uint = 1;
pub const CLOCK_PROCESS_CPUTIME_ID: ::std::os::raw::c_uint = 2;
pub const CLOCK_THREAD_CPUTIME_ID: ::std::os::raw::c_uint = 3;
pub const CLOCK_MONOTONIC_RAW: ::std::os::raw::c_uint = 4;
pub const CLOCK_REALTIME_COARSE: ::std::os::raw::c_uint = 5;
pub const CLOCK_MONOTONIC_COARSE: ::std::os::raw::c_uint = 6;
pub const CLOCK_BOOTTIME: ::std::os::raw::c_uint = 7;
pub const CLOCK_REALTIME_ALARM: ::std::os::raw::c_uint = 8;
pub const CLOCK_BOOTTIME_ALARM: ::std::os::raw::c_uint = 9;
pub const CLOCK_TAI: ::std::os::raw::c_uint = 11;
pub const TIMER_ABSTIME: ::std::os::raw::c_uint = 1;
pub const _BITS_TIMEX_H: ::std::os::raw::c_uint = 1;
pub const ADJ_OFFSET: ::std::os::raw::c_uint = 1;
pub const ADJ_FREQUENCY: ::std::os::raw::c_uint = 2;
pub const ADJ_MAXERROR: ::std::os::raw::c_uint = 4;
pub const ADJ_ESTERROR: ::std::os::raw::c_uint = 8;
pub const ADJ_STATUS: ::std::os::raw::c_uint = 16;
pub const ADJ_TIMECONST: ::std::os::raw::c_uint = 32;
pub const ADJ_TAI: ::std::os::raw::c_uint = 128;
pub const ADJ_SETOFFSET: ::std::os::raw::c_uint = 256;
pub const ADJ_MICRO: ::std::os::raw::c_uint = 4096;
pub const ADJ_NANO: ::std::os::raw::c_uint = 8192;
pub const ADJ_TICK: ::std::os::raw::c_uint = 16384;
pub const ADJ_OFFSET_SINGLESHOT: ::std::os::raw::c_uint = 32769;
pub const ADJ_OFFSET_SS_READ: ::std::os::raw::c_uint = 40961;
pub const MOD_OFFSET: ::std::os::raw::c_uint = 1;
pub const MOD_FREQUENCY: ::std::os::raw::c_uint = 2;
pub const MOD_MAXERROR: ::std::os::raw::c_uint = 4;
pub const MOD_ESTERROR: ::std::os::raw::c_uint = 8;
pub const MOD_STATUS: ::std::os::raw::c_uint = 16;
pub const MOD_TIMECONST: ::std::os::raw::c_uint = 32;
pub const MOD_CLKB: ::std::os::raw::c_uint = 16384;
pub const MOD_CLKA: ::std::os::raw::c_uint = 32769;
pub const MOD_TAI: ::std::os::raw::c_uint = 128;
pub const MOD_MICRO: ::std::os::raw::c_uint = 4096;
pub const MOD_NANO: ::std::os::raw::c_uint = 8192;
pub const STA_PLL: ::std::os::raw::c_uint = 1;
pub const STA_PPSFREQ: ::std::os::raw::c_uint = 2;
pub const STA_PPSTIME: ::std::os::raw::c_uint = 4;
pub const STA_FLL: ::std::os::raw::c_uint = 8;
pub const STA_INS: ::std::os::raw::c_uint = 16;
pub const STA_DEL: ::std::os::raw::c_uint = 32;
pub const STA_UNSYNC: ::std::os::raw::c_uint = 64;
pub const STA_FREQHOLD: ::std::os::raw::c_uint = 128;
pub const STA_PPSSIGNAL: ::std::os::raw::c_uint = 256;
pub const STA_PPSJITTER: ::std::os::raw::c_uint = 512;
pub const STA_PPSWANDER: ::std::os::raw::c_uint = 1024;
pub const STA_PPSERROR: ::std::os::raw::c_uint = 2048;
pub const STA_CLOCKERR: ::std::os::raw::c_uint = 4096;
pub const STA_NANO: ::std::os::raw::c_uint = 8192;
pub const STA_MODE: ::std::os::raw::c_uint = 16384;
pub const STA_CLK: ::std::os::raw::c_uint = 32768;
pub const STA_RONLY: ::std::os::raw::c_uint = 65280;
pub const __struct_tm_defined: ::std::os::raw::c_uint = 1;
pub const __itimerspec_defined: ::std::os::raw::c_uint = 1;
pub const TIME_UTC: ::std::os::raw::c_uint = 1;
pub const _SYS_TIMES_H: ::std::os::raw::c_uint = 1;
pub const _STRING_H: ::std::os::raw::c_uint = 1;
pub const _LOCALE_H: ::std::os::raw::c_uint = 1;
pub const _BITS_LOCALE_H: ::std::os::raw::c_uint = 1;
pub const __LC_CTYPE: ::std::os::raw::c_uint = 0;
pub const __LC_NUMERIC: ::std::os::raw::c_uint = 1;
pub const __LC_TIME: ::std::os::raw::c_uint = 2;
pub const __LC_COLLATE: ::std::os::raw::c_uint = 3;
pub const __LC_MONETARY: ::std::os::raw::c_uint = 4;
pub const __LC_MESSAGES: ::std::os::raw::c_uint = 5;
pub const __LC_ALL: ::std::os::raw::c_uint = 6;
pub const __LC_PAPER: ::std::os::raw::c_uint = 7;
pub const __LC_NAME: ::std::os::raw::c_uint = 8;
pub const __LC_ADDRESS: ::std::os::raw::c_uint = 9;
pub const __LC_TELEPHONE: ::std::os::raw::c_uint = 10;
pub const __LC_MEASUREMENT: ::std::os::raw::c_uint = 11;
pub const __LC_IDENTIFICATION: ::std::os::raw::c_uint = 12;
pub const LC_CTYPE: ::std::os::raw::c_uint = 0;
pub const LC_NUMERIC: ::std::os::raw::c_uint = 1;
pub const LC_TIME: ::std::os::raw::c_uint = 2;
pub const LC_COLLATE: ::std::os::raw::c_uint = 3;
pub const LC_MONETARY: ::std::os::raw::c_uint = 4;
pub const LC_MESSAGES: ::std::os::raw::c_uint = 5;
pub const LC_ALL: ::std::os::raw::c_uint = 6;
pub const LC_PAPER: ::std::os::raw::c_uint = 7;
pub const LC_NAME: ::std::os::raw::c_uint = 8;
pub const LC_ADDRESS: ::std::os::raw::c_uint = 9;
pub const LC_TELEPHONE: ::std::os::raw::c_uint = 10;
pub const LC_MEASUREMENT: ::std::os::raw::c_uint = 11;
pub const LC_IDENTIFICATION: ::std::os::raw::c_uint = 12;
pub const LC_CTYPE_MASK: ::std::os::raw::c_uint = 1;
pub const LC_NUMERIC_MASK: ::std::os::raw::c_uint = 2;
pub const LC_TIME_MASK: ::std::os::raw::c_uint = 4;
pub const LC_COLLATE_MASK: ::std::os::raw::c_uint = 8;
pub const LC_MONETARY_MASK: ::std::os::raw::c_uint = 16;
pub const LC_MESSAGES_MASK: ::std::os::raw::c_uint = 32;
pub const LC_PAPER_MASK: ::std::os::raw::c_uint = 128;
pub const LC_NAME_MASK: ::std::os::raw::c_uint = 256;
pub const LC_ADDRESS_MASK: ::std::os::raw::c_uint = 512;
pub const LC_TELEPHONE_MASK: ::std::os::raw::c_uint = 1024;
pub const LC_MEASUREMENT_MASK: ::std::os::raw::c_uint = 2048;
pub const LC_IDENTIFICATION_MASK: ::std::os::raw::c_uint = 4096;
pub const LC_ALL_MASK: ::std::os::raw::c_uint = 8127;
pub const _LIBC_LIMITS_H_: ::std::os::raw::c_uint = 1;
pub const MB_LEN_MAX: ::std::os::raw::c_uint = 16;
pub const CHAR_WIDTH: ::std::os::raw::c_uint = 8;
pub const SCHAR_WIDTH: ::std::os::raw::c_uint = 8;
pub const UCHAR_WIDTH: ::std::os::raw::c_uint = 8;
pub const SHRT_WIDTH: ::std::os::raw::c_uint = 16;
pub const USHRT_WIDTH: ::std::os::raw::c_uint = 16;
pub const INT_WIDTH: ::std::os::raw::c_uint = 32;
pub const UINT_WIDTH: ::std::os::raw::c_uint = 32;
pub const LONG_WIDTH: ::std::os::raw::c_uint = 64;
pub const ULONG_WIDTH: ::std::os::raw::c_uint = 64;
pub const LLONG_WIDTH: ::std::os::raw::c_uint = 64;
pub const ULLONG_WIDTH: ::std::os::raw::c_uint = 64;
pub const _BITS_POSIX2_LIM_H: ::std::os::raw::c_uint = 1;
pub const _POSIX2_BC_BASE_MAX: ::std::os::raw::c_uint = 99;
pub const _POSIX2_BC_DIM_MAX: ::std::os::raw::c_uint = 2048;
pub const _POSIX2_BC_SCALE_MAX: ::std::os::raw::c_uint = 99;
pub const _POSIX2_BC_STRING_MAX: ::std::os::raw::c_uint = 1000;
pub const _POSIX2_COLL_WEIGHTS_MAX: ::std::os::raw::c_uint = 2;
pub const _POSIX2_EXPR_NEST_MAX: ::std::os::raw::c_uint = 32;
pub const _POSIX2_LINE_MAX: ::std::os::raw::c_uint = 2048;
pub const _POSIX2_RE_DUP_MAX: ::std::os::raw::c_uint = 255;
pub const _POSIX2_CHARCLASS_NAME_MAX: ::std::os::raw::c_uint = 14;
pub const BC_BASE_MAX: ::std::os::raw::c_uint = 99;
pub const BC_DIM_MAX: ::std::os::raw::c_uint = 2048;
pub const BC_SCALE_MAX: ::std::os::raw::c_uint = 99;
pub const BC_STRING_MAX: ::std::os::raw::c_uint = 1000;
pub const COLL_WEIGHTS_MAX: ::std::os::raw::c_uint = 255;
pub const EXPR_NEST_MAX: ::std::os::raw::c_uint = 32;
pub const LINE_MAX: ::std::os::raw::c_uint = 2048;
pub const CHARCLASS_NAME_MAX: ::std::os::raw::c_uint = 2048;
pub const RE_DUP_MAX: ::std::os::raw::c_uint = 32767;
pub const _XOPEN_LIM_H: ::std::os::raw::c_uint = 1;
pub const IOV_MAX: ::std::os::raw::c_uint = 1024;
pub const _XOPEN_IOV_MAX: ::std::os::raw::c_uint = 16;
pub const NL_ARGMAX: ::std::os::raw::c_uint = 4096;
pub const NL_LANGMAX: ::std::os::raw::c_uint = 2048;
pub const NZERO: ::std::os::raw::c_uint = 20;
pub const WORD_BIT: ::std::os::raw::c_uint = 32;
pub const LONG_BIT: ::std::os::raw::c_uint = 64;
pub const ZSH_INITIAL_OPEN_MAX: ::std::os::raw::c_uint = 64;
pub const OPEN_MAX: ::std::os::raw::c_uint = 64;
pub const _FCNTL_H: ::std::os::raw::c_uint = 1;
pub const __O_LARGEFILE: ::std::os::raw::c_uint = 0;
pub const F_GETLK64: ::std::os::raw::c_uint = 5;
pub const F_SETLK64: ::std::os::raw::c_uint = 6;
pub const F_SETLKW64: ::std::os::raw::c_uint = 7;
pub const _BITS_UIO_H: ::std::os::raw::c_uint = 1;
pub const UIO_MAXIOV: ::std::os::raw::c_uint = 1024;
pub const O_ACCMODE: ::std::os::raw::c_uint = 3;
pub const O_RDONLY: ::std::os::raw::c_uint = 0;
pub const O_WRONLY: ::std::os::raw::c_uint = 1;
pub const O_RDWR: ::std::os::raw::c_uint = 2;
pub const O_CREAT: ::std::os::raw::c_uint = 64;
pub const O_EXCL: ::std::os::raw::c_uint = 128;
pub const O_NOCTTY: ::std::os::raw::c_uint = 256;
pub const O_TRUNC: ::std::os::raw::c_uint = 512;
pub const O_APPEND: ::std::os::raw::c_uint = 1024;
pub const O_NONBLOCK: ::std::os::raw::c_uint = 2048;
pub const O_NDELAY: ::std::os::raw::c_uint = 2048;
pub const O_SYNC: ::std::os::raw::c_uint = 1052672;
pub const O_FSYNC: ::std::os::raw::c_uint = 1052672;
pub const O_ASYNC: ::std::os::raw::c_uint = 8192;
pub const __O_DIRECTORY: ::std::os::raw::c_uint = 65536;
pub const __O_NOFOLLOW: ::std::os::raw::c_uint = 131072;
pub const __O_CLOEXEC: ::std::os::raw::c_uint = 524288;
pub const __O_DIRECT: ::std::os::raw::c_uint = 16384;
pub const __O_NOATIME: ::std::os::raw::c_uint = 262144;
pub const __O_PATH: ::std::os::raw::c_uint = 2097152;
pub const __O_DSYNC: ::std::os::raw::c_uint = 4096;
pub const __O_TMPFILE: ::std::os::raw::c_uint = 4259840;
pub const F_GETLK: ::std::os::raw::c_uint = 5;
pub const F_SETLK: ::std::os::raw::c_uint = 6;
pub const F_SETLKW: ::std::os::raw::c_uint = 7;
pub const F_OFD_GETLK: ::std::os::raw::c_uint = 36;
pub const F_OFD_SETLK: ::std::os::raw::c_uint = 37;
pub const F_OFD_SETLKW: ::std::os::raw::c_uint = 38;
pub const O_LARGEFILE: ::std::os::raw::c_uint = 0;
pub const O_DIRECTORY: ::std::os::raw::c_uint = 65536;
pub const O_NOFOLLOW: ::std::os::raw::c_uint = 131072;
pub const O_CLOEXEC: ::std::os::raw::c_uint = 524288;
pub const O_DIRECT: ::std::os::raw::c_uint = 16384;
pub const O_NOATIME: ::std::os::raw::c_uint = 262144;
pub const O_PATH: ::std::os::raw::c_uint = 2097152;
pub const O_TMPFILE: ::std::os::raw::c_uint = 4259840;
pub const O_DSYNC: ::std::os::raw::c_uint = 4096;
pub const O_RSYNC: ::std::os::raw::c_uint = 1052672;
pub const F_DUPFD: ::std::os::raw::c_uint = 0;
pub const F_GETFD: ::std::os::raw::c_uint = 1;
pub const F_SETFD: ::std::os::raw::c_uint = 2;
pub const F_GETFL: ::std::os::raw::c_uint = 3;
pub const F_SETFL: ::std::os::raw::c_uint = 4;
pub const __F_SETOWN: ::std::os::raw::c_uint = 8;
pub const __F_GETOWN: ::std::os::raw::c_uint = 9;
pub const F_SETOWN: ::std::os::raw::c_uint = 8;
pub const F_GETOWN: ::std::os::raw::c_uint = 9;
pub const __F_SETSIG: ::std::os::raw::c_uint = 10;
pub const __F_GETSIG: ::std::os::raw::c_uint = 11;
pub const __F_SETOWN_EX: ::std::os::raw::c_uint = 15;
pub const __F_GETOWN_EX: ::std::os::raw::c_uint = 16;
pub const F_SETSIG: ::std::os::raw::c_uint = 10;
pub const F_GETSIG: ::std::os::raw::c_uint = 11;
pub const F_SETOWN_EX: ::std::os::raw::c_uint = 15;
pub const F_GETOWN_EX: ::std::os::raw::c_uint = 16;
pub const F_SETLEASE: ::std::os::raw::c_uint = 1024;
pub const F_GETLEASE: ::std::os::raw::c_uint = 1025;
pub const F_NOTIFY: ::std::os::raw::c_uint = 1026;
pub const F_SETPIPE_SZ: ::std::os::raw::c_uint = 1031;
pub const F_GETPIPE_SZ: ::std::os::raw::c_uint = 1032;
pub const F_DUPFD_CLOEXEC: ::std::os::raw::c_uint = 1030;
pub const FD_CLOEXEC: ::std::os::raw::c_uint = 1;
pub const F_RDLCK: ::std::os::raw::c_uint = 0;
pub const F_WRLCK: ::std::os::raw::c_uint = 1;
pub const F_UNLCK: ::std::os::raw::c_uint = 2;
pub const F_EXLCK: ::std::os::raw::c_uint = 4;
pub const F_SHLCK: ::std::os::raw::c_uint = 8;
pub const LOCK_SH: ::std::os::raw::c_uint = 1;
pub const LOCK_EX: ::std::os::raw::c_uint = 2;
pub const LOCK_NB: ::std::os::raw::c_uint = 4;
pub const LOCK_UN: ::std::os::raw::c_uint = 8;
pub const LOCK_MAND: ::std::os::raw::c_uint = 32;
pub const LOCK_READ: ::std::os::raw::c_uint = 64;
pub const LOCK_WRITE: ::std::os::raw::c_uint = 128;
pub const LOCK_RW: ::std::os::raw::c_uint = 192;
pub const DN_ACCESS: ::std::os::raw::c_uint = 1;
pub const DN_MODIFY: ::std::os::raw::c_uint = 2;
pub const DN_CREATE: ::std::os::raw::c_uint = 4;
pub const DN_DELETE: ::std::os::raw::c_uint = 8;
pub const DN_RENAME: ::std::os::raw::c_uint = 16;
pub const DN_ATTRIB: ::std::os::raw::c_uint = 32;
pub const DN_MULTISHOT: ::std::os::raw::c_uint = 2147483648;
pub const FAPPEND: ::std::os::raw::c_uint = 1024;
pub const FFSYNC: ::std::os::raw::c_uint = 1052672;
pub const FASYNC: ::std::os::raw::c_uint = 8192;
pub const FNONBLOCK: ::std::os::raw::c_uint = 2048;
pub const FNDELAY: ::std::os::raw::c_uint = 2048;
pub const __POSIX_FADV_DONTNEED: ::std::os::raw::c_uint = 4;
pub const __POSIX_FADV_NOREUSE: ::std::os::raw::c_uint = 5;
pub const POSIX_FADV_NORMAL: ::std::os::raw::c_uint = 0;
pub const POSIX_FADV_RANDOM: ::std::os::raw::c_uint = 1;
pub const POSIX_FADV_SEQUENTIAL: ::std::os::raw::c_uint = 2;
pub const POSIX_FADV_WILLNEED: ::std::os::raw::c_uint = 3;
pub const POSIX_FADV_DONTNEED: ::std::os::raw::c_uint = 4;
pub const POSIX_FADV_NOREUSE: ::std::os::raw::c_uint = 5;
pub const SYNC_FILE_RANGE_WAIT_BEFORE: ::std::os::raw::c_uint = 1;
pub const SYNC_FILE_RANGE_WRITE: ::std::os::raw::c_uint = 2;
pub const SYNC_FILE_RANGE_WAIT_AFTER: ::std::os::raw::c_uint = 4;
pub const SPLICE_F_MOVE: ::std::os::raw::c_uint = 1;
pub const SPLICE_F_NONBLOCK: ::std::os::raw::c_uint = 2;
pub const SPLICE_F_MORE: ::std::os::raw::c_uint = 4;
pub const SPLICE_F_GIFT: ::std::os::raw::c_uint = 8;
pub const FALLOC_FL_KEEP_SIZE: ::std::os::raw::c_uint = 1;
pub const FALLOC_FL_PUNCH_HOLE: ::std::os::raw::c_uint = 2;
pub const FALLOC_FL_NO_HIDE_STALE: ::std::os::raw::c_uint = 4;
pub const FALLOC_FL_COLLAPSE_RANGE: ::std::os::raw::c_uint = 8;
pub const FALLOC_FL_ZERO_RANGE: ::std::os::raw::c_uint = 16;
pub const FALLOC_FL_INSERT_RANGE: ::std::os::raw::c_uint = 32;
pub const FALLOC_FL_UNSHARE_RANGE: ::std::os::raw::c_uint = 64;
pub const MAX_HANDLE_SZ: ::std::os::raw::c_uint = 128;
pub const AT_FDCWD: ::std::os::raw::c_int = -100;
pub const AT_SYMLINK_NOFOLLOW: ::std::os::raw::c_uint = 256;
pub const AT_REMOVEDIR: ::std::os::raw::c_uint = 512;
pub const AT_SYMLINK_FOLLOW: ::std::os::raw::c_uint = 1024;
pub const AT_NO_AUTOMOUNT: ::std::os::raw::c_uint = 2048;
pub const AT_EMPTY_PATH: ::std::os::raw::c_uint = 4096;
pub const AT_EACCESS: ::std::os::raw::c_uint = 512;
pub const _SYS_WAIT_H: ::std::os::raw::c_uint = 1;
pub const WCOREFLAG: ::std::os::raw::c_uint = 128;
pub const WAIT_ANY: ::std::os::raw::c_int = -1;
pub const WAIT_MYPGRP: ::std::os::raw::c_uint = 0;
pub const _TERMIOS_H: ::std::os::raw::c_uint = 1;
pub const NCCS: ::std::os::raw::c_uint = 32;
pub const _HAVE_STRUCT_TERMIOS_C_ISPEED: ::std::os::raw::c_uint = 1;
pub const _HAVE_STRUCT_TERMIOS_C_OSPEED: ::std::os::raw::c_uint = 1;
pub const VINTR: ::std::os::raw::c_uint = 0;
pub const VQUIT: ::std::os::raw::c_uint = 1;
pub const VERASE: ::std::os::raw::c_uint = 2;
pub const VKILL: ::std::os::raw::c_uint = 3;
pub const VEOF: ::std::os::raw::c_uint = 4;
pub const VTIME: ::std::os::raw::c_uint = 5;
pub const VMIN: ::std::os::raw::c_uint = 6;
pub const VSWTC: ::std::os::raw::c_uint = 7;
pub const VSTART: ::std::os::raw::c_uint = 8;
pub const VSTOP: ::std::os::raw::c_uint = 9;
pub const VSUSP: ::std::os::raw::c_uint = 10;
pub const VEOL: ::std::os::raw::c_uint = 11;
pub const VREPRINT: ::std::os::raw::c_uint = 12;
pub const VDISCARD: ::std::os::raw::c_uint = 13;
pub const VWERASE: ::std::os::raw::c_uint = 14;
pub const VLNEXT: ::std::os::raw::c_uint = 15;
pub const VEOL2: ::std::os::raw::c_uint = 16;
pub const IGNBRK: ::std::os::raw::c_uint = 1;
pub const BRKINT: ::std::os::raw::c_uint = 2;
pub const IGNPAR: ::std::os::raw::c_uint = 4;
pub const PARMRK: ::std::os::raw::c_uint = 8;
pub const INPCK: ::std::os::raw::c_uint = 16;
pub const ISTRIP: ::std::os::raw::c_uint = 32;
pub const INLCR: ::std::os::raw::c_uint = 64;
pub const IGNCR: ::std::os::raw::c_uint = 128;
pub const ICRNL: ::std::os::raw::c_uint = 256;
pub const IUCLC: ::std::os::raw::c_uint = 512;
pub const IXON: ::std::os::raw::c_uint = 1024;
pub const IXANY: ::std::os::raw::c_uint = 2048;
pub const IXOFF: ::std::os::raw::c_uint = 4096;
pub const IMAXBEL: ::std::os::raw::c_uint = 8192;
pub const IUTF8: ::std::os::raw::c_uint = 16384;
pub const OPOST: ::std::os::raw::c_uint = 1;
pub const OLCUC: ::std::os::raw::c_uint = 2;
pub const ONLCR: ::std::os::raw::c_uint = 4;
pub const OCRNL: ::std::os::raw::c_uint = 8;
pub const ONOCR: ::std::os::raw::c_uint = 16;
pub const ONLRET: ::std::os::raw::c_uint = 32;
pub const OFILL: ::std::os::raw::c_uint = 64;
pub const OFDEL: ::std::os::raw::c_uint = 128;
pub const NLDLY: ::std::os::raw::c_uint = 256;
pub const NL0: ::std::os::raw::c_uint = 0;
pub const NL1: ::std::os::raw::c_uint = 256;
pub const CRDLY: ::std::os::raw::c_uint = 1536;
pub const CR0: ::std::os::raw::c_uint = 0;
pub const CR1: ::std::os::raw::c_uint = 512;
pub const CR2: ::std::os::raw::c_uint = 1024;
pub const CR3: ::std::os::raw::c_uint = 1536;
pub const TABDLY: ::std::os::raw::c_uint = 6144;
pub const TAB0: ::std::os::raw::c_uint = 0;
pub const TAB1: ::std::os::raw::c_uint = 2048;
pub const TAB2: ::std::os::raw::c_uint = 4096;
pub const TAB3: ::std::os::raw::c_uint = 6144;
pub const BSDLY: ::std::os::raw::c_uint = 8192;
pub const BS0: ::std::os::raw::c_uint = 0;
pub const BS1: ::std::os::raw::c_uint = 8192;
pub const FFDLY: ::std::os::raw::c_uint = 32768;
pub const FF0: ::std::os::raw::c_uint = 0;
pub const FF1: ::std::os::raw::c_uint = 32768;
pub const VTDLY: ::std::os::raw::c_uint = 16384;
pub const VT0: ::std::os::raw::c_uint = 0;
pub const VT1: ::std::os::raw::c_uint = 16384;
pub const XTABS: ::std::os::raw::c_uint = 6144;
pub const CBAUD: ::std::os::raw::c_uint = 4111;
pub const B0: ::std::os::raw::c_uint = 0;
pub const B50: ::std::os::raw::c_uint = 1;
pub const B75: ::std::os::raw::c_uint = 2;
pub const B110: ::std::os::raw::c_uint = 3;
pub const B134: ::std::os::raw::c_uint = 4;
pub const B150: ::std::os::raw::c_uint = 5;
pub const B200: ::std::os::raw::c_uint = 6;
pub const B300: ::std::os::raw::c_uint = 7;
pub const B600: ::std::os::raw::c_uint = 8;
pub const B1200: ::std::os::raw::c_uint = 9;
pub const B1800: ::std::os::raw::c_uint = 10;
pub const B2400: ::std::os::raw::c_uint = 11;
pub const B4800: ::std::os::raw::c_uint = 12;
pub const B9600: ::std::os::raw::c_uint = 13;
pub const B19200: ::std::os::raw::c_uint = 14;
pub const B38400: ::std::os::raw::c_uint = 15;
pub const EXTA: ::std::os::raw::c_uint = 14;
pub const EXTB: ::std::os::raw::c_uint = 15;
pub const CSIZE: ::std::os::raw::c_uint = 48;
pub const CS5: ::std::os::raw::c_uint = 0;
pub const CS6: ::std::os::raw::c_uint = 16;
pub const CS7: ::std::os::raw::c_uint = 32;
pub const CS8: ::std::os::raw::c_uint = 48;
pub const CSTOPB: ::std::os::raw::c_uint = 64;
pub const CREAD: ::std::os::raw::c_uint = 128;
pub const PARENB: ::std::os::raw::c_uint = 256;
pub const PARODD: ::std::os::raw::c_uint = 512;
pub const HUPCL: ::std::os::raw::c_uint = 1024;
pub const CLOCAL: ::std::os::raw::c_uint = 2048;
pub const CBAUDEX: ::std::os::raw::c_uint = 4096;
pub const B57600: ::std::os::raw::c_uint = 4097;
pub const B115200: ::std::os::raw::c_uint = 4098;
pub const B230400: ::std::os::raw::c_uint = 4099;
pub const B460800: ::std::os::raw::c_uint = 4100;
pub const B500000: ::std::os::raw::c_uint = 4101;
pub const B576000: ::std::os::raw::c_uint = 4102;
pub const B921600: ::std::os::raw::c_uint = 4103;
pub const B1000000: ::std::os::raw::c_uint = 4104;
pub const B1152000: ::std::os::raw::c_uint = 4105;
pub const B1500000: ::std::os::raw::c_uint = 4106;
pub const B2000000: ::std::os::raw::c_uint = 4107;
pub const B2500000: ::std::os::raw::c_uint = 4108;
pub const B3000000: ::std::os::raw::c_uint = 4109;
pub const B3500000: ::std::os::raw::c_uint = 4110;
pub const B4000000: ::std::os::raw::c_uint = 4111;
pub const __MAX_BAUD: ::std::os::raw::c_uint = 4111;
pub const CIBAUD: ::std::os::raw::c_uint = 269418496;
pub const CMSPAR: ::std::os::raw::c_uint = 1073741824;
pub const CRTSCTS: ::std::os::raw::c_uint = 2147483648;
pub const ISIG: ::std::os::raw::c_uint = 1;
pub const ICANON: ::std::os::raw::c_uint = 2;
pub const XCASE: ::std::os::raw::c_uint = 4;
pub const ECHO: ::std::os::raw::c_uint = 8;
pub const ECHOE: ::std::os::raw::c_uint = 16;
pub const ECHOK: ::std::os::raw::c_uint = 32;
pub const ECHONL: ::std::os::raw::c_uint = 64;
pub const NOFLSH: ::std::os::raw::c_uint = 128;
pub const TOSTOP: ::std::os::raw::c_uint = 256;
pub const ECHOCTL: ::std::os::raw::c_uint = 512;
pub const ECHOPRT: ::std::os::raw::c_uint = 1024;
pub const ECHOKE: ::std::os::raw::c_uint = 2048;
pub const FLUSHO: ::std::os::raw::c_uint = 4096;
pub const PENDIN: ::std::os::raw::c_uint = 16384;
pub const IEXTEN: ::std::os::raw::c_uint = 32768;
pub const EXTPROC: ::std::os::raw::c_uint = 65536;
pub const TCOOFF: ::std::os::raw::c_uint = 0;
pub const TCOON: ::std::os::raw::c_uint = 1;
pub const TCIOFF: ::std::os::raw::c_uint = 2;
pub const TCION: ::std::os::raw::c_uint = 3;
pub const TCIFLUSH: ::std::os::raw::c_uint = 0;
pub const TCOFLUSH: ::std::os::raw::c_uint = 1;
pub const TCIOFLUSH: ::std::os::raw::c_uint = 2;
pub const TCSANOW: ::std::os::raw::c_uint = 0;
pub const TCSADRAIN: ::std::os::raw::c_uint = 1;
pub const TCSAFLUSH: ::std::os::raw::c_uint = 2;
pub const TTYDEF_IFLAG: ::std::os::raw::c_uint = 11554;
pub const TTYDEF_OFLAG: ::std::os::raw::c_uint = 6149;
pub const TTYDEF_LFLAG: ::std::os::raw::c_uint = 35355;
pub const TTYDEF_CFLAG: ::std::os::raw::c_uint = 1440;
pub const TTYDEF_SPEED: ::std::os::raw::c_uint = 13;
pub const CEOL: u8 = b'\x00';
pub const CERASE: ::std::os::raw::c_uint = 127;
pub const CSTATUS: u8 = b'\x00';
pub const CMIN: ::std::os::raw::c_uint = 1;
pub const CQUIT: ::std::os::raw::c_uint = 28;
pub const CTIME: ::std::os::raw::c_uint = 0;
pub const CBRK: u8 = b'\x00';
pub const VDISABLEVAL: u8 = b'\x00';
pub const HAS_TIO: ::std::os::raw::c_uint = 1;
pub const _SYS_IOCTL_H: ::std::os::raw::c_uint = 1;
pub const _IOC_NRBITS: ::std::os::raw::c_uint = 8;
pub const _IOC_TYPEBITS: ::std::os::raw::c_uint = 8;
pub const _IOC_SIZEBITS: ::std::os::raw::c_uint = 14;
pub const _IOC_DIRBITS: ::std::os::raw::c_uint = 2;
pub const _IOC_NRMASK: ::std::os::raw::c_uint = 255;
pub const _IOC_TYPEMASK: ::std::os::raw::c_uint = 255;
pub const _IOC_SIZEMASK: ::std::os::raw::c_uint = 16383;
pub const _IOC_DIRMASK: ::std::os::raw::c_uint = 3;
pub const _IOC_NRSHIFT: ::std::os::raw::c_uint = 0;
pub const _IOC_TYPESHIFT: ::std::os::raw::c_uint = 8;
pub const _IOC_SIZESHIFT: ::std::os::raw::c_uint = 16;
pub const _IOC_DIRSHIFT: ::std::os::raw::c_uint = 30;
pub const _IOC_NONE: ::std::os::raw::c_uint = 0;
pub const _IOC_WRITE: ::std::os::raw::c_uint = 1;
pub const _IOC_READ: ::std::os::raw::c_uint = 2;
pub const IOC_IN: ::std::os::raw::c_uint = 1073741824;
pub const IOC_OUT: ::std::os::raw::c_uint = 2147483648;
pub const IOC_INOUT: ::std::os::raw::c_uint = 3221225472;
pub const IOCSIZE_MASK: ::std::os::raw::c_uint = 1073676288;
pub const IOCSIZE_SHIFT: ::std::os::raw::c_uint = 16;
pub const TCGETS: ::std::os::raw::c_uint = 21505;
pub const TCSETS: ::std::os::raw::c_uint = 21506;
pub const TCSETSW: ::std::os::raw::c_uint = 21507;
pub const TCSETSF: ::std::os::raw::c_uint = 21508;
pub const TCGETA: ::std::os::raw::c_uint = 21509;
pub const TCSETA: ::std::os::raw::c_uint = 21510;
pub const TCSETAW: ::std::os::raw::c_uint = 21511;
pub const TCSETAF: ::std::os::raw::c_uint = 21512;
pub const TCSBRK: ::std::os::raw::c_uint = 21513;
pub const TCXONC: ::std::os::raw::c_uint = 21514;
pub const TCFLSH: ::std::os::raw::c_uint = 21515;
pub const TIOCEXCL: ::std::os::raw::c_uint = 21516;
pub const TIOCNXCL: ::std::os::raw::c_uint = 21517;
pub const TIOCSCTTY: ::std::os::raw::c_uint = 21518;
pub const TIOCGPGRP: ::std::os::raw::c_uint = 21519;
pub const TIOCSPGRP: ::std::os::raw::c_uint = 21520;
pub const TIOCOUTQ: ::std::os::raw::c_uint = 21521;
pub const TIOCSTI: ::std::os::raw::c_uint = 21522;
pub const TIOCGWINSZ: ::std::os::raw::c_uint = 21523;
pub const TIOCSWINSZ: ::std::os::raw::c_uint = 21524;
pub const TIOCMGET: ::std::os::raw::c_uint = 21525;
pub const TIOCMBIS: ::std::os::raw::c_uint = 21526;
pub const TIOCMBIC: ::std::os::raw::c_uint = 21527;
pub const TIOCMSET: ::std::os::raw::c_uint = 21528;
pub const TIOCGSOFTCAR: ::std::os::raw::c_uint = 21529;
pub const TIOCSSOFTCAR: ::std::os::raw::c_uint = 21530;
pub const FIONREAD: ::std::os::raw::c_uint = 21531;
pub const TIOCINQ: ::std::os::raw::c_uint = 21531;
pub const TIOCLINUX: ::std::os::raw::c_uint = 21532;
pub const TIOCCONS: ::std::os::raw::c_uint = 21533;
pub const TIOCGSERIAL: ::std::os::raw::c_uint = 21534;
pub const TIOCSSERIAL: ::std::os::raw::c_uint = 21535;
pub const TIOCPKT: ::std::os::raw::c_uint = 21536;
pub const FIONBIO: ::std::os::raw::c_uint = 21537;
pub const TIOCNOTTY: ::std::os::raw::c_uint = 21538;
pub const TIOCSETD: ::std::os::raw::c_uint = 21539;
pub const TIOCGETD: ::std::os::raw::c_uint = 21540;
pub const TCSBRKP: ::std::os::raw::c_uint = 21541;
pub const TIOCSBRK: ::std::os::raw::c_uint = 21543;
pub const TIOCCBRK: ::std::os::raw::c_uint = 21544;
pub const TIOCGSID: ::std::os::raw::c_uint = 21545;
pub const TIOCGRS485: ::std::os::raw::c_uint = 21550;
pub const TIOCSRS485: ::std::os::raw::c_uint = 21551;
pub const TCGETX: ::std::os::raw::c_uint = 21554;
pub const TCSETX: ::std::os::raw::c_uint = 21555;
pub const TCSETXF: ::std::os::raw::c_uint = 21556;
pub const TCSETXW: ::std::os::raw::c_uint = 21557;
pub const TIOCVHANGUP: ::std::os::raw::c_uint = 21559;
pub const FIONCLEX: ::std::os::raw::c_uint = 21584;
pub const FIOCLEX: ::std::os::raw::c_uint = 21585;
pub const FIOASYNC: ::std::os::raw::c_uint = 21586;
pub const TIOCSERCONFIG: ::std::os::raw::c_uint = 21587;
pub const TIOCSERGWILD: ::std::os::raw::c_uint = 21588;
pub const TIOCSERSWILD: ::std::os::raw::c_uint = 21589;
pub const TIOCGLCKTRMIOS: ::std::os::raw::c_uint = 21590;
pub const TIOCSLCKTRMIOS: ::std::os::raw::c_uint = 21591;
pub const TIOCSERGSTRUCT: ::std::os::raw::c_uint = 21592;
pub const TIOCSERGETLSR: ::std::os::raw::c_uint = 21593;
pub const TIOCSERGETMULTI: ::std::os::raw::c_uint = 21594;
pub const TIOCSERSETMULTI: ::std::os::raw::c_uint = 21595;
pub const TIOCMIWAIT: ::std::os::raw::c_uint = 21596;
pub const TIOCGICOUNT: ::std::os::raw::c_uint = 21597;
pub const FIOQSIZE: ::std::os::raw::c_uint = 21600;
pub const TIOCPKT_DATA: ::std::os::raw::c_uint = 0;
pub const TIOCPKT_FLUSHREAD: ::std::os::raw::c_uint = 1;
pub const TIOCPKT_FLUSHWRITE: ::std::os::raw::c_uint = 2;
pub const TIOCPKT_STOP: ::std::os::raw::c_uint = 4;
pub const TIOCPKT_START: ::std::os::raw::c_uint = 8;
pub const TIOCPKT_NOSTOP: ::std::os::raw::c_uint = 16;
pub const TIOCPKT_DOSTOP: ::std::os::raw::c_uint = 32;
pub const TIOCPKT_IOCTL: ::std::os::raw::c_uint = 64;
pub const TIOCSER_TEMT: ::std::os::raw::c_uint = 1;
pub const SIOCADDRT: ::std::os::raw::c_uint = 35083;
pub const SIOCDELRT: ::std::os::raw::c_uint = 35084;
pub const SIOCRTMSG: ::std::os::raw::c_uint = 35085;
pub const SIOCGIFNAME: ::std::os::raw::c_uint = 35088;
pub const SIOCSIFLINK: ::std::os::raw::c_uint = 35089;
pub const SIOCGIFCONF: ::std::os::raw::c_uint = 35090;
pub const SIOCGIFFLAGS: ::std::os::raw::c_uint = 35091;
pub const SIOCSIFFLAGS: ::std::os::raw::c_uint = 35092;
pub const SIOCGIFADDR: ::std::os::raw::c_uint = 35093;
pub const SIOCSIFADDR: ::std::os::raw::c_uint = 35094;
pub const SIOCGIFDSTADDR: ::std::os::raw::c_uint = 35095;
pub const SIOCSIFDSTADDR: ::std::os::raw::c_uint = 35096;
pub const SIOCGIFBRDADDR: ::std::os::raw::c_uint = 35097;
pub const SIOCSIFBRDADDR: ::std::os::raw::c_uint = 35098;
pub const SIOCGIFNETMASK: ::std::os::raw::c_uint = 35099;
pub const SIOCSIFNETMASK: ::std::os::raw::c_uint = 35100;
pub const SIOCGIFMETRIC: ::std::os::raw::c_uint = 35101;
pub const SIOCSIFMETRIC: ::std::os::raw::c_uint = 35102;
pub const SIOCGIFMEM: ::std::os::raw::c_uint = 35103;
pub const SIOCSIFMEM: ::std::os::raw::c_uint = 35104;
pub const SIOCGIFMTU: ::std::os::raw::c_uint = 35105;
pub const SIOCSIFMTU: ::std::os::raw::c_uint = 35106;
pub const SIOCSIFNAME: ::std::os::raw::c_uint = 35107;
pub const SIOCSIFHWADDR: ::std::os::raw::c_uint = 35108;
pub const SIOCGIFENCAP: ::std::os::raw::c_uint = 35109;
pub const SIOCSIFENCAP: ::std::os::raw::c_uint = 35110;
pub const SIOCGIFHWADDR: ::std::os::raw::c_uint = 35111;
pub const SIOCGIFSLAVE: ::std::os::raw::c_uint = 35113;
pub const SIOCSIFSLAVE: ::std::os::raw::c_uint = 35120;
pub const SIOCADDMULTI: ::std::os::raw::c_uint = 35121;
pub const SIOCDELMULTI: ::std::os::raw::c_uint = 35122;
pub const SIOCGIFINDEX: ::std::os::raw::c_uint = 35123;
pub const SIOGIFINDEX: ::std::os::raw::c_uint = 35123;
pub const SIOCSIFPFLAGS: ::std::os::raw::c_uint = 35124;
pub const SIOCGIFPFLAGS: ::std::os::raw::c_uint = 35125;
pub const SIOCDIFADDR: ::std::os::raw::c_uint = 35126;
pub const SIOCSIFHWBROADCAST: ::std::os::raw::c_uint = 35127;
pub const SIOCGIFCOUNT: ::std::os::raw::c_uint = 35128;
pub const SIOCGIFBR: ::std::os::raw::c_uint = 35136;
pub const SIOCSIFBR: ::std::os::raw::c_uint = 35137;
pub const SIOCGIFTXQLEN: ::std::os::raw::c_uint = 35138;
pub const SIOCSIFTXQLEN: ::std::os::raw::c_uint = 35139;
pub const SIOCDARP: ::std::os::raw::c_uint = 35155;
pub const SIOCGARP: ::std::os::raw::c_uint = 35156;
pub const SIOCSARP: ::std::os::raw::c_uint = 35157;
pub const SIOCDRARP: ::std::os::raw::c_uint = 35168;
pub const SIOCGRARP: ::std::os::raw::c_uint = 35169;
pub const SIOCSRARP: ::std::os::raw::c_uint = 35170;
pub const SIOCGIFMAP: ::std::os::raw::c_uint = 35184;
pub const SIOCSIFMAP: ::std::os::raw::c_uint = 35185;
pub const SIOCADDDLCI: ::std::os::raw::c_uint = 35200;
pub const SIOCDELDLCI: ::std::os::raw::c_uint = 35201;
pub const SIOCDEVPRIVATE: ::std::os::raw::c_uint = 35312;
pub const SIOCPROTOPRIVATE: ::std::os::raw::c_uint = 35296;
pub const NCC: ::std::os::raw::c_uint = 8;
pub const TIOCM_LE: ::std::os::raw::c_uint = 1;
pub const TIOCM_DTR: ::std::os::raw::c_uint = 2;
pub const TIOCM_RTS: ::std::os::raw::c_uint = 4;
pub const TIOCM_ST: ::std::os::raw::c_uint = 8;
pub const TIOCM_SR: ::std::os::raw::c_uint = 16;
pub const TIOCM_CTS: ::std::os::raw::c_uint = 32;
pub const TIOCM_CAR: ::std::os::raw::c_uint = 64;
pub const TIOCM_RNG: ::std::os::raw::c_uint = 128;
pub const TIOCM_DSR: ::std::os::raw::c_uint = 256;
pub const TIOCM_CD: ::std::os::raw::c_uint = 64;
pub const TIOCM_RI: ::std::os::raw::c_uint = 128;
pub const N_TTY: ::std::os::raw::c_uint = 0;
pub const N_SLIP: ::std::os::raw::c_uint = 1;
pub const N_MOUSE: ::std::os::raw::c_uint = 2;
pub const N_PPP: ::std::os::raw::c_uint = 3;
pub const N_STRIP: ::std::os::raw::c_uint = 4;
pub const N_AX25: ::std::os::raw::c_uint = 5;
pub const N_X25: ::std::os::raw::c_uint = 6;
pub const N_6PACK: ::std::os::raw::c_uint = 7;
pub const N_MASC: ::std::os::raw::c_uint = 8;
pub const N_R3964: ::std::os::raw::c_uint = 9;
pub const N_PROFIBUS_FDL: ::std::os::raw::c_uint = 10;
pub const N_IRDA: ::std::os::raw::c_uint = 11;
pub const N_SMSBLOCK: ::std::os::raw::c_uint = 12;
pub const N_HDLC: ::std::os::raw::c_uint = 13;
pub const N_SYNC_PPP: ::std::os::raw::c_uint = 14;
pub const N_HCI: ::std::os::raw::c_uint = 15;
pub const _SYS_PARAM_H: ::std::os::raw::c_uint = 1;
pub const HZ: ::std::os::raw::c_uint = 100;
pub const EXEC_PAGESIZE: ::std::os::raw::c_uint = 4096;
pub const NOGROUP: ::std::os::raw::c_int = -1;
pub const MAXHOSTNAMELEN: ::std::os::raw::c_uint = 64;
pub const MAXSYMLINKS: ::std::os::raw::c_uint = 20;
pub const NOFILE: ::std::os::raw::c_uint = 256;
pub const NCARGS: ::std::os::raw::c_uint = 131072;
pub const NGROUPS: ::std::os::raw::c_uint = 65536;
pub const CANBSIZ: ::std::os::raw::c_uint = 255;
pub const MAXPATHLEN: ::std::os::raw::c_uint = 4096;
pub const DEV_BSIZE: ::std::os::raw::c_uint = 512;
pub const _SYS_UTSNAME_H: ::std::os::raw::c_uint = 1;
pub const _UTSNAME_LENGTH: ::std::os::raw::c_uint = 65;
pub const _UTSNAME_DOMAIN_LENGTH: ::std::os::raw::c_uint = 65;
pub const _UTSNAME_SYSNAME_LENGTH: ::std::os::raw::c_uint = 65;
pub const _UTSNAME_NODENAME_LENGTH: ::std::os::raw::c_uint = 65;
pub const _UTSNAME_RELEASE_LENGTH: ::std::os::raw::c_uint = 65;
pub const _UTSNAME_VERSION_LENGTH: ::std::os::raw::c_uint = 65;
pub const _UTSNAME_MACHINE_LENGTH: ::std::os::raw::c_uint = 65;
pub const SYS_NMLN: ::std::os::raw::c_uint = 65;
pub const DEFAULT_WORDCHARS: &'static [u8; 24usize] =
    b"*?_-.[]~=/&;!#$%^(){}<>\x00";
pub const DEFAULT_TIMEFMT: &'static [u8; 39usize] =
    b"%J  %U user %S system %P cpu %*E total\x00";
pub const _SYS_RESOURCE_H: ::std::os::raw::c_uint = 1;
pub const RLIM64_INFINITY: ::std::os::raw::c_int = -1;
pub const PRIO_MIN: ::std::os::raw::c_int = -20;
pub const PRIO_MAX: ::std::os::raw::c_uint = 20;
pub const _STDINT_H: ::std::os::raw::c_uint = 1;
pub const _BITS_WCHAR_H: ::std::os::raw::c_uint = 1;
pub const INT8_MIN: ::std::os::raw::c_int = -128;
pub const INT16_MIN: ::std::os::raw::c_int = -32768;
pub const INT32_MIN: ::std::os::raw::c_int = -2147483648;
pub const INT8_MAX: ::std::os::raw::c_uint = 127;
pub const INT16_MAX: ::std::os::raw::c_uint = 32767;
pub const INT32_MAX: ::std::os::raw::c_uint = 2147483647;
pub const UINT8_MAX: ::std::os::raw::c_uint = 255;
pub const UINT16_MAX: ::std::os::raw::c_uint = 65535;
pub const UINT32_MAX: ::std::os::raw::c_uint = 4294967295;
pub const INT_LEAST8_MIN: ::std::os::raw::c_int = -128;
pub const INT_LEAST16_MIN: ::std::os::raw::c_int = -32768;
pub const INT_LEAST32_MIN: ::std::os::raw::c_int = -2147483648;
pub const INT_LEAST8_MAX: ::std::os::raw::c_uint = 127;
pub const INT_LEAST16_MAX: ::std::os::raw::c_uint = 32767;
pub const INT_LEAST32_MAX: ::std::os::raw::c_uint = 2147483647;
pub const UINT_LEAST8_MAX: ::std::os::raw::c_uint = 255;
pub const UINT_LEAST16_MAX: ::std::os::raw::c_uint = 65535;
pub const UINT_LEAST32_MAX: ::std::os::raw::c_uint = 4294967295;
pub const INT_FAST8_MIN: ::std::os::raw::c_int = -128;
pub const INT_FAST16_MIN: ::std::os::raw::c_longlong = -9223372036854775808;
pub const INT_FAST32_MIN: ::std::os::raw::c_longlong = -9223372036854775808;
pub const INT_FAST8_MAX: ::std::os::raw::c_uint = 127;
pub const INT_FAST16_MAX: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const INT_FAST32_MAX: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const UINT_FAST8_MAX: ::std::os::raw::c_uint = 255;
pub const UINT_FAST16_MAX: ::std::os::raw::c_int = -1;
pub const UINT_FAST32_MAX: ::std::os::raw::c_int = -1;
pub const INTPTR_MIN: ::std::os::raw::c_longlong = -9223372036854775808;
pub const INTPTR_MAX: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const UINTPTR_MAX: ::std::os::raw::c_int = -1;
pub const PTRDIFF_MIN: ::std::os::raw::c_longlong = -9223372036854775808;
pub const PTRDIFF_MAX: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const SIG_ATOMIC_MIN: ::std::os::raw::c_int = -2147483648;
pub const SIG_ATOMIC_MAX: ::std::os::raw::c_uint = 2147483647;
pub const SIZE_MAX: ::std::os::raw::c_int = -1;
pub const WINT_MIN: ::std::os::raw::c_uint = 0;
pub const WINT_MAX: ::std::os::raw::c_uint = 4294967295;
pub const INT8_WIDTH: ::std::os::raw::c_uint = 8;
pub const UINT8_WIDTH: ::std::os::raw::c_uint = 8;
pub const INT16_WIDTH: ::std::os::raw::c_uint = 16;
pub const UINT16_WIDTH: ::std::os::raw::c_uint = 16;
pub const INT32_WIDTH: ::std::os::raw::c_uint = 32;
pub const UINT32_WIDTH: ::std::os::raw::c_uint = 32;
pub const INT64_WIDTH: ::std::os::raw::c_uint = 64;
pub const UINT64_WIDTH: ::std::os::raw::c_uint = 64;
pub const INT_LEAST8_WIDTH: ::std::os::raw::c_uint = 8;
pub const UINT_LEAST8_WIDTH: ::std::os::raw::c_uint = 8;
pub const INT_LEAST16_WIDTH: ::std::os::raw::c_uint = 16;
pub const UINT_LEAST16_WIDTH: ::std::os::raw::c_uint = 16;
pub const INT_LEAST32_WIDTH: ::std::os::raw::c_uint = 32;
pub const UINT_LEAST32_WIDTH: ::std::os::raw::c_uint = 32;
pub const INT_LEAST64_WIDTH: ::std::os::raw::c_uint = 64;
pub const UINT_LEAST64_WIDTH: ::std::os::raw::c_uint = 64;
pub const INT_FAST8_WIDTH: ::std::os::raw::c_uint = 8;
pub const UINT_FAST8_WIDTH: ::std::os::raw::c_uint = 8;
pub const INT_FAST16_WIDTH: ::std::os::raw::c_uint = 64;
pub const UINT_FAST16_WIDTH: ::std::os::raw::c_uint = 64;
pub const INT_FAST32_WIDTH: ::std::os::raw::c_uint = 64;
pub const UINT_FAST32_WIDTH: ::std::os::raw::c_uint = 64;
pub const INT_FAST64_WIDTH: ::std::os::raw::c_uint = 64;
pub const UINT_FAST64_WIDTH: ::std::os::raw::c_uint = 64;
pub const INTPTR_WIDTH: ::std::os::raw::c_uint = 64;
pub const UINTPTR_WIDTH: ::std::os::raw::c_uint = 64;
pub const INTMAX_WIDTH: ::std::os::raw::c_uint = 64;
pub const UINTMAX_WIDTH: ::std::os::raw::c_uint = 64;
pub const PTRDIFF_WIDTH: ::std::os::raw::c_uint = 64;
pub const SIG_ATOMIC_WIDTH: ::std::os::raw::c_uint = 32;
pub const SIZE_WIDTH: ::std::os::raw::c_uint = 64;
pub const WCHAR_WIDTH: ::std::os::raw::c_uint = 32;
pub const WINT_WIDTH: ::std::os::raw::c_uint = 32;
pub const __BITS_PER_LONG: ::std::os::raw::c_uint = 64;
pub const _LINUX_CAPABILITY_VERSION_1: ::std::os::raw::c_uint = 429392688;
pub const _LINUX_CAPABILITY_U32S_1: ::std::os::raw::c_uint = 1;
pub const _LINUX_CAPABILITY_VERSION_2: ::std::os::raw::c_uint = 537333798;
pub const _LINUX_CAPABILITY_U32S_2: ::std::os::raw::c_uint = 2;
pub const _LINUX_CAPABILITY_VERSION_3: ::std::os::raw::c_uint = 537396514;
pub const _LINUX_CAPABILITY_U32S_3: ::std::os::raw::c_uint = 2;
pub const VFS_CAP_REVISION_MASK: ::std::os::raw::c_uint = 4278190080;
pub const VFS_CAP_REVISION_SHIFT: ::std::os::raw::c_uint = 24;
pub const VFS_CAP_FLAGS_MASK: ::std::os::raw::c_longlong = -4278190081;
pub const VFS_CAP_FLAGS_EFFECTIVE: ::std::os::raw::c_uint = 1;
pub const VFS_CAP_REVISION_1: ::std::os::raw::c_uint = 16777216;
pub const VFS_CAP_U32_1: ::std::os::raw::c_uint = 1;
pub const VFS_CAP_REVISION_2: ::std::os::raw::c_uint = 33554432;
pub const VFS_CAP_U32_2: ::std::os::raw::c_uint = 2;
pub const VFS_CAP_U32: ::std::os::raw::c_uint = 2;
pub const VFS_CAP_REVISION: ::std::os::raw::c_uint = 33554432;
pub const _LINUX_CAPABILITY_VERSION: ::std::os::raw::c_uint = 429392688;
pub const _LINUX_CAPABILITY_U32S: ::std::os::raw::c_uint = 1;
pub const CAP_CHOWN: ::std::os::raw::c_uint = 0;
pub const CAP_DAC_OVERRIDE: ::std::os::raw::c_uint = 1;
pub const CAP_DAC_READ_SEARCH: ::std::os::raw::c_uint = 2;
pub const CAP_FOWNER: ::std::os::raw::c_uint = 3;
pub const CAP_FSETID: ::std::os::raw::c_uint = 4;
pub const CAP_KILL: ::std::os::raw::c_uint = 5;
pub const CAP_SETGID: ::std::os::raw::c_uint = 6;
pub const CAP_SETUID: ::std::os::raw::c_uint = 7;
pub const CAP_SETPCAP: ::std::os::raw::c_uint = 8;
pub const CAP_LINUX_IMMUTABLE: ::std::os::raw::c_uint = 9;
pub const CAP_NET_BIND_SERVICE: ::std::os::raw::c_uint = 10;
pub const CAP_NET_BROADCAST: ::std::os::raw::c_uint = 11;
pub const CAP_NET_ADMIN: ::std::os::raw::c_uint = 12;
pub const CAP_NET_RAW: ::std::os::raw::c_uint = 13;
pub const CAP_IPC_LOCK: ::std::os::raw::c_uint = 14;
pub const CAP_IPC_OWNER: ::std::os::raw::c_uint = 15;
pub const CAP_SYS_MODULE: ::std::os::raw::c_uint = 16;
pub const CAP_SYS_RAWIO: ::std::os::raw::c_uint = 17;
pub const CAP_SYS_CHROOT: ::std::os::raw::c_uint = 18;
pub const CAP_SYS_PTRACE: ::std::os::raw::c_uint = 19;
pub const CAP_SYS_PACCT: ::std::os::raw::c_uint = 20;
pub const CAP_SYS_ADMIN: ::std::os::raw::c_uint = 21;
pub const CAP_SYS_BOOT: ::std::os::raw::c_uint = 22;
pub const CAP_SYS_NICE: ::std::os::raw::c_uint = 23;
pub const CAP_SYS_RESOURCE: ::std::os::raw::c_uint = 24;
pub const CAP_SYS_TIME: ::std::os::raw::c_uint = 25;
pub const CAP_SYS_TTY_CONFIG: ::std::os::raw::c_uint = 26;
pub const CAP_MKNOD: ::std::os::raw::c_uint = 27;
pub const CAP_LEASE: ::std::os::raw::c_uint = 28;
pub const CAP_AUDIT_WRITE: ::std::os::raw::c_uint = 29;
pub const CAP_AUDIT_CONTROL: ::std::os::raw::c_uint = 30;
pub const CAP_SETFCAP: ::std::os::raw::c_uint = 31;
pub const CAP_MAC_OVERRIDE: ::std::os::raw::c_uint = 32;
pub const CAP_MAC_ADMIN: ::std::os::raw::c_uint = 33;
pub const CAP_SYSLOG: ::std::os::raw::c_uint = 34;
pub const CAP_WAKE_ALARM: ::std::os::raw::c_uint = 35;
pub const CAP_BLOCK_SUSPEND: ::std::os::raw::c_uint = 36;
pub const CAP_AUDIT_READ: ::std::os::raw::c_uint = 37;
pub const CAP_LAST_CAP: ::std::os::raw::c_uint = 37;
pub const S_IRUGO: ::std::os::raw::c_uint = 292;
pub const S_IWUGO: ::std::os::raw::c_uint = 146;
pub const S_IXUGO: ::std::os::raw::c_uint = 73;
pub const USE_LOCALE: ::std::os::raw::c_uint = 1;
pub const _WCHAR_H: ::std::os::raw::c_uint = 1;
pub const __mbstate_t_defined: ::std::os::raw::c_uint = 1;
pub const WEOF: ::std::os::raw::c_uint = 4294967295;
pub const _WCTYPE_H: ::std::os::raw::c_uint = 1;
pub const __iswxxx_defined: ::std::os::raw::c_uint = 1;
pub const _LANGINFO_H: ::std::os::raw::c_uint = 1;
pub const _NL_TYPES_H: ::std::os::raw::c_uint = 1;
pub const NL_SETD: ::std::os::raw::c_uint = 1;
pub const NL_CAT_LOCALE: ::std::os::raw::c_uint = 1;
pub const _ICONV_H: ::std::os::raw::c_uint = 1;
pub const USES_TERM_H: ::std::os::raw::c_uint = 1;
pub const CURSES: ::std::os::raw::c_uint = 1;
pub const CURSES_H: ::std::os::raw::c_uint = 1;
pub const NCURSES_VERSION_MAJOR: ::std::os::raw::c_uint = 6;
pub const NCURSES_VERSION_MINOR: ::std::os::raw::c_uint = 0;
pub const NCURSES_VERSION_PATCH: ::std::os::raw::c_uint = 20170527;
pub const NCURSES_VERSION: &'static [u8; 4usize] = b"6.0\x00";
pub const NCURSES_MOUSE_VERSION: ::std::os::raw::c_uint = 2;
pub const NCURSES_DLL_H_incl: ::std::os::raw::c_uint = 1;
pub const NCURSES_ENABLE_STDBOOL_H: ::std::os::raw::c_uint = 1;
pub const NCURSES_OPAQUE: ::std::os::raw::c_uint = 0;
pub const NCURSES_OPAQUE_FORM: ::std::os::raw::c_uint = 0;
pub const NCURSES_OPAQUE_MENU: ::std::os::raw::c_uint = 0;
pub const NCURSES_OPAQUE_PANEL: ::std::os::raw::c_uint = 0;
pub const NCURSES_WATTR_MACROS: ::std::os::raw::c_uint = 1;
pub const NCURSES_REENTRANT: ::std::os::raw::c_uint = 0;
pub const NCURSES_INTEROP_FUNCS: ::std::os::raw::c_uint = 1;
pub const NCURSES_TPARM_VARARGS: ::std::os::raw::c_uint = 1;
pub const NCURSES_WCWIDTH_GRAPHICS: ::std::os::raw::c_uint = 1;
pub const NCURSES_WIDECHAR: ::std::os::raw::c_uint = 1;
pub const TRUE: ::std::os::raw::c_uint = 1;
pub const FALSE: ::std::os::raw::c_uint = 0;
pub const true_: ::std::os::raw::c_uint = 1;
pub const false_: ::std::os::raw::c_uint = 0;
pub const __bool_true_false_are_defined: ::std::os::raw::c_uint = 1;
pub const COLOR_BLACK: ::std::os::raw::c_uint = 0;
pub const COLOR_RED: ::std::os::raw::c_uint = 1;
pub const COLOR_GREEN: ::std::os::raw::c_uint = 2;
pub const COLOR_YELLOW: ::std::os::raw::c_uint = 3;
pub const COLOR_BLUE: ::std::os::raw::c_uint = 4;
pub const COLOR_MAGENTA: ::std::os::raw::c_uint = 5;
pub const COLOR_CYAN: ::std::os::raw::c_uint = 6;
pub const COLOR_WHITE: ::std::os::raw::c_uint = 7;
pub const ERR: ::std::os::raw::c_int = -1;
pub const OK: ::std::os::raw::c_uint = 0;
pub const _SUBWIN: ::std::os::raw::c_uint = 1;
pub const _ENDLINE: ::std::os::raw::c_uint = 2;
pub const _FULLWIN: ::std::os::raw::c_uint = 4;
pub const _SCROLLWIN: ::std::os::raw::c_uint = 8;
pub const _ISPAD: ::std::os::raw::c_uint = 16;
pub const _HASMOVED: ::std::os::raw::c_uint = 32;
pub const _WRAPPED: ::std::os::raw::c_uint = 64;
pub const _NOCHANGE: ::std::os::raw::c_int = -1;
pub const _NEWINDEX: ::std::os::raw::c_int = -1;
pub const CCHARW_MAX: ::std::os::raw::c_uint = 5;
pub const NCURSES_EXT_COLORS: ::std::os::raw::c_uint = 20170527;
pub const NCURSES_EXT_FUNCS: ::std::os::raw::c_uint = 20170527;
pub const NCURSES_SP_FUNCS: ::std::os::raw::c_uint = 20170527;
pub const NCURSES_ATTR_SHIFT: ::std::os::raw::c_uint = 8;
pub const A_NORMAL: ::std::os::raw::c_uint = 0;
pub const KEY_CODE_YES: ::std::os::raw::c_uint = 256;
pub const KEY_MIN: ::std::os::raw::c_uint = 257;
pub const KEY_BREAK: ::std::os::raw::c_uint = 257;
pub const KEY_SRESET: ::std::os::raw::c_uint = 344;
pub const KEY_RESET: ::std::os::raw::c_uint = 345;
pub const KEY_DOWN: ::std::os::raw::c_uint = 258;
pub const KEY_UP: ::std::os::raw::c_uint = 259;
pub const KEY_LEFT: ::std::os::raw::c_uint = 260;
pub const KEY_RIGHT: ::std::os::raw::c_uint = 261;
pub const KEY_HOME: ::std::os::raw::c_uint = 262;
pub const KEY_BACKSPACE: ::std::os::raw::c_uint = 263;
pub const KEY_F0: ::std::os::raw::c_uint = 264;
pub const KEY_DL: ::std::os::raw::c_uint = 328;
pub const KEY_IL: ::std::os::raw::c_uint = 329;
pub const KEY_DC: ::std::os::raw::c_uint = 330;
pub const KEY_IC: ::std::os::raw::c_uint = 331;
pub const KEY_EIC: ::std::os::raw::c_uint = 332;
pub const KEY_CLEAR: ::std::os::raw::c_uint = 333;
pub const KEY_EOS: ::std::os::raw::c_uint = 334;
pub const KEY_EOL: ::std::os::raw::c_uint = 335;
pub const KEY_SF: ::std::os::raw::c_uint = 336;
pub const KEY_SR: ::std::os::raw::c_uint = 337;
pub const KEY_NPAGE: ::std::os::raw::c_uint = 338;
pub const KEY_PPAGE: ::std::os::raw::c_uint = 339;
pub const KEY_STAB: ::std::os::raw::c_uint = 340;
pub const KEY_CTAB: ::std::os::raw::c_uint = 341;
pub const KEY_CATAB: ::std::os::raw::c_uint = 342;
pub const KEY_ENTER: ::std::os::raw::c_uint = 343;
pub const KEY_PRINT: ::std::os::raw::c_uint = 346;
pub const KEY_LL: ::std::os::raw::c_uint = 347;
pub const KEY_A1: ::std::os::raw::c_uint = 348;
pub const KEY_A3: ::std::os::raw::c_uint = 349;
pub const KEY_B2: ::std::os::raw::c_uint = 350;
pub const KEY_C1: ::std::os::raw::c_uint = 351;
pub const KEY_C3: ::std::os::raw::c_uint = 352;
pub const KEY_BTAB: ::std::os::raw::c_uint = 353;
pub const KEY_BEG: ::std::os::raw::c_uint = 354;
pub const KEY_CANCEL: ::std::os::raw::c_uint = 355;
pub const KEY_CLOSE: ::std::os::raw::c_uint = 356;
pub const KEY_COMMAND: ::std::os::raw::c_uint = 357;
pub const KEY_COPY: ::std::os::raw::c_uint = 358;
pub const KEY_CREATE: ::std::os::raw::c_uint = 359;
pub const KEY_END: ::std::os::raw::c_uint = 360;
pub const KEY_EXIT: ::std::os::raw::c_uint = 361;
pub const KEY_FIND: ::std::os::raw::c_uint = 362;
pub const KEY_HELP: ::std::os::raw::c_uint = 363;
pub const KEY_MARK: ::std::os::raw::c_uint = 364;
pub const KEY_MESSAGE: ::std::os::raw::c_uint = 365;
pub const KEY_MOVE: ::std::os::raw::c_uint = 366;
pub const KEY_NEXT: ::std::os::raw::c_uint = 367;
pub const KEY_OPEN: ::std::os::raw::c_uint = 368;
pub const KEY_OPTIONS: ::std::os::raw::c_uint = 369;
pub const KEY_PREVIOUS: ::std::os::raw::c_uint = 370;
pub const KEY_REDO: ::std::os::raw::c_uint = 371;
pub const KEY_REFERENCE: ::std::os::raw::c_uint = 372;
pub const KEY_REFRESH: ::std::os::raw::c_uint = 373;
pub const KEY_REPLACE: ::std::os::raw::c_uint = 374;
pub const KEY_RESTART: ::std::os::raw::c_uint = 375;
pub const KEY_RESUME: ::std::os::raw::c_uint = 376;
pub const KEY_SAVE: ::std::os::raw::c_uint = 377;
pub const KEY_SBEG: ::std::os::raw::c_uint = 378;
pub const KEY_SCANCEL: ::std::os::raw::c_uint = 379;
pub const KEY_SCOMMAND: ::std::os::raw::c_uint = 380;
pub const KEY_SCOPY: ::std::os::raw::c_uint = 381;
pub const KEY_SCREATE: ::std::os::raw::c_uint = 382;
pub const KEY_SDC: ::std::os::raw::c_uint = 383;
pub const KEY_SDL: ::std::os::raw::c_uint = 384;
pub const KEY_SELECT: ::std::os::raw::c_uint = 385;
pub const KEY_SEND: ::std::os::raw::c_uint = 386;
pub const KEY_SEOL: ::std::os::raw::c_uint = 387;
pub const KEY_SEXIT: ::std::os::raw::c_uint = 388;
pub const KEY_SFIND: ::std::os::raw::c_uint = 389;
pub const KEY_SHELP: ::std::os::raw::c_uint = 390;
pub const KEY_SHOME: ::std::os::raw::c_uint = 391;
pub const KEY_SIC: ::std::os::raw::c_uint = 392;
pub const KEY_SLEFT: ::std::os::raw::c_uint = 393;
pub const KEY_SMESSAGE: ::std::os::raw::c_uint = 394;
pub const KEY_SMOVE: ::std::os::raw::c_uint = 395;
pub const KEY_SNEXT: ::std::os::raw::c_uint = 396;
pub const KEY_SOPTIONS: ::std::os::raw::c_uint = 397;
pub const KEY_SPREVIOUS: ::std::os::raw::c_uint = 398;
pub const KEY_SPRINT: ::std::os::raw::c_uint = 399;
pub const KEY_SREDO: ::std::os::raw::c_uint = 400;
pub const KEY_SREPLACE: ::std::os::raw::c_uint = 401;
pub const KEY_SRIGHT: ::std::os::raw::c_uint = 402;
pub const KEY_SRSUME: ::std::os::raw::c_uint = 403;
pub const KEY_SSAVE: ::std::os::raw::c_uint = 404;
pub const KEY_SSUSPEND: ::std::os::raw::c_uint = 405;
pub const KEY_SUNDO: ::std::os::raw::c_uint = 406;
pub const KEY_SUSPEND: ::std::os::raw::c_uint = 407;
pub const KEY_UNDO: ::std::os::raw::c_uint = 408;
pub const KEY_MOUSE: ::std::os::raw::c_uint = 409;
pub const KEY_RESIZE: ::std::os::raw::c_uint = 410;
pub const KEY_EVENT: ::std::os::raw::c_uint = 411;
pub const KEY_MAX: ::std::os::raw::c_uint = 511;
pub const _XOPEN_CURSES: ::std::os::raw::c_uint = 1;
pub const NCURSES_BUTTON_RELEASED: ::std::os::raw::c_uint = 1;
pub const NCURSES_BUTTON_PRESSED: ::std::os::raw::c_uint = 2;
pub const NCURSES_BUTTON_CLICKED: ::std::os::raw::c_uint = 4;
pub const NCURSES_DOUBLE_CLICKED: ::std::os::raw::c_uint = 8;
pub const NCURSES_TRIPLE_CLICKED: ::std::os::raw::c_uint = 16;
pub const NCURSES_RESERVED_EVENT: ::std::os::raw::c_uint = 32;
pub const TRACE_DISABLE: ::std::os::raw::c_uint = 0;
pub const TRACE_TIMES: ::std::os::raw::c_uint = 1;
pub const TRACE_TPUTS: ::std::os::raw::c_uint = 2;
pub const TRACE_UPDATE: ::std::os::raw::c_uint = 4;
pub const TRACE_MOVE: ::std::os::raw::c_uint = 8;
pub const TRACE_CHARPUT: ::std::os::raw::c_uint = 16;
pub const TRACE_ORDINARY: ::std::os::raw::c_uint = 31;
pub const TRACE_CALLS: ::std::os::raw::c_uint = 32;
pub const TRACE_VIRTPUT: ::std::os::raw::c_uint = 64;
pub const TRACE_IEVENT: ::std::os::raw::c_uint = 128;
pub const TRACE_BITS: ::std::os::raw::c_uint = 256;
pub const TRACE_ICALLS: ::std::os::raw::c_uint = 512;
pub const TRACE_CCALLS: ::std::os::raw::c_uint = 1024;
pub const TRACE_DATABASE: ::std::os::raw::c_uint = 2048;
pub const TRACE_ATTRS: ::std::os::raw::c_uint = 4096;
pub const TRACE_SHIFT: ::std::os::raw::c_uint = 13;
pub const TRACE_MAXIMUM: ::std::os::raw::c_uint = 8191;
pub const NCURSES_UNCTRL_H_incl: ::std::os::raw::c_uint = 1;
pub const NCURSES_TERM_H_incl: ::std::os::raw::c_uint = 1;
pub const NCURSES_USE_DATABASE: ::std::os::raw::c_uint = 1;
pub const NCURSES_USE_TERMCAP: ::std::os::raw::c_uint = 0;
pub const NCURSES_XNAMES: ::std::os::raw::c_uint = 1;
pub const TERMIOS: ::std::os::raw::c_uint = 1;
pub const NAMESIZE: ::std::os::raw::c_uint = 256;
pub const BOOLWRITE: ::std::os::raw::c_uint = 37;
pub const NUMWRITE: ::std::os::raw::c_uint = 33;
pub const STRWRITE: ::std::os::raw::c_uint = 394;
pub const BOOLCOUNT: ::std::os::raw::c_uint = 44;
pub const NUMCOUNT: ::std::os::raw::c_uint = 39;
pub const STRCOUNT: ::std::os::raw::c_uint = 414;
pub const acs_chars_index: ::std::os::raw::c_uint = 146;
pub const MN_INTEGER: ::std::os::raw::c_uint = 1;
pub const MN_FLOAT: ::std::os::raw::c_uint = 2;
pub const MN_UNSET: ::std::os::raw::c_uint = 4;
pub const MFF_STR: ::std::os::raw::c_uint = 1;
pub const MFF_ADDED: ::std::os::raw::c_uint = 2;
pub const MFF_USERFUNC: ::std::os::raw::c_uint = 4;
pub const MFF_AUTOALL: ::std::os::raw::c_uint = 8;
pub const DEFAULT_IFS: &'static [u8; 11usize] = b" \\t\\n\\203 \x00";
pub const DEFAULT_IFS_SH: &'static [u8; 6usize] = b" \\t\\n\x00";
pub const PATCHARS: &'static [u8; 15usize] = b"#^*()|[]<>?~\\\\\x00";
pub const REDIR_TYPE_MASK: ::std::os::raw::c_uint = 31;
pub const REDIR_VARID_MASK: ::std::os::raw::c_uint = 32;
pub const REDIR_FROM_HEREDOC_MASK: ::std::os::raw::c_uint = 64;
pub const FDT_UNUSED: ::std::os::raw::c_uint = 0;
pub const FDT_INTERNAL: ::std::os::raw::c_uint = 1;
pub const FDT_EXTERNAL: ::std::os::raw::c_uint = 2;
pub const FDT_MODULE: ::std::os::raw::c_uint = 3;
pub const FDT_XTRACE: ::std::os::raw::c_uint = 4;
pub const FDT_FLOCK: ::std::os::raw::c_uint = 5;
pub const FDT_FLOCK_EXEC: ::std::os::raw::c_uint = 6;
pub const FDT_PROC_SUBST: ::std::os::raw::c_uint = 7;
pub const INP_FREE: ::std::os::raw::c_uint = 1;
pub const INP_ALIAS: ::std::os::raw::c_uint = 2;
pub const INP_HIST: ::std::os::raw::c_uint = 4;
pub const INP_CONT: ::std::os::raw::c_uint = 8;
pub const INP_ALCONT: ::std::os::raw::c_uint = 16;
pub const INP_HISTCONT: ::std::os::raw::c_uint = 32;
pub const INP_LINENO: ::std::os::raw::c_uint = 64;
pub const INP_APPEND: ::std::os::raw::c_uint = 128;
pub const INP_RAW_KEEP: ::std::os::raw::c_uint = 256;
pub const META_REALLOC: ::std::os::raw::c_uint = 0;
pub const META_USEHEAP: ::std::os::raw::c_uint = 1;
pub const META_STATIC: ::std::os::raw::c_uint = 2;
pub const META_DUP: ::std::os::raw::c_uint = 3;
pub const META_ALLOC: ::std::os::raw::c_uint = 4;
pub const META_NOALLOC: ::std::os::raw::c_uint = 5;
pub const META_HEAPDUP: ::std::os::raw::c_uint = 6;
pub const META_HREALLOC: ::std::os::raw::c_uint = 7;
pub const Z_TIMED: ::std::os::raw::c_uint = 1;
pub const Z_SYNC: ::std::os::raw::c_uint = 2;
pub const Z_ASYNC: ::std::os::raw::c_uint = 4;
pub const Z_DISOWN: ::std::os::raw::c_uint = 8;
pub const COND_NOT: ::std::os::raw::c_uint = 0;
pub const COND_AND: ::std::os::raw::c_uint = 1;
pub const COND_OR: ::std::os::raw::c_uint = 2;
pub const COND_STREQ: ::std::os::raw::c_uint = 3;
pub const COND_STRDEQ: ::std::os::raw::c_uint = 4;
pub const COND_STRNEQ: ::std::os::raw::c_uint = 5;
pub const COND_STRLT: ::std::os::raw::c_uint = 6;
pub const COND_STRGTR: ::std::os::raw::c_uint = 7;
pub const COND_NT: ::std::os::raw::c_uint = 8;
pub const COND_OT: ::std::os::raw::c_uint = 9;
pub const COND_EF: ::std::os::raw::c_uint = 10;
pub const COND_EQ: ::std::os::raw::c_uint = 11;
pub const COND_NE: ::std::os::raw::c_uint = 12;
pub const COND_LT: ::std::os::raw::c_uint = 13;
pub const COND_GT: ::std::os::raw::c_uint = 14;
pub const COND_LE: ::std::os::raw::c_uint = 15;
pub const COND_GE: ::std::os::raw::c_uint = 16;
pub const COND_REGEX: ::std::os::raw::c_uint = 17;
pub const COND_MOD: ::std::os::raw::c_uint = 18;
pub const COND_MODI: ::std::os::raw::c_uint = 19;
pub const CONDF_INFIX: ::std::os::raw::c_uint = 1;
pub const CONDF_ADDED: ::std::os::raw::c_uint = 2;
pub const CONDF_AUTOALL: ::std::os::raw::c_uint = 4;
pub const MULTIOUNIT: ::std::os::raw::c_uint = 8;
pub const MAX_ARRLEN: ::std::os::raw::c_uint = 262144;
pub const EF_REAL: ::std::os::raw::c_uint = 1;
pub const EF_HEAP: ::std::os::raw::c_uint = 2;
pub const EF_MAP: ::std::os::raw::c_uint = 4;
pub const EF_RUN: ::std::os::raw::c_uint = 8;
pub const EC_NODUP: ::std::os::raw::c_uint = 0;
pub const EC_DUP: ::std::os::raw::c_uint = 1;
pub const EC_DUPTOK: ::std::os::raw::c_uint = 2;
pub const WC_CODEBITS: ::std::os::raw::c_uint = 5;
pub const WC_END: ::std::os::raw::c_uint = 0;
pub const WC_LIST: ::std::os::raw::c_uint = 1;
pub const WC_SUBLIST: ::std::os::raw::c_uint = 2;
pub const WC_PIPE: ::std::os::raw::c_uint = 3;
pub const WC_REDIR: ::std::os::raw::c_uint = 4;
pub const WC_ASSIGN: ::std::os::raw::c_uint = 5;
pub const WC_SIMPLE: ::std::os::raw::c_uint = 6;
pub const WC_TYPESET: ::std::os::raw::c_uint = 7;
pub const WC_SUBSH: ::std::os::raw::c_uint = 8;
pub const WC_CURSH: ::std::os::raw::c_uint = 9;
pub const WC_TIMED: ::std::os::raw::c_uint = 10;
pub const WC_FUNCDEF: ::std::os::raw::c_uint = 11;
pub const WC_FOR: ::std::os::raw::c_uint = 12;
pub const WC_SELECT: ::std::os::raw::c_uint = 13;
pub const WC_WHILE: ::std::os::raw::c_uint = 14;
pub const WC_REPEAT: ::std::os::raw::c_uint = 15;
pub const WC_CASE: ::std::os::raw::c_uint = 16;
pub const WC_IF: ::std::os::raw::c_uint = 17;
pub const WC_COND: ::std::os::raw::c_uint = 18;
pub const WC_ARITH: ::std::os::raw::c_uint = 19;
pub const WC_AUTOFN: ::std::os::raw::c_uint = 20;
pub const WC_TRY: ::std::os::raw::c_uint = 21;
pub const WC_COUNT: ::std::os::raw::c_uint = 22;
pub const Z_END: ::std::os::raw::c_uint = 16;
pub const Z_SIMPLE: ::std::os::raw::c_uint = 32;
pub const WC_LIST_FREE: ::std::os::raw::c_uint = 6;
pub const WC_SUBLIST_END: ::std::os::raw::c_uint = 0;
pub const WC_SUBLIST_AND: ::std::os::raw::c_uint = 1;
pub const WC_SUBLIST_OR: ::std::os::raw::c_uint = 2;
pub const WC_SUBLIST_COPROC: ::std::os::raw::c_uint = 4;
pub const WC_SUBLIST_NOT: ::std::os::raw::c_uint = 8;
pub const WC_SUBLIST_SIMPLE: ::std::os::raw::c_uint = 16;
pub const WC_SUBLIST_FREE: ::std::os::raw::c_uint = 5;
pub const WC_PIPE_END: ::std::os::raw::c_uint = 0;
pub const WC_PIPE_MID: ::std::os::raw::c_uint = 1;
pub const WC_ASSIGN_SCALAR: ::std::os::raw::c_uint = 0;
pub const WC_ASSIGN_ARRAY: ::std::os::raw::c_uint = 1;
pub const WC_ASSIGN_NEW: ::std::os::raw::c_uint = 0;
pub const WC_ASSIGN_INC: ::std::os::raw::c_uint = 1;
pub const WC_TIMED_EMPTY: ::std::os::raw::c_uint = 0;
pub const WC_TIMED_PIPE: ::std::os::raw::c_uint = 1;
pub const WC_FOR_PPARAM: ::std::os::raw::c_uint = 0;
pub const WC_FOR_LIST: ::std::os::raw::c_uint = 1;
pub const WC_FOR_COND: ::std::os::raw::c_uint = 2;
pub const WC_SELECT_PPARAM: ::std::os::raw::c_uint = 0;
pub const WC_SELECT_LIST: ::std::os::raw::c_uint = 1;
pub const WC_WHILE_WHILE: ::std::os::raw::c_uint = 0;
pub const WC_WHILE_UNTIL: ::std::os::raw::c_uint = 1;
pub const WC_CASE_HEAD: ::std::os::raw::c_uint = 0;
pub const WC_CASE_OR: ::std::os::raw::c_uint = 1;
pub const WC_CASE_AND: ::std::os::raw::c_uint = 2;
pub const WC_CASE_TESTAND: ::std::os::raw::c_uint = 3;
pub const WC_CASE_FREE: ::std::os::raw::c_uint = 3;
pub const WC_IF_HEAD: ::std::os::raw::c_uint = 0;
pub const WC_IF_IF: ::std::os::raw::c_uint = 1;
pub const WC_IF_ELIF: ::std::os::raw::c_uint = 2;
pub const WC_IF_ELSE: ::std::os::raw::c_uint = 3;
pub const STAT_CHANGED: ::std::os::raw::c_uint = 1;
pub const STAT_STOPPED: ::std::os::raw::c_uint = 2;
pub const STAT_TIMED: ::std::os::raw::c_uint = 4;
pub const STAT_DONE: ::std::os::raw::c_uint = 8;
pub const STAT_LOCKED: ::std::os::raw::c_uint = 16;
pub const STAT_NOPRINT: ::std::os::raw::c_uint = 32;
pub const STAT_INUSE: ::std::os::raw::c_uint = 64;
pub const STAT_SUPERJOB: ::std::os::raw::c_uint = 128;
pub const STAT_SUBJOB: ::std::os::raw::c_uint = 256;
pub const STAT_WASSUPER: ::std::os::raw::c_uint = 512;
pub const STAT_CURSH: ::std::os::raw::c_uint = 1024;
pub const STAT_NOSTTY: ::std::os::raw::c_uint = 2048;
pub const STAT_ATTACH: ::std::os::raw::c_uint = 4096;
pub const STAT_SUBLEADER: ::std::os::raw::c_uint = 8192;
pub const STAT_BUILTIN: ::std::os::raw::c_uint = 16384;
pub const STAT_SUBJOB_ORPHANED: ::std::os::raw::c_uint = 32768;
pub const STAT_DISOWN: ::std::os::raw::c_uint = 65536;
pub const SP_RUNNING: ::std::os::raw::c_int = -1;
pub const JOBTEXTSIZE: ::std::os::raw::c_uint = 80;
pub const MAXJOBS_ALLOC: ::std::os::raw::c_uint = 50;
pub const MAX_PIPESTATS: ::std::os::raw::c_uint = 256;
pub const DISABLED: ::std::os::raw::c_uint = 1;
pub const ALIAS_GLOBAL: ::std::os::raw::c_uint = 2;
pub const ALIAS_SUFFIX: ::std::os::raw::c_uint = 4;
pub const HASHED: ::std::os::raw::c_uint = 2;
pub const SFC_NONE: ::std::os::raw::c_uint = 0;
pub const SFC_DIRECT: ::std::os::raw::c_uint = 1;
pub const SFC_SIGNAL: ::std::os::raw::c_uint = 2;
pub const SFC_HOOK: ::std::os::raw::c_uint = 3;
pub const SFC_WIDGET: ::std::os::raw::c_uint = 4;
pub const SFC_COMPLETE: ::std::os::raw::c_uint = 5;
pub const SFC_CWIDGET: ::std::os::raw::c_uint = 6;
pub const SFC_SUBST: ::std::os::raw::c_uint = 7;
pub const WRAPF_ADDED: ::std::os::raw::c_uint = 1;
pub const HOOK_SUFFIX: &'static [u8; 11usize] = b"_functions\x00";
pub const HOOK_SUFFIX_LEN: ::std::os::raw::c_uint = 11;
pub const MAX_OPS: ::std::os::raw::c_uint = 128;
pub const BINF_PLUSOPTS: ::std::os::raw::c_uint = 2;
pub const BINF_PRINTOPTS: ::std::os::raw::c_uint = 4;
pub const BINF_ADDED: ::std::os::raw::c_uint = 8;
pub const BINF_MAGICEQUALS: ::std::os::raw::c_uint = 16;
pub const BINF_PREFIX: ::std::os::raw::c_uint = 32;
pub const BINF_DASH: ::std::os::raw::c_uint = 64;
pub const BINF_BUILTIN: ::std::os::raw::c_uint = 128;
pub const BINF_COMMAND: ::std::os::raw::c_uint = 256;
pub const BINF_EXEC: ::std::os::raw::c_uint = 512;
pub const BINF_NOGLOB: ::std::os::raw::c_uint = 1024;
pub const BINF_PSPECIAL: ::std::os::raw::c_uint = 2048;
pub const BINF_SKIPINVALID: ::std::os::raw::c_uint = 4096;
pub const BINF_KEEPNUM: ::std::os::raw::c_uint = 8192;
pub const BINF_SKIPDASH: ::std::os::raw::c_uint = 16384;
pub const BINF_DASHDASHVALID: ::std::os::raw::c_uint = 32768;
pub const BINF_CLEARENV: ::std::os::raw::c_uint = 65536;
pub const BINF_AUTOALL: ::std::os::raw::c_uint = 131072;
pub const BINF_HANDLES_OPTS: ::std::os::raw::c_uint = 262144;
pub const BINF_ASSIGN: ::std::os::raw::c_uint = 524288;
pub const MOD_BUSY: ::std::os::raw::c_uint = 1;
pub const MOD_UNLOAD: ::std::os::raw::c_uint = 2;
pub const MOD_SETUP: ::std::os::raw::c_uint = 4;
pub const MOD_LINKED: ::std::os::raw::c_uint = 8;
pub const MOD_INIT_S: ::std::os::raw::c_uint = 16;
pub const MOD_INIT_B: ::std::os::raw::c_uint = 32;
pub const MOD_ALIAS: ::std::os::raw::c_uint = 64;
pub const HOOKF_ALL: ::std::os::raw::c_uint = 1;
pub const PAT_HEAPDUP: ::std::os::raw::c_uint = 0;
pub const PAT_FILE: ::std::os::raw::c_uint = 1;
pub const PAT_FILET: ::std::os::raw::c_uint = 2;
pub const PAT_ANY: ::std::os::raw::c_uint = 4;
pub const PAT_NOANCH: ::std::os::raw::c_uint = 8;
pub const PAT_NOGLD: ::std::os::raw::c_uint = 16;
pub const PAT_PURES: ::std::os::raw::c_uint = 32;
pub const PAT_STATIC: ::std::os::raw::c_uint = 64;
pub const PAT_SCAN: ::std::os::raw::c_uint = 128;
pub const PAT_ZDUP: ::std::os::raw::c_uint = 256;
pub const PAT_NOTSTART: ::std::os::raw::c_uint = 512;
pub const PAT_NOTEND: ::std::os::raw::c_uint = 1024;
pub const PAT_HAS_EXCLUDP: ::std::os::raw::c_uint = 2048;
pub const PAT_LCMATCHUC: ::std::os::raw::c_uint = 4096;
pub const PP_FIRST: ::std::os::raw::c_uint = 1;
pub const PP_ALPHA: ::std::os::raw::c_uint = 1;
pub const PP_ALNUM: ::std::os::raw::c_uint = 2;
pub const PP_ASCII: ::std::os::raw::c_uint = 3;
pub const PP_BLANK: ::std::os::raw::c_uint = 4;
pub const PP_CNTRL: ::std::os::raw::c_uint = 5;
pub const PP_DIGIT: ::std::os::raw::c_uint = 6;
pub const PP_GRAPH: ::std::os::raw::c_uint = 7;
pub const PP_LOWER: ::std::os::raw::c_uint = 8;
pub const PP_PRINT: ::std::os::raw::c_uint = 9;
pub const PP_PUNCT: ::std::os::raw::c_uint = 10;
pub const PP_SPACE: ::std::os::raw::c_uint = 11;
pub const PP_UPPER: ::std::os::raw::c_uint = 12;
pub const PP_XDIGIT: ::std::os::raw::c_uint = 13;
pub const PP_IDENT: ::std::os::raw::c_uint = 14;
pub const PP_IFS: ::std::os::raw::c_uint = 15;
pub const PP_IFSSPACE: ::std::os::raw::c_uint = 16;
pub const PP_WORD: ::std::os::raw::c_uint = 17;
pub const PP_INCOMPLETE: ::std::os::raw::c_uint = 18;
pub const PP_INVALID: ::std::os::raw::c_uint = 19;
pub const PP_LAST: ::std::os::raw::c_uint = 19;
pub const PP_UNKWN: ::std::os::raw::c_uint = 20;
pub const PP_RANGE: ::std::os::raw::c_uint = 21;
pub const GF_LCMATCHUC: ::std::os::raw::c_uint = 256;
pub const GF_IGNCASE: ::std::os::raw::c_uint = 512;
pub const GF_BACKREF: ::std::os::raw::c_uint = 1024;
pub const GF_MATCHREF: ::std::os::raw::c_uint = 2048;
pub const GF_MULTIBYTE: ::std::os::raw::c_uint = 4096;
pub const PM_SCALAR: ::std::os::raw::c_uint = 0;
pub const PM_ARRAY: ::std::os::raw::c_uint = 1;
pub const PM_INTEGER: ::std::os::raw::c_uint = 2;
pub const PM_EFLOAT: ::std::os::raw::c_uint = 4;
pub const PM_FFLOAT: ::std::os::raw::c_uint = 8;
pub const PM_HASHED: ::std::os::raw::c_uint = 16;
pub const PM_LEFT: ::std::os::raw::c_uint = 32;
pub const PM_RIGHT_B: ::std::os::raw::c_uint = 64;
pub const PM_RIGHT_Z: ::std::os::raw::c_uint = 128;
pub const PM_LOWER: ::std::os::raw::c_uint = 256;
pub const PM_UPPER: ::std::os::raw::c_uint = 512;
pub const PM_UNDEFINED: ::std::os::raw::c_uint = 512;
pub const PM_READONLY: ::std::os::raw::c_uint = 1024;
pub const PM_TAGGED: ::std::os::raw::c_uint = 2048;
pub const PM_EXPORTED: ::std::os::raw::c_uint = 4096;
pub const PM_ABSPATH_USED: ::std::os::raw::c_uint = 4096;
pub const PM_UNIQUE: ::std::os::raw::c_uint = 8192;
pub const PM_UNALIASED: ::std::os::raw::c_uint = 8192;
pub const PM_HIDE: ::std::os::raw::c_uint = 16384;
pub const PM_CUR_FPATH: ::std::os::raw::c_uint = 16384;
pub const PM_HIDEVAL: ::std::os::raw::c_uint = 32768;
pub const PM_WARNNESTED: ::std::os::raw::c_uint = 32768;
pub const PM_TIED: ::std::os::raw::c_uint = 65536;
pub const PM_TAGGED_LOCAL: ::std::os::raw::c_uint = 65536;
pub const PM_KSHSTORED: ::std::os::raw::c_uint = 131072;
pub const PM_ZSHSTORED: ::std::os::raw::c_uint = 262144;
pub const PM_DONTIMPORT_SUID: ::std::os::raw::c_uint = 524288;
pub const PM_LOADDIR: ::std::os::raw::c_uint = 524288;
pub const PM_SINGLE: ::std::os::raw::c_uint = 1048576;
pub const PM_LOCAL: ::std::os::raw::c_uint = 2097152;
pub const PM_SPECIAL: ::std::os::raw::c_uint = 4194304;
pub const PM_DONTIMPORT: ::std::os::raw::c_uint = 8388608;
pub const PM_RESTRICTED: ::std::os::raw::c_uint = 16777216;
pub const PM_UNSET: ::std::os::raw::c_uint = 33554432;
pub const PM_REMOVABLE: ::std::os::raw::c_uint = 67108864;
pub const PM_AUTOLOAD: ::std::os::raw::c_uint = 134217728;
pub const PM_NORESTORE: ::std::os::raw::c_uint = 268435456;
pub const PM_AUTOALL: ::std::os::raw::c_uint = 268435456;
pub const PM_HASHELEM: ::std::os::raw::c_uint = 536870912;
pub const PM_NAMEDDIR: ::std::os::raw::c_uint = 1073741824;
pub const TYPESET_OPTSTR: &'static [u8; 20usize] = b"aiEFALRZlurtxUhHTkz\x00";
pub const TYPESET_OPTNUM: &'static [u8; 7usize] = b"LRZiEF\x00";
pub const SCANPM_WANTVALS: ::std::os::raw::c_uint = 1;
pub const SCANPM_WANTKEYS: ::std::os::raw::c_uint = 2;
pub const SCANPM_WANTINDEX: ::std::os::raw::c_uint = 4;
pub const SCANPM_MATCHKEY: ::std::os::raw::c_uint = 8;
pub const SCANPM_MATCHVAL: ::std::os::raw::c_uint = 16;
pub const SCANPM_MATCHMANY: ::std::os::raw::c_uint = 32;
pub const SCANPM_ASSIGNING: ::std::os::raw::c_uint = 64;
pub const SCANPM_KEYMATCH: ::std::os::raw::c_uint = 128;
pub const SCANPM_DQUOTED: ::std::os::raw::c_uint = 256;
pub const SCANPM_ARRONLY: ::std::os::raw::c_uint = 512;
pub const SUB_END: ::std::os::raw::c_uint = 1;
pub const SUB_LONG: ::std::os::raw::c_uint = 2;
pub const SUB_SUBSTR: ::std::os::raw::c_uint = 4;
pub const SUB_MATCH: ::std::os::raw::c_uint = 8;
pub const SUB_REST: ::std::os::raw::c_uint = 16;
pub const SUB_BIND: ::std::os::raw::c_uint = 32;
pub const SUB_EIND: ::std::os::raw::c_uint = 64;
pub const SUB_LEN: ::std::os::raw::c_uint = 128;
pub const SUB_ALL: ::std::os::raw::c_uint = 256;
pub const SUB_GLOBAL: ::std::os::raw::c_uint = 512;
pub const SUB_DOSUBST: ::std::os::raw::c_uint = 1024;
pub const SUB_RETFAIL: ::std::os::raw::c_uint = 2048;
pub const SUB_START: ::std::os::raw::c_uint = 4096;
pub const SUB_LIST: ::std::os::raw::c_uint = 8192;
pub const ND_USERNAME: ::std::os::raw::c_uint = 2;
pub const ND_NOABBREV: ::std::os::raw::c_uint = 4;
pub const PRINT_NAMEONLY: ::std::os::raw::c_uint = 1;
pub const PRINT_TYPE: ::std::os::raw::c_uint = 2;
pub const PRINT_LIST: ::std::os::raw::c_uint = 4;
pub const PRINT_KV_PAIR: ::std::os::raw::c_uint = 8;
pub const PRINT_INCLUDEVALUE: ::std::os::raw::c_uint = 16;
pub const PRINT_TYPESET: ::std::os::raw::c_uint = 32;
pub const PRINT_WHENCE_CSH: ::std::os::raw::c_uint = 64;
pub const PRINT_WHENCE_VERBOSE: ::std::os::raw::c_uint = 128;
pub const PRINT_WHENCE_SIMPLE: ::std::os::raw::c_uint = 256;
pub const PRINT_WHENCE_FUNCDEF: ::std::os::raw::c_uint = 512;
pub const PRINT_WHENCE_WORD: ::std::os::raw::c_uint = 1024;
pub const HIST_MAKEUNIQUE: ::std::os::raw::c_uint = 1;
pub const HIST_OLD: ::std::os::raw::c_uint = 2;
pub const HIST_READ: ::std::os::raw::c_uint = 4;
pub const HIST_DUP: ::std::os::raw::c_uint = 8;
pub const HIST_FOREIGN: ::std::os::raw::c_uint = 16;
pub const HIST_TMPSTORE: ::std::os::raw::c_uint = 32;
pub const HIST_NOWRITE: ::std::os::raw::c_uint = 64;
pub const GETHIST_UPWARD: ::std::os::raw::c_int = -1;
pub const GETHIST_DOWNWARD: ::std::os::raw::c_uint = 1;
pub const GETHIST_EXACT: ::std::os::raw::c_uint = 0;
pub const HISTFLAG_DONE: ::std::os::raw::c_uint = 1;
pub const HISTFLAG_NOEXEC: ::std::os::raw::c_uint = 2;
pub const HISTFLAG_RECALL: ::std::os::raw::c_uint = 4;
pub const HISTFLAG_SETTY: ::std::os::raw::c_uint = 8;
pub const HFILE_APPEND: ::std::os::raw::c_uint = 1;
pub const HFILE_SKIPOLD: ::std::os::raw::c_uint = 2;
pub const HFILE_SKIPDUPS: ::std::os::raw::c_uint = 4;
pub const HFILE_SKIPFOREIGN: ::std::os::raw::c_uint = 8;
pub const HFILE_FAST: ::std::os::raw::c_uint = 16;
pub const HFILE_NO_REWRITE: ::std::os::raw::c_uint = 32;
pub const HFILE_USE_OPTIONS: ::std::os::raw::c_uint = 32768;
pub const LEXFLAGS_ACTIVE: ::std::os::raw::c_uint = 1;
pub const LEXFLAGS_ZLE: ::std::os::raw::c_uint = 2;
pub const LEXFLAGS_COMMENTS_KEEP: ::std::os::raw::c_uint = 4;
pub const LEXFLAGS_COMMENTS_STRIP: ::std::os::raw::c_uint = 8;
pub const LEXFLAGS_COMMENTS: ::std::os::raw::c_uint = 12;
pub const LEXFLAGS_NEWLINE: ::std::os::raw::c_uint = 16;
pub const IN_NOTHING: ::std::os::raw::c_uint = 0;
pub const IN_CMD: ::std::os::raw::c_uint = 1;
pub const IN_MATH: ::std::os::raw::c_uint = 2;
pub const IN_COND: ::std::os::raw::c_uint = 3;
pub const IN_ENV: ::std::os::raw::c_uint = 4;
pub const IN_PAR: ::std::os::raw::c_uint = 5;
pub const EMULATE_CSH: ::std::os::raw::c_uint = 2;
pub const EMULATE_KSH: ::std::os::raw::c_uint = 4;
pub const EMULATE_SH: ::std::os::raw::c_uint = 8;
pub const EMULATE_ZSH: ::std::os::raw::c_uint = 16;
pub const EMULATE_FULLY: ::std::os::raw::c_uint = 32;
pub const EMULATE_UNUSED: ::std::os::raw::c_uint = 64;
pub const SGTABTYPE: ::std::os::raw::c_uint = 6144;
pub const TERM_BAD: ::std::os::raw::c_uint = 1;
pub const TERM_UNKNOWN: ::std::os::raw::c_uint = 2;
pub const TERM_NOUP: ::std::os::raw::c_uint = 4;
pub const TERM_SHORT: ::std::os::raw::c_uint = 8;
pub const TERM_NARROW: ::std::os::raw::c_uint = 16;
pub const TCCLEARSCREEN: ::std::os::raw::c_uint = 0;
pub const TCLEFT: ::std::os::raw::c_uint = 1;
pub const TCMULTLEFT: ::std::os::raw::c_uint = 2;
pub const TCRIGHT: ::std::os::raw::c_uint = 3;
pub const TCMULTRIGHT: ::std::os::raw::c_uint = 4;
pub const TCUP: ::std::os::raw::c_uint = 5;
pub const TCMULTUP: ::std::os::raw::c_uint = 6;
pub const TCDOWN: ::std::os::raw::c_uint = 7;
pub const TCMULTDOWN: ::std::os::raw::c_uint = 8;
pub const TCDEL: ::std::os::raw::c_uint = 9;
pub const TCMULTDEL: ::std::os::raw::c_uint = 10;
pub const TCINS: ::std::os::raw::c_uint = 11;
pub const TCMULTINS: ::std::os::raw::c_uint = 12;
pub const TCCLEAREOD: ::std::os::raw::c_uint = 13;
pub const TCCLEAREOL: ::std::os::raw::c_uint = 14;
pub const TCINSLINE: ::std::os::raw::c_uint = 15;
pub const TCDELLINE: ::std::os::raw::c_uint = 16;
pub const TCNEXTTAB: ::std::os::raw::c_uint = 17;
pub const TCBOLDFACEBEG: ::std::os::raw::c_uint = 18;
pub const TCSTANDOUTBEG: ::std::os::raw::c_uint = 19;
pub const TCUNDERLINEBEG: ::std::os::raw::c_uint = 20;
pub const TCALLATTRSOFF: ::std::os::raw::c_uint = 21;
pub const TCSTANDOUTEND: ::std::os::raw::c_uint = 22;
pub const TCUNDERLINEEND: ::std::os::raw::c_uint = 23;
pub const TCHORIZPOS: ::std::os::raw::c_uint = 24;
pub const TCUPCURSOR: ::std::os::raw::c_uint = 25;
pub const TCDOWNCURSOR: ::std::os::raw::c_uint = 26;
pub const TCLEFTCURSOR: ::std::os::raw::c_uint = 27;
pub const TCRIGHTCURSOR: ::std::os::raw::c_uint = 28;
pub const TCSAVECURSOR: ::std::os::raw::c_uint = 29;
pub const TCRESTRCURSOR: ::std::os::raw::c_uint = 30;
pub const TCBACKSPACE: ::std::os::raw::c_uint = 31;
pub const TCFGCOLOUR: ::std::os::raw::c_uint = 32;
pub const TCBGCOLOUR: ::std::os::raw::c_uint = 33;
pub const TC_COUNT: ::std::os::raw::c_uint = 34;
pub const TXTBOLDFACE: ::std::os::raw::c_uint = 1;
pub const TXTSTANDOUT: ::std::os::raw::c_uint = 2;
pub const TXTUNDERLINE: ::std::os::raw::c_uint = 4;
pub const TXTFGCOLOUR: ::std::os::raw::c_uint = 8;
pub const TXTBGCOLOUR: ::std::os::raw::c_uint = 16;
pub const TXT_ATTR_ON_MASK: ::std::os::raw::c_uint = 31;
pub const TXTNOBOLDFACE: ::std::os::raw::c_uint = 32;
pub const TXTNOSTANDOUT: ::std::os::raw::c_uint = 64;
pub const TXTNOUNDERLINE: ::std::os::raw::c_uint = 128;
pub const TXTNOFGCOLOUR: ::std::os::raw::c_uint = 256;
pub const TXTNOBGCOLOUR: ::std::os::raw::c_uint = 512;
pub const TXT_ATTR_OFF_MASK: ::std::os::raw::c_uint = 992;
pub const TXT_ATTR_OFF_ON_SHIFT: ::std::os::raw::c_uint = 5;
pub const TXT_MULTIWORD_MASK: ::std::os::raw::c_uint = 1024;
pub const TXT_ATTR_FG_COL_MASK: ::std::os::raw::c_uint = 1044480;
pub const TXT_ATTR_FG_COL_SHIFT: ::std::os::raw::c_uint = 12;
pub const TXT_ATTR_BG_COL_MASK: ::std::os::raw::c_uint = 267386880;
pub const TXT_ATTR_BG_COL_SHIFT: ::std::os::raw::c_uint = 20;
pub const TXT_ATTR_FG_TERMCAP: ::std::os::raw::c_uint = 268435456;
pub const TXT_ATTR_BG_TERMCAP: ::std::os::raw::c_uint = 536870912;
pub const TXT_ATTR_ON_VALUES_MASK: ::std::os::raw::c_uint = 1073737759;
pub const TXT_ATTR_FG_ON_MASK: ::std::os::raw::c_uint = 269479944;
pub const TXT_ATTR_BG_ON_MASK: ::std::os::raw::c_uint = 804257808;
pub const TXT_ATTR_COLOUR_ON_MASK: ::std::os::raw::c_uint = 1073737752;
pub const COL_SEQ_FG: ::std::os::raw::c_uint = 0;
pub const COL_SEQ_BG: ::std::os::raw::c_uint = 1;
pub const COL_SEQ_COUNT: ::std::os::raw::c_uint = 2;
pub const CMDSTACKSZ: ::std::os::raw::c_uint = 256;
pub const CS_FOR: ::std::os::raw::c_uint = 0;
pub const CS_WHILE: ::std::os::raw::c_uint = 1;
pub const CS_REPEAT: ::std::os::raw::c_uint = 2;
pub const CS_SELECT: ::std::os::raw::c_uint = 3;
pub const CS_UNTIL: ::std::os::raw::c_uint = 4;
pub const CS_IF: ::std::os::raw::c_uint = 5;
pub const CS_IFTHEN: ::std::os::raw::c_uint = 6;
pub const CS_ELSE: ::std::os::raw::c_uint = 7;
pub const CS_ELIF: ::std::os::raw::c_uint = 8;
pub const CS_MATH: ::std::os::raw::c_uint = 9;
pub const CS_COND: ::std::os::raw::c_uint = 10;
pub const CS_CMDOR: ::std::os::raw::c_uint = 11;
pub const CS_CMDAND: ::std::os::raw::c_uint = 12;
pub const CS_PIPE: ::std::os::raw::c_uint = 13;
pub const CS_ERRPIPE: ::std::os::raw::c_uint = 14;
pub const CS_FOREACH: ::std::os::raw::c_uint = 15;
pub const CS_CASE: ::std::os::raw::c_uint = 16;
pub const CS_FUNCDEF: ::std::os::raw::c_uint = 17;
pub const CS_SUBSH: ::std::os::raw::c_uint = 18;
pub const CS_CURSH: ::std::os::raw::c_uint = 19;
pub const CS_ARRAY: ::std::os::raw::c_uint = 20;
pub const CS_QUOTE: ::std::os::raw::c_uint = 21;
pub const CS_DQUOTE: ::std::os::raw::c_uint = 22;
pub const CS_BQUOTE: ::std::os::raw::c_uint = 23;
pub const CS_CMDSUBST: ::std::os::raw::c_uint = 24;
pub const CS_MATHSUBST: ::std::os::raw::c_uint = 25;
pub const CS_ELIFTHEN: ::std::os::raw::c_uint = 26;
pub const CS_HEREDOC: ::std::os::raw::c_uint = 27;
pub const CS_HEREDOCD: ::std::os::raw::c_uint = 28;
pub const CS_BRACE: ::std::os::raw::c_uint = 29;
pub const CS_BRACEPAR: ::std::os::raw::c_uint = 30;
pub const CS_ALWAYS: ::std::os::raw::c_uint = 31;
pub const CS_COUNT: ::std::os::raw::c_uint = 32;
pub const ZSIG_TRAPPED: ::std::os::raw::c_uint = 1;
pub const ZSIG_IGNORED: ::std::os::raw::c_uint = 2;
pub const ZSIG_FUNC: ::std::os::raw::c_uint = 4;
pub const ZSIG_MASK: ::std::os::raw::c_uint = 7;
pub const ZSIG_ALIAS: ::std::os::raw::c_uint = 8;
pub const ZSIG_SHIFT: ::std::os::raw::c_uint = 4;
pub const ZLRF_HISTORY: ::std::os::raw::c_uint = 1;
pub const ZLRF_NOSETTY: ::std::os::raw::c_uint = 2;
pub const ZLRF_IGNOREEOF: ::std::os::raw::c_uint = 4;
pub const SIGCOUNT: ::std::os::raw::c_uint = 31;
pub const SIGZERR: ::std::os::raw::c_uint = 32;
pub const SIGDEBUG: ::std::os::raw::c_uint = 33;
pub const VSIGCOUNT: ::std::os::raw::c_uint = 34;
pub const SIGEXIT: ::std::os::raw::c_uint = 0;
pub const MAX_QUEUE_SIZE: ::std::os::raw::c_uint = 128;
pub const BIN_TYPESET: ::std::os::raw::c_uint = 0;
pub const BIN_BG: ::std::os::raw::c_uint = 1;
pub const BIN_FG: ::std::os::raw::c_uint = 2;
pub const BIN_JOBS: ::std::os::raw::c_uint = 3;
pub const BIN_WAIT: ::std::os::raw::c_uint = 4;
pub const BIN_DISOWN: ::std::os::raw::c_uint = 5;
pub const BIN_BREAK: ::std::os::raw::c_uint = 6;
pub const BIN_CONTINUE: ::std::os::raw::c_uint = 7;
pub const BIN_EXIT: ::std::os::raw::c_uint = 8;
pub const BIN_RETURN: ::std::os::raw::c_uint = 9;
pub const BIN_CD: ::std::os::raw::c_uint = 10;
pub const BIN_POPD: ::std::os::raw::c_uint = 11;
pub const BIN_PUSHD: ::std::os::raw::c_uint = 12;
pub const BIN_PRINT: ::std::os::raw::c_uint = 13;
pub const BIN_EVAL: ::std::os::raw::c_uint = 14;
pub const BIN_SCHED: ::std::os::raw::c_uint = 15;
pub const BIN_FC: ::std::os::raw::c_uint = 16;
pub const BIN_R: ::std::os::raw::c_uint = 17;
pub const BIN_PUSHLINE: ::std::os::raw::c_uint = 18;
pub const BIN_LOGOUT: ::std::os::raw::c_uint = 19;
pub const BIN_TEST: ::std::os::raw::c_uint = 20;
pub const BIN_BRACKET: ::std::os::raw::c_uint = 21;
pub const BIN_READONLY: ::std::os::raw::c_uint = 22;
pub const BIN_ECHO: ::std::os::raw::c_uint = 23;
pub const BIN_DISABLE: ::std::os::raw::c_uint = 24;
pub const BIN_ENABLE: ::std::os::raw::c_uint = 25;
pub const BIN_PRINTF: ::std::os::raw::c_uint = 26;
pub const BIN_COMMAND: ::std::os::raw::c_uint = 27;
pub const BIN_UNHASH: ::std::os::raw::c_uint = 28;
pub const BIN_UNALIAS: ::std::os::raw::c_uint = 29;
pub const BIN_UNFUNCTION: ::std::os::raw::c_uint = 30;
pub const BIN_SETOPT: ::std::os::raw::c_uint = 0;
pub const BIN_UNSETOPT: ::std::os::raw::c_uint = 1;
pub const IDIGIT: ::std::os::raw::c_uint = 1;
pub const IALNUM: ::std::os::raw::c_uint = 2;
pub const IBLANK: ::std::os::raw::c_uint = 4;
pub const INBLANK: ::std::os::raw::c_uint = 8;
pub const ITOK: ::std::os::raw::c_uint = 16;
pub const ISEP: ::std::os::raw::c_uint = 32;
pub const IALPHA: ::std::os::raw::c_uint = 64;
pub const IIDENT: ::std::os::raw::c_uint = 128;
pub const IUSER: ::std::os::raw::c_uint = 256;
pub const ICNTRL: ::std::os::raw::c_uint = 512;
pub const IWORD: ::std::os::raw::c_uint = 1024;
pub const ISPECIAL: ::std::os::raw::c_uint = 2048;
pub const IMETA: ::std::os::raw::c_uint = 4096;
pub const IWSEP: ::std::os::raw::c_uint = 8192;
pub const INULL: ::std::os::raw::c_uint = 16384;
pub const IPATTERN: ::std::os::raw::c_uint = 32768;
pub const ZTF_INIT: ::std::os::raw::c_uint = 1;
pub const ZTF_INTERACT: ::std::os::raw::c_uint = 2;
pub const ZTF_SP_COMMA: ::std::os::raw::c_uint = 4;
pub const ZTF_BANGCHAR: ::std::os::raw::c_uint = 8;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    assert_eq!(::std::mem::size_of::<__fsid_t>() , 8usize , concat ! (
               "Size of: " , stringify ! ( __fsid_t ) ));
    assert_eq! (::std::mem::align_of::<__fsid_t>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( __fsid_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __fsid_t ) ) . __val as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( __fsid_t ) , "::" ,
                stringify ! ( __val ) ));
}
impl Clone for __fsid_t {
    fn clone(&self) -> Self { *self }
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __qaddr_t = *mut __quad_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type ino64_t = __ino64_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type off_t = __off_t;
pub type off64_t = __off64_t;
pub type pid_t = __pid_t;
pub type id_t = __id_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type clock_t = __clock_t;
pub type clockid_t = __clockid_t;
pub type time_t = __time_t;
pub type timer_t = __timer_t;
pub type useconds_t = __useconds_t;
pub type suseconds_t = __suseconds_t;
pub type ulong = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint = ::std::os::raw::c_uint;
pub type u_int8_t = ::std::os::raw::c_uchar;
pub type u_int16_t = ::std::os::raw::c_ushort;
pub type u_int32_t = ::std::os::raw::c_uint;
pub type u_int64_t = ::std::os::raw::c_ulong;
pub type register_t = ::std::os::raw::c_long;
pub type __sig_atomic_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __sigset_t {
    pub __val: [::std::os::raw::c_ulong; 16usize],
}
#[test]
fn bindgen_test_layout___sigset_t() {
    assert_eq!(::std::mem::size_of::<__sigset_t>() , 128usize , concat ! (
               "Size of: " , stringify ! ( __sigset_t ) ));
    assert_eq! (::std::mem::align_of::<__sigset_t>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( __sigset_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __sigset_t ) ) . __val as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( __sigset_t ) , "::" ,
                stringify ! ( __val ) ));
}
impl Clone for __sigset_t {
    fn clone(&self) -> Self { *self }
}
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
#[test]
fn bindgen_test_layout_timeval() {
    assert_eq!(::std::mem::size_of::<timeval>() , 16usize , concat ! (
               "Size of: " , stringify ! ( timeval ) ));
    assert_eq! (::std::mem::align_of::<timeval>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( timeval ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const timeval ) ) . tv_sec as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( timeval ) , "::" ,
                stringify ! ( tv_sec ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const timeval ) ) . tv_usec as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( timeval ) , "::" ,
                stringify ! ( tv_usec ) ));
}
impl Clone for timeval {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
#[test]
fn bindgen_test_layout_timespec() {
    assert_eq!(::std::mem::size_of::<timespec>() , 16usize , concat ! (
               "Size of: " , stringify ! ( timespec ) ));
    assert_eq! (::std::mem::align_of::<timespec>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( timespec ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const timespec ) ) . tv_sec as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( timespec ) , "::" ,
                stringify ! ( tv_sec ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const timespec ) ) . tv_nsec as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( timespec ) , "::" ,
                stringify ! ( tv_nsec ) ));
}
impl Clone for timespec {
    fn clone(&self) -> Self { *self }
}
pub type __fd_mask = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct fd_set {
    pub fds_bits: [__fd_mask; 16usize],
}
#[test]
fn bindgen_test_layout_fd_set() {
    assert_eq!(::std::mem::size_of::<fd_set>() , 128usize , concat ! (
               "Size of: " , stringify ! ( fd_set ) ));
    assert_eq! (::std::mem::align_of::<fd_set>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( fd_set ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const fd_set ) ) . fds_bits as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( fd_set ) , "::" ,
                stringify ! ( fds_bits ) ));
}
impl Clone for fd_set {
    fn clone(&self) -> Self { *self }
}
pub type fd_mask = __fd_mask;
extern "C" {
    pub fn select(__nfds: ::std::os::raw::c_int, __readfds: *mut fd_set,
                  __writefds: *mut fd_set, __exceptfds: *mut fd_set,
                  __timeout: *mut timeval) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pselect(__nfds: ::std::os::raw::c_int, __readfds: *mut fd_set,
                   __writefds: *mut fd_set, __exceptfds: *mut fd_set,
                   __timeout: *const timespec, __sigmask: *const __sigset_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gnu_dev_major(__dev: __dev_t) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn gnu_dev_minor(__dev: __dev_t) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn gnu_dev_makedev(__major: ::std::os::raw::c_uint,
                           __minor: ::std::os::raw::c_uint) -> __dev_t;
}
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
pub type blkcnt64_t = __blkcnt64_t;
pub type fsblkcnt64_t = __fsblkcnt64_t;
pub type fsfilcnt64_t = __fsfilcnt64_t;
pub type pthread_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct pthread_attr_t {
    pub __size: __BindgenUnionField<[::std::os::raw::c_char; 56usize]>,
    pub __align: __BindgenUnionField<::std::os::raw::c_long>,
    pub bindgen_union_field: [u64; 7usize],
}
#[test]
fn bindgen_test_layout_pthread_attr_t() {
    assert_eq!(::std::mem::size_of::<pthread_attr_t>() , 56usize , concat ! (
               "Size of: " , stringify ! ( pthread_attr_t ) ));
    assert_eq! (::std::mem::align_of::<pthread_attr_t>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( pthread_attr_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_attr_t ) ) . __size as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( pthread_attr_t ) , "::"
                , stringify ! ( __size ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_attr_t ) ) . __align as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( pthread_attr_t ) , "::"
                , stringify ! ( __align ) ));
}
impl Clone for pthread_attr_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
#[test]
fn bindgen_test_layout___pthread_internal_list() {
    assert_eq!(::std::mem::size_of::<__pthread_internal_list>() , 16usize ,
               concat ! (
               "Size of: " , stringify ! ( __pthread_internal_list ) ));
    assert_eq! (::std::mem::align_of::<__pthread_internal_list>() , 8usize ,
                concat ! (
                "Alignment of " , stringify ! ( __pthread_internal_list ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __pthread_internal_list ) ) . __prev as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( __pthread_internal_list
                ) , "::" , stringify ! ( __prev ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __pthread_internal_list ) ) . __next as *
                const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( __pthread_internal_list
                ) , "::" , stringify ! ( __next ) ));
}
impl Clone for __pthread_internal_list {
    fn clone(&self) -> Self { *self }
}
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct pthread_mutex_t {
    pub __data: __BindgenUnionField<pthread_mutex_t___pthread_mutex_s>,
    pub __size: __BindgenUnionField<[::std::os::raw::c_char; 40usize]>,
    pub __align: __BindgenUnionField<::std::os::raw::c_long>,
    pub bindgen_union_field: [u64; 5usize],
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct pthread_mutex_t___pthread_mutex_s {
    pub __lock: ::std::os::raw::c_int,
    pub __count: ::std::os::raw::c_uint,
    pub __owner: ::std::os::raw::c_int,
    pub __nusers: ::std::os::raw::c_uint,
    pub __kind: ::std::os::raw::c_int,
    pub __spins: ::std::os::raw::c_short,
    pub __elision: ::std::os::raw::c_short,
    pub __list: __pthread_list_t,
}
#[test]
fn bindgen_test_layout_pthread_mutex_t___pthread_mutex_s() {
    assert_eq!(::std::mem::size_of::<pthread_mutex_t___pthread_mutex_s>() ,
               40usize , concat ! (
               "Size of: " , stringify ! ( pthread_mutex_t___pthread_mutex_s )
               ));
    assert_eq! (::std::mem::align_of::<pthread_mutex_t___pthread_mutex_s>() ,
                8usize , concat ! (
                "Alignment of " , stringify ! (
                pthread_mutex_t___pthread_mutex_s ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_mutex_t___pthread_mutex_s ) ) .
                __lock as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_mutex_t___pthread_mutex_s ) , "::" , stringify ! (
                __lock ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_mutex_t___pthread_mutex_s ) ) .
                __count as * const _ as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_mutex_t___pthread_mutex_s ) , "::" , stringify ! (
                __count ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_mutex_t___pthread_mutex_s ) ) .
                __owner as * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_mutex_t___pthread_mutex_s ) , "::" , stringify ! (
                __owner ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_mutex_t___pthread_mutex_s ) ) .
                __nusers as * const _ as usize } , 12usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_mutex_t___pthread_mutex_s ) , "::" , stringify ! (
                __nusers ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_mutex_t___pthread_mutex_s ) ) .
                __kind as * const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_mutex_t___pthread_mutex_s ) , "::" , stringify ! (
                __kind ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_mutex_t___pthread_mutex_s ) ) .
                __spins as * const _ as usize } , 20usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_mutex_t___pthread_mutex_s ) , "::" , stringify ! (
                __spins ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_mutex_t___pthread_mutex_s ) ) .
                __elision as * const _ as usize } , 22usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_mutex_t___pthread_mutex_s ) , "::" , stringify ! (
                __elision ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_mutex_t___pthread_mutex_s ) ) .
                __list as * const _ as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_mutex_t___pthread_mutex_s ) , "::" , stringify ! (
                __list ) ));
}
impl Clone for pthread_mutex_t___pthread_mutex_s {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_pthread_mutex_t() {
    assert_eq!(::std::mem::size_of::<pthread_mutex_t>() , 40usize , concat ! (
               "Size of: " , stringify ! ( pthread_mutex_t ) ));
    assert_eq! (::std::mem::align_of::<pthread_mutex_t>() , 8usize , concat !
                ( "Alignment of " , stringify ! ( pthread_mutex_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_mutex_t ) ) . __data as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( pthread_mutex_t ) ,
                "::" , stringify ! ( __data ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_mutex_t ) ) . __size as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( pthread_mutex_t ) ,
                "::" , stringify ! ( __size ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_mutex_t ) ) . __align as * const
                _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( pthread_mutex_t ) ,
                "::" , stringify ! ( __align ) ));
}
impl Clone for pthread_mutex_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct pthread_mutexattr_t {
    pub __size: __BindgenUnionField<[::std::os::raw::c_char; 4usize]>,
    pub __align: __BindgenUnionField<::std::os::raw::c_int>,
    pub bindgen_union_field: u32,
}
#[test]
fn bindgen_test_layout_pthread_mutexattr_t() {
    assert_eq!(::std::mem::size_of::<pthread_mutexattr_t>() , 4usize , concat
               ! ( "Size of: " , stringify ! ( pthread_mutexattr_t ) ));
    assert_eq! (::std::mem::align_of::<pthread_mutexattr_t>() , 4usize ,
                concat ! (
                "Alignment of " , stringify ! ( pthread_mutexattr_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_mutexattr_t ) ) . __size as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( pthread_mutexattr_t ) ,
                "::" , stringify ! ( __size ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_mutexattr_t ) ) . __align as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( pthread_mutexattr_t ) ,
                "::" , stringify ! ( __align ) ));
}
impl Clone for pthread_mutexattr_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct pthread_cond_t {
    pub __data: __BindgenUnionField<pthread_cond_t__bindgen_ty_1>,
    pub __size: __BindgenUnionField<[::std::os::raw::c_char; 48usize]>,
    pub __align: __BindgenUnionField<::std::os::raw::c_longlong>,
    pub bindgen_union_field: [u64; 6usize],
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct pthread_cond_t__bindgen_ty_1 {
    pub __bindgen_anon_1: pthread_cond_t__bindgen_ty_1__bindgen_ty_1,
    pub __bindgen_anon_2: pthread_cond_t__bindgen_ty_1__bindgen_ty_2,
    pub __g_refs: [::std::os::raw::c_uint; 2usize],
    pub __g_size: [::std::os::raw::c_uint; 2usize],
    pub __g1_orig_size: ::std::os::raw::c_uint,
    pub __wrefs: ::std::os::raw::c_uint,
    pub __g_signals: [::std::os::raw::c_uint; 2usize],
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct pthread_cond_t__bindgen_ty_1__bindgen_ty_1 {
    pub __wseq: __BindgenUnionField<::std::os::raw::c_ulonglong>,
    pub __wseq32: __BindgenUnionField<pthread_cond_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1>,
    pub bindgen_union_field: u64,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct pthread_cond_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_pthread_cond_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<pthread_cond_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1>()
               , 8usize , concat ! (
               "Size of: " , stringify ! (
               pthread_cond_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 ) ));
    assert_eq! (::std::mem::align_of::<pthread_cond_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1>()
                , 4usize , concat ! (
                "Alignment of " , stringify ! (
                pthread_cond_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 ) ));
    assert_eq! (unsafe {
                & (
                * (
                0 as * const
                pthread_cond_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 ) ) .
                __low as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_cond_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 ) ,
                "::" , stringify ! ( __low ) ));
    assert_eq! (unsafe {
                & (
                * (
                0 as * const
                pthread_cond_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 ) ) .
                __high as * const _ as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_cond_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 ) ,
                "::" , stringify ! ( __high ) ));
}
impl Clone for pthread_cond_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_pthread_cond_t__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<pthread_cond_t__bindgen_ty_1__bindgen_ty_1>()
               , 8usize , concat ! (
               "Size of: " , stringify ! (
               pthread_cond_t__bindgen_ty_1__bindgen_ty_1 ) ));
    assert_eq! (::std::mem::align_of::<pthread_cond_t__bindgen_ty_1__bindgen_ty_1>()
                , 8usize , concat ! (
                "Alignment of " , stringify ! (
                pthread_cond_t__bindgen_ty_1__bindgen_ty_1 ) ));
    assert_eq! (unsafe {
                & (
                * ( 0 as * const pthread_cond_t__bindgen_ty_1__bindgen_ty_1 )
                ) . __wseq as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_cond_t__bindgen_ty_1__bindgen_ty_1 ) , "::" ,
                stringify ! ( __wseq ) ));
    assert_eq! (unsafe {
                & (
                * ( 0 as * const pthread_cond_t__bindgen_ty_1__bindgen_ty_1 )
                ) . __wseq32 as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_cond_t__bindgen_ty_1__bindgen_ty_1 ) , "::" ,
                stringify ! ( __wseq32 ) ));
}
impl Clone for pthread_cond_t__bindgen_ty_1__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct pthread_cond_t__bindgen_ty_1__bindgen_ty_2 {
    pub __g1_start: __BindgenUnionField<::std::os::raw::c_ulonglong>,
    pub __g1_start32: __BindgenUnionField<pthread_cond_t__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1>,
    pub bindgen_union_field: u64,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct pthread_cond_t__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_pthread_cond_t__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<pthread_cond_t__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1>()
               , 8usize , concat ! (
               "Size of: " , stringify ! (
               pthread_cond_t__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1 ) ));
    assert_eq! (::std::mem::align_of::<pthread_cond_t__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1>()
                , 4usize , concat ! (
                "Alignment of " , stringify ! (
                pthread_cond_t__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1 ) ));
    assert_eq! (unsafe {
                & (
                * (
                0 as * const
                pthread_cond_t__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1 ) ) .
                __low as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_cond_t__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1 ) ,
                "::" , stringify ! ( __low ) ));
    assert_eq! (unsafe {
                & (
                * (
                0 as * const
                pthread_cond_t__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1 ) ) .
                __high as * const _ as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_cond_t__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1 ) ,
                "::" , stringify ! ( __high ) ));
}
impl Clone for pthread_cond_t__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_pthread_cond_t__bindgen_ty_1__bindgen_ty_2() {
    assert_eq!(::std::mem::size_of::<pthread_cond_t__bindgen_ty_1__bindgen_ty_2>()
               , 8usize , concat ! (
               "Size of: " , stringify ! (
               pthread_cond_t__bindgen_ty_1__bindgen_ty_2 ) ));
    assert_eq! (::std::mem::align_of::<pthread_cond_t__bindgen_ty_1__bindgen_ty_2>()
                , 8usize , concat ! (
                "Alignment of " , stringify ! (
                pthread_cond_t__bindgen_ty_1__bindgen_ty_2 ) ));
    assert_eq! (unsafe {
                & (
                * ( 0 as * const pthread_cond_t__bindgen_ty_1__bindgen_ty_2 )
                ) . __g1_start as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_cond_t__bindgen_ty_1__bindgen_ty_2 ) , "::" ,
                stringify ! ( __g1_start ) ));
    assert_eq! (unsafe {
                & (
                * ( 0 as * const pthread_cond_t__bindgen_ty_1__bindgen_ty_2 )
                ) . __g1_start32 as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_cond_t__bindgen_ty_1__bindgen_ty_2 ) , "::" ,
                stringify ! ( __g1_start32 ) ));
}
impl Clone for pthread_cond_t__bindgen_ty_1__bindgen_ty_2 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_pthread_cond_t__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<pthread_cond_t__bindgen_ty_1>() , 48usize
               , concat ! (
               "Size of: " , stringify ! ( pthread_cond_t__bindgen_ty_1 ) ));
    assert_eq! (::std::mem::align_of::<pthread_cond_t__bindgen_ty_1>() ,
                8usize , concat ! (
                "Alignment of " , stringify ! ( pthread_cond_t__bindgen_ty_1 )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_cond_t__bindgen_ty_1 ) ) .
                __g_refs as * const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_cond_t__bindgen_ty_1 ) , "::" , stringify ! ( __g_refs
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_cond_t__bindgen_ty_1 ) ) .
                __g_size as * const _ as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_cond_t__bindgen_ty_1 ) , "::" , stringify ! ( __g_size
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_cond_t__bindgen_ty_1 ) ) .
                __g1_orig_size as * const _ as usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_cond_t__bindgen_ty_1 ) , "::" , stringify ! (
                __g1_orig_size ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_cond_t__bindgen_ty_1 ) ) .
                __wrefs as * const _ as usize } , 36usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_cond_t__bindgen_ty_1 ) , "::" , stringify ! ( __wrefs
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_cond_t__bindgen_ty_1 ) ) .
                __g_signals as * const _ as usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_cond_t__bindgen_ty_1 ) , "::" , stringify ! (
                __g_signals ) ));
}
impl Clone for pthread_cond_t__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_pthread_cond_t() {
    assert_eq!(::std::mem::size_of::<pthread_cond_t>() , 48usize , concat ! (
               "Size of: " , stringify ! ( pthread_cond_t ) ));
    assert_eq! (::std::mem::align_of::<pthread_cond_t>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( pthread_cond_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_cond_t ) ) . __data as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( pthread_cond_t ) , "::"
                , stringify ! ( __data ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_cond_t ) ) . __size as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( pthread_cond_t ) , "::"
                , stringify ! ( __size ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_cond_t ) ) . __align as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( pthread_cond_t ) , "::"
                , stringify ! ( __align ) ));
}
impl Clone for pthread_cond_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct pthread_condattr_t {
    pub __size: __BindgenUnionField<[::std::os::raw::c_char; 4usize]>,
    pub __align: __BindgenUnionField<::std::os::raw::c_int>,
    pub bindgen_union_field: u32,
}
#[test]
fn bindgen_test_layout_pthread_condattr_t() {
    assert_eq!(::std::mem::size_of::<pthread_condattr_t>() , 4usize , concat !
               ( "Size of: " , stringify ! ( pthread_condattr_t ) ));
    assert_eq! (::std::mem::align_of::<pthread_condattr_t>() , 4usize , concat
                ! ( "Alignment of " , stringify ! ( pthread_condattr_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_condattr_t ) ) . __size as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( pthread_condattr_t ) ,
                "::" , stringify ! ( __size ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_condattr_t ) ) . __align as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( pthread_condattr_t ) ,
                "::" , stringify ! ( __align ) ));
}
impl Clone for pthread_condattr_t {
    fn clone(&self) -> Self { *self }
}
pub type pthread_key_t = ::std::os::raw::c_uint;
pub type pthread_once_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct pthread_rwlock_t {
    pub __data: __BindgenUnionField<pthread_rwlock_t__bindgen_ty_1>,
    pub __size: __BindgenUnionField<[::std::os::raw::c_char; 56usize]>,
    pub __align: __BindgenUnionField<::std::os::raw::c_long>,
    pub bindgen_union_field: [u64; 7usize],
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct pthread_rwlock_t__bindgen_ty_1 {
    pub __readers: ::std::os::raw::c_uint,
    pub __writers: ::std::os::raw::c_uint,
    pub __wrphase_futex: ::std::os::raw::c_uint,
    pub __writers_futex: ::std::os::raw::c_uint,
    pub __pad3: ::std::os::raw::c_uint,
    pub __pad4: ::std::os::raw::c_uint,
    pub __cur_writer: ::std::os::raw::c_int,
    pub __shared: ::std::os::raw::c_int,
    pub __rwelision: ::std::os::raw::c_schar,
    pub __pad1: [::std::os::raw::c_uchar; 7usize],
    pub __pad2: ::std::os::raw::c_ulong,
    pub __flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_pthread_rwlock_t__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<pthread_rwlock_t__bindgen_ty_1>() ,
               56usize , concat ! (
               "Size of: " , stringify ! ( pthread_rwlock_t__bindgen_ty_1 )
               ));
    assert_eq! (::std::mem::align_of::<pthread_rwlock_t__bindgen_ty_1>() ,
                8usize , concat ! (
                "Alignment of " , stringify ! ( pthread_rwlock_t__bindgen_ty_1
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_rwlock_t__bindgen_ty_1 ) ) .
                __readers as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_rwlock_t__bindgen_ty_1 ) , "::" , stringify ! (
                __readers ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_rwlock_t__bindgen_ty_1 ) ) .
                __writers as * const _ as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_rwlock_t__bindgen_ty_1 ) , "::" , stringify ! (
                __writers ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_rwlock_t__bindgen_ty_1 ) ) .
                __wrphase_futex as * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_rwlock_t__bindgen_ty_1 ) , "::" , stringify ! (
                __wrphase_futex ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_rwlock_t__bindgen_ty_1 ) ) .
                __writers_futex as * const _ as usize } , 12usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_rwlock_t__bindgen_ty_1 ) , "::" , stringify ! (
                __writers_futex ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_rwlock_t__bindgen_ty_1 ) ) .
                __pad3 as * const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_rwlock_t__bindgen_ty_1 ) , "::" , stringify ! ( __pad3
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_rwlock_t__bindgen_ty_1 ) ) .
                __pad4 as * const _ as usize } , 20usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_rwlock_t__bindgen_ty_1 ) , "::" , stringify ! ( __pad4
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_rwlock_t__bindgen_ty_1 ) ) .
                __cur_writer as * const _ as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_rwlock_t__bindgen_ty_1 ) , "::" , stringify ! (
                __cur_writer ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_rwlock_t__bindgen_ty_1 ) ) .
                __shared as * const _ as usize } , 28usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_rwlock_t__bindgen_ty_1 ) , "::" , stringify ! (
                __shared ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_rwlock_t__bindgen_ty_1 ) ) .
                __rwelision as * const _ as usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_rwlock_t__bindgen_ty_1 ) , "::" , stringify ! (
                __rwelision ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_rwlock_t__bindgen_ty_1 ) ) .
                __pad1 as * const _ as usize } , 33usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_rwlock_t__bindgen_ty_1 ) , "::" , stringify ! ( __pad1
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_rwlock_t__bindgen_ty_1 ) ) .
                __pad2 as * const _ as usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_rwlock_t__bindgen_ty_1 ) , "::" , stringify ! ( __pad2
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_rwlock_t__bindgen_ty_1 ) ) .
                __flags as * const _ as usize } , 48usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_rwlock_t__bindgen_ty_1 ) , "::" , stringify ! (
                __flags ) ));
}
impl Clone for pthread_rwlock_t__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_pthread_rwlock_t() {
    assert_eq!(::std::mem::size_of::<pthread_rwlock_t>() , 56usize , concat !
               ( "Size of: " , stringify ! ( pthread_rwlock_t ) ));
    assert_eq! (::std::mem::align_of::<pthread_rwlock_t>() , 8usize , concat !
                ( "Alignment of " , stringify ! ( pthread_rwlock_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_rwlock_t ) ) . __data as * const
                _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( pthread_rwlock_t ) ,
                "::" , stringify ! ( __data ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_rwlock_t ) ) . __size as * const
                _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( pthread_rwlock_t ) ,
                "::" , stringify ! ( __size ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_rwlock_t ) ) . __align as * const
                _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( pthread_rwlock_t ) ,
                "::" , stringify ! ( __align ) ));
}
impl Clone for pthread_rwlock_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct pthread_rwlockattr_t {
    pub __size: __BindgenUnionField<[::std::os::raw::c_char; 8usize]>,
    pub __align: __BindgenUnionField<::std::os::raw::c_long>,
    pub bindgen_union_field: u64,
}
#[test]
fn bindgen_test_layout_pthread_rwlockattr_t() {
    assert_eq!(::std::mem::size_of::<pthread_rwlockattr_t>() , 8usize , concat
               ! ( "Size of: " , stringify ! ( pthread_rwlockattr_t ) ));
    assert_eq! (::std::mem::align_of::<pthread_rwlockattr_t>() , 8usize ,
                concat ! (
                "Alignment of " , stringify ! ( pthread_rwlockattr_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_rwlockattr_t ) ) . __size as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( pthread_rwlockattr_t )
                , "::" , stringify ! ( __size ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_rwlockattr_t ) ) . __align as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( pthread_rwlockattr_t )
                , "::" , stringify ! ( __align ) ));
}
impl Clone for pthread_rwlockattr_t {
    fn clone(&self) -> Self { *self }
}
pub type pthread_spinlock_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct pthread_barrier_t {
    pub __size: __BindgenUnionField<[::std::os::raw::c_char; 32usize]>,
    pub __align: __BindgenUnionField<::std::os::raw::c_long>,
    pub bindgen_union_field: [u64; 4usize],
}
#[test]
fn bindgen_test_layout_pthread_barrier_t() {
    assert_eq!(::std::mem::size_of::<pthread_barrier_t>() , 32usize , concat !
               ( "Size of: " , stringify ! ( pthread_barrier_t ) ));
    assert_eq! (::std::mem::align_of::<pthread_barrier_t>() , 8usize , concat
                ! ( "Alignment of " , stringify ! ( pthread_barrier_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_barrier_t ) ) . __size as * const
                _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( pthread_barrier_t ) ,
                "::" , stringify ! ( __size ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_barrier_t ) ) . __align as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( pthread_barrier_t ) ,
                "::" , stringify ! ( __align ) ));
}
impl Clone for pthread_barrier_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct pthread_barrierattr_t {
    pub __size: __BindgenUnionField<[::std::os::raw::c_char; 4usize]>,
    pub __align: __BindgenUnionField<::std::os::raw::c_int>,
    pub bindgen_union_field: u32,
}
#[test]
fn bindgen_test_layout_pthread_barrierattr_t() {
    assert_eq!(::std::mem::size_of::<pthread_barrierattr_t>() , 4usize ,
               concat ! ( "Size of: " , stringify ! ( pthread_barrierattr_t )
               ));
    assert_eq! (::std::mem::align_of::<pthread_barrierattr_t>() , 4usize ,
                concat ! (
                "Alignment of " , stringify ! ( pthread_barrierattr_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_barrierattr_t ) ) . __size as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( pthread_barrierattr_t )
                , "::" , stringify ! ( __size ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_barrierattr_t ) ) . __align as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( pthread_barrierattr_t )
                , "::" , stringify ! ( __align ) ));
}
impl Clone for pthread_barrierattr_t {
    fn clone(&self) -> Self { *self }
}
pub type socklen_t = __socklen_t;
extern "C" {
    pub fn access(__name: *const ::std::os::raw::c_char,
                  __type: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn euidaccess(__name: *const ::std::os::raw::c_char,
                      __type: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn eaccess(__name: *const ::std::os::raw::c_char,
                   __type: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn faccessat(__fd: ::std::os::raw::c_int,
                     __file: *const ::std::os::raw::c_char,
                     __type: ::std::os::raw::c_int,
                     __flag: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lseek(__fd: ::std::os::raw::c_int, __offset: __off_t,
                 __whence: ::std::os::raw::c_int) -> __off_t;
}
extern "C" {
    pub fn lseek64(__fd: ::std::os::raw::c_int, __offset: __off64_t,
                   __whence: ::std::os::raw::c_int) -> __off64_t;
}
extern "C" {
    pub fn close(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn read(__fd: ::std::os::raw::c_int,
                __buf: *mut ::std::os::raw::c_void, __nbytes: usize) -> isize;
}
extern "C" {
    pub fn write(__fd: ::std::os::raw::c_int,
                 __buf: *const ::std::os::raw::c_void, __n: usize) -> isize;
}
extern "C" {
    pub fn pread(__fd: ::std::os::raw::c_int,
                 __buf: *mut ::std::os::raw::c_void, __nbytes: usize,
                 __offset: __off_t) -> isize;
}
extern "C" {
    pub fn pwrite(__fd: ::std::os::raw::c_int,
                  __buf: *const ::std::os::raw::c_void, __n: usize,
                  __offset: __off_t) -> isize;
}
extern "C" {
    pub fn pread64(__fd: ::std::os::raw::c_int,
                   __buf: *mut ::std::os::raw::c_void, __nbytes: usize,
                   __offset: __off64_t) -> isize;
}
extern "C" {
    pub fn pwrite64(__fd: ::std::os::raw::c_int,
                    __buf: *const ::std::os::raw::c_void, __n: usize,
                    __offset: __off64_t) -> isize;
}
extern "C" {
    pub fn pipe(__pipedes: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pipe2(__pipedes: *mut ::std::os::raw::c_int,
                 __flags: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn alarm(__seconds: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn sleep(__seconds: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn ualarm(__value: __useconds_t, __interval: __useconds_t)
     -> __useconds_t;
}
extern "C" {
    pub fn usleep(__useconds: __useconds_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pause() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chown(__file: *const ::std::os::raw::c_char, __owner: __uid_t,
                 __group: __gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fchown(__fd: ::std::os::raw::c_int, __owner: __uid_t,
                  __group: __gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lchown(__file: *const ::std::os::raw::c_char, __owner: __uid_t,
                  __group: __gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fchownat(__fd: ::std::os::raw::c_int,
                    __file: *const ::std::os::raw::c_char, __owner: __uid_t,
                    __group: __gid_t, __flag: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chdir(__path: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fchdir(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getcwd(__buf: *mut ::std::os::raw::c_char, __size: usize)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn get_current_dir_name() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getwd(__buf: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn dup(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dup2(__fd: ::std::os::raw::c_int, __fd2: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dup3(__fd: ::std::os::raw::c_int, __fd2: ::std::os::raw::c_int,
                __flags: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "__environ"]
    pub static mut __environ: *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "environ"]
    pub static mut environ: *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn execve(__path: *const ::std::os::raw::c_char,
                  __argv: *const *const ::std::os::raw::c_char,
                  __envp: *const *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fexecve(__fd: ::std::os::raw::c_int,
                   __argv: *const *const ::std::os::raw::c_char,
                   __envp: *const *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execv(__path: *const ::std::os::raw::c_char,
                 __argv: *const *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execle(__path: *const ::std::os::raw::c_char,
                  __arg: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execl(__path: *const ::std::os::raw::c_char,
                 __arg: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execvp(__file: *const ::std::os::raw::c_char,
                  __argv: *const *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execlp(__file: *const ::std::os::raw::c_char,
                  __arg: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execvpe(__file: *const ::std::os::raw::c_char,
                   __argv: *const *const ::std::os::raw::c_char,
                   __envp: *const *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nice(__inc: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _exit(__status: ::std::os::raw::c_int);
}
pub const _PC_LINK_MAX: _bindgen_ty_1 = _bindgen_ty_1::_PC_LINK_MAX;
pub const _PC_MAX_CANON: _bindgen_ty_1 = _bindgen_ty_1::_PC_MAX_CANON;
pub const _PC_MAX_INPUT: _bindgen_ty_1 = _bindgen_ty_1::_PC_MAX_INPUT;
pub const _PC_NAME_MAX: _bindgen_ty_1 = _bindgen_ty_1::_PC_NAME_MAX;
pub const _PC_PATH_MAX: _bindgen_ty_1 = _bindgen_ty_1::_PC_PATH_MAX;
pub const _PC_PIPE_BUF: _bindgen_ty_1 = _bindgen_ty_1::_PC_PIPE_BUF;
pub const _PC_CHOWN_RESTRICTED: _bindgen_ty_1 =
    _bindgen_ty_1::_PC_CHOWN_RESTRICTED;
pub const _PC_NO_TRUNC: _bindgen_ty_1 = _bindgen_ty_1::_PC_NO_TRUNC;
pub const _PC_VDISABLE: _bindgen_ty_1 = _bindgen_ty_1::_PC_VDISABLE;
pub const _PC_SYNC_IO: _bindgen_ty_1 = _bindgen_ty_1::_PC_SYNC_IO;
pub const _PC_ASYNC_IO: _bindgen_ty_1 = _bindgen_ty_1::_PC_ASYNC_IO;
pub const _PC_PRIO_IO: _bindgen_ty_1 = _bindgen_ty_1::_PC_PRIO_IO;
pub const _PC_SOCK_MAXBUF: _bindgen_ty_1 = _bindgen_ty_1::_PC_SOCK_MAXBUF;
pub const _PC_FILESIZEBITS: _bindgen_ty_1 = _bindgen_ty_1::_PC_FILESIZEBITS;
pub const _PC_REC_INCR_XFER_SIZE: _bindgen_ty_1 =
    _bindgen_ty_1::_PC_REC_INCR_XFER_SIZE;
pub const _PC_REC_MAX_XFER_SIZE: _bindgen_ty_1 =
    _bindgen_ty_1::_PC_REC_MAX_XFER_SIZE;
pub const _PC_REC_MIN_XFER_SIZE: _bindgen_ty_1 =
    _bindgen_ty_1::_PC_REC_MIN_XFER_SIZE;
pub const _PC_REC_XFER_ALIGN: _bindgen_ty_1 =
    _bindgen_ty_1::_PC_REC_XFER_ALIGN;
pub const _PC_ALLOC_SIZE_MIN: _bindgen_ty_1 =
    _bindgen_ty_1::_PC_ALLOC_SIZE_MIN;
pub const _PC_SYMLINK_MAX: _bindgen_ty_1 = _bindgen_ty_1::_PC_SYMLINK_MAX;
pub const _PC_2_SYMLINKS: _bindgen_ty_1 = _bindgen_ty_1::_PC_2_SYMLINKS;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_1 {
    _PC_LINK_MAX = 0,
    _PC_MAX_CANON = 1,
    _PC_MAX_INPUT = 2,
    _PC_NAME_MAX = 3,
    _PC_PATH_MAX = 4,
    _PC_PIPE_BUF = 5,
    _PC_CHOWN_RESTRICTED = 6,
    _PC_NO_TRUNC = 7,
    _PC_VDISABLE = 8,
    _PC_SYNC_IO = 9,
    _PC_ASYNC_IO = 10,
    _PC_PRIO_IO = 11,
    _PC_SOCK_MAXBUF = 12,
    _PC_FILESIZEBITS = 13,
    _PC_REC_INCR_XFER_SIZE = 14,
    _PC_REC_MAX_XFER_SIZE = 15,
    _PC_REC_MIN_XFER_SIZE = 16,
    _PC_REC_XFER_ALIGN = 17,
    _PC_ALLOC_SIZE_MIN = 18,
    _PC_SYMLINK_MAX = 19,
    _PC_2_SYMLINKS = 20,
}
pub const _SC_ARG_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_ARG_MAX;
pub const _SC_CHILD_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_CHILD_MAX;
pub const _SC_CLK_TCK: _bindgen_ty_2 = _bindgen_ty_2::_SC_CLK_TCK;
pub const _SC_NGROUPS_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_NGROUPS_MAX;
pub const _SC_OPEN_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_OPEN_MAX;
pub const _SC_STREAM_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_STREAM_MAX;
pub const _SC_TZNAME_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_TZNAME_MAX;
pub const _SC_JOB_CONTROL: _bindgen_ty_2 = _bindgen_ty_2::_SC_JOB_CONTROL;
pub const _SC_SAVED_IDS: _bindgen_ty_2 = _bindgen_ty_2::_SC_SAVED_IDS;
pub const _SC_REALTIME_SIGNALS: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_REALTIME_SIGNALS;
pub const _SC_PRIORITY_SCHEDULING: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_PRIORITY_SCHEDULING;
pub const _SC_TIMERS: _bindgen_ty_2 = _bindgen_ty_2::_SC_TIMERS;
pub const _SC_ASYNCHRONOUS_IO: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_ASYNCHRONOUS_IO;
pub const _SC_PRIORITIZED_IO: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_PRIORITIZED_IO;
pub const _SC_SYNCHRONIZED_IO: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_SYNCHRONIZED_IO;
pub const _SC_FSYNC: _bindgen_ty_2 = _bindgen_ty_2::_SC_FSYNC;
pub const _SC_MAPPED_FILES: _bindgen_ty_2 = _bindgen_ty_2::_SC_MAPPED_FILES;
pub const _SC_MEMLOCK: _bindgen_ty_2 = _bindgen_ty_2::_SC_MEMLOCK;
pub const _SC_MEMLOCK_RANGE: _bindgen_ty_2 = _bindgen_ty_2::_SC_MEMLOCK_RANGE;
pub const _SC_MEMORY_PROTECTION: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_MEMORY_PROTECTION;
pub const _SC_MESSAGE_PASSING: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_MESSAGE_PASSING;
pub const _SC_SEMAPHORES: _bindgen_ty_2 = _bindgen_ty_2::_SC_SEMAPHORES;
pub const _SC_SHARED_MEMORY_OBJECTS: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_SHARED_MEMORY_OBJECTS;
pub const _SC_AIO_LISTIO_MAX: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_AIO_LISTIO_MAX;
pub const _SC_AIO_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_AIO_MAX;
pub const _SC_AIO_PRIO_DELTA_MAX: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_AIO_PRIO_DELTA_MAX;
pub const _SC_DELAYTIMER_MAX: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_DELAYTIMER_MAX;
pub const _SC_MQ_OPEN_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_MQ_OPEN_MAX;
pub const _SC_MQ_PRIO_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_MQ_PRIO_MAX;
pub const _SC_VERSION: _bindgen_ty_2 = _bindgen_ty_2::_SC_VERSION;
pub const _SC_PAGESIZE: _bindgen_ty_2 = _bindgen_ty_2::_SC_PAGESIZE;
pub const _SC_RTSIG_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_RTSIG_MAX;
pub const _SC_SEM_NSEMS_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_SEM_NSEMS_MAX;
pub const _SC_SEM_VALUE_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_SEM_VALUE_MAX;
pub const _SC_SIGQUEUE_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_SIGQUEUE_MAX;
pub const _SC_TIMER_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_TIMER_MAX;
pub const _SC_BC_BASE_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_BC_BASE_MAX;
pub const _SC_BC_DIM_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_BC_DIM_MAX;
pub const _SC_BC_SCALE_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_BC_SCALE_MAX;
pub const _SC_BC_STRING_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_BC_STRING_MAX;
pub const _SC_COLL_WEIGHTS_MAX: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_COLL_WEIGHTS_MAX;
pub const _SC_EQUIV_CLASS_MAX: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_EQUIV_CLASS_MAX;
pub const _SC_EXPR_NEST_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_EXPR_NEST_MAX;
pub const _SC_LINE_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_LINE_MAX;
pub const _SC_RE_DUP_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_RE_DUP_MAX;
pub const _SC_CHARCLASS_NAME_MAX: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_CHARCLASS_NAME_MAX;
pub const _SC_2_VERSION: _bindgen_ty_2 = _bindgen_ty_2::_SC_2_VERSION;
pub const _SC_2_C_BIND: _bindgen_ty_2 = _bindgen_ty_2::_SC_2_C_BIND;
pub const _SC_2_C_DEV: _bindgen_ty_2 = _bindgen_ty_2::_SC_2_C_DEV;
pub const _SC_2_FORT_DEV: _bindgen_ty_2 = _bindgen_ty_2::_SC_2_FORT_DEV;
pub const _SC_2_FORT_RUN: _bindgen_ty_2 = _bindgen_ty_2::_SC_2_FORT_RUN;
pub const _SC_2_SW_DEV: _bindgen_ty_2 = _bindgen_ty_2::_SC_2_SW_DEV;
pub const _SC_2_LOCALEDEF: _bindgen_ty_2 = _bindgen_ty_2::_SC_2_LOCALEDEF;
pub const _SC_PII: _bindgen_ty_2 = _bindgen_ty_2::_SC_PII;
pub const _SC_PII_XTI: _bindgen_ty_2 = _bindgen_ty_2::_SC_PII_XTI;
pub const _SC_PII_SOCKET: _bindgen_ty_2 = _bindgen_ty_2::_SC_PII_SOCKET;
pub const _SC_PII_INTERNET: _bindgen_ty_2 = _bindgen_ty_2::_SC_PII_INTERNET;
pub const _SC_PII_OSI: _bindgen_ty_2 = _bindgen_ty_2::_SC_PII_OSI;
pub const _SC_POLL: _bindgen_ty_2 = _bindgen_ty_2::_SC_POLL;
pub const _SC_SELECT: _bindgen_ty_2 = _bindgen_ty_2::_SC_SELECT;
pub const _SC_UIO_MAXIOV: _bindgen_ty_2 = _bindgen_ty_2::_SC_UIO_MAXIOV;
pub const _SC_IOV_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_UIO_MAXIOV;
pub const _SC_PII_INTERNET_STREAM: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_PII_INTERNET_STREAM;
pub const _SC_PII_INTERNET_DGRAM: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_PII_INTERNET_DGRAM;
pub const _SC_PII_OSI_COTS: _bindgen_ty_2 = _bindgen_ty_2::_SC_PII_OSI_COTS;
pub const _SC_PII_OSI_CLTS: _bindgen_ty_2 = _bindgen_ty_2::_SC_PII_OSI_CLTS;
pub const _SC_PII_OSI_M: _bindgen_ty_2 = _bindgen_ty_2::_SC_PII_OSI_M;
pub const _SC_T_IOV_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_T_IOV_MAX;
pub const _SC_THREADS: _bindgen_ty_2 = _bindgen_ty_2::_SC_THREADS;
pub const _SC_THREAD_SAFE_FUNCTIONS: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_THREAD_SAFE_FUNCTIONS;
pub const _SC_GETGR_R_SIZE_MAX: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_GETGR_R_SIZE_MAX;
pub const _SC_GETPW_R_SIZE_MAX: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_GETPW_R_SIZE_MAX;
pub const _SC_LOGIN_NAME_MAX: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_LOGIN_NAME_MAX;
pub const _SC_TTY_NAME_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_TTY_NAME_MAX;
pub const _SC_THREAD_DESTRUCTOR_ITERATIONS: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_THREAD_DESTRUCTOR_ITERATIONS;
pub const _SC_THREAD_KEYS_MAX: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_THREAD_KEYS_MAX;
pub const _SC_THREAD_STACK_MIN: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_THREAD_STACK_MIN;
pub const _SC_THREAD_THREADS_MAX: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_THREAD_THREADS_MAX;
pub const _SC_THREAD_ATTR_STACKADDR: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_THREAD_ATTR_STACKADDR;
pub const _SC_THREAD_ATTR_STACKSIZE: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_THREAD_ATTR_STACKSIZE;
pub const _SC_THREAD_PRIORITY_SCHEDULING: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_THREAD_PRIORITY_SCHEDULING;
pub const _SC_THREAD_PRIO_INHERIT: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_THREAD_PRIO_INHERIT;
pub const _SC_THREAD_PRIO_PROTECT: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_THREAD_PRIO_PROTECT;
pub const _SC_THREAD_PROCESS_SHARED: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_THREAD_PROCESS_SHARED;
pub const _SC_NPROCESSORS_CONF: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_NPROCESSORS_CONF;
pub const _SC_NPROCESSORS_ONLN: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_NPROCESSORS_ONLN;
pub const _SC_PHYS_PAGES: _bindgen_ty_2 = _bindgen_ty_2::_SC_PHYS_PAGES;
pub const _SC_AVPHYS_PAGES: _bindgen_ty_2 = _bindgen_ty_2::_SC_AVPHYS_PAGES;
pub const _SC_ATEXIT_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_ATEXIT_MAX;
pub const _SC_PASS_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_PASS_MAX;
pub const _SC_XOPEN_VERSION: _bindgen_ty_2 = _bindgen_ty_2::_SC_XOPEN_VERSION;
pub const _SC_XOPEN_XCU_VERSION: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_XOPEN_XCU_VERSION;
pub const _SC_XOPEN_UNIX: _bindgen_ty_2 = _bindgen_ty_2::_SC_XOPEN_UNIX;
pub const _SC_XOPEN_CRYPT: _bindgen_ty_2 = _bindgen_ty_2::_SC_XOPEN_CRYPT;
pub const _SC_XOPEN_ENH_I18N: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_XOPEN_ENH_I18N;
pub const _SC_XOPEN_SHM: _bindgen_ty_2 = _bindgen_ty_2::_SC_XOPEN_SHM;
pub const _SC_2_CHAR_TERM: _bindgen_ty_2 = _bindgen_ty_2::_SC_2_CHAR_TERM;
pub const _SC_2_C_VERSION: _bindgen_ty_2 = _bindgen_ty_2::_SC_2_C_VERSION;
pub const _SC_2_UPE: _bindgen_ty_2 = _bindgen_ty_2::_SC_2_UPE;
pub const _SC_XOPEN_XPG2: _bindgen_ty_2 = _bindgen_ty_2::_SC_XOPEN_XPG2;
pub const _SC_XOPEN_XPG3: _bindgen_ty_2 = _bindgen_ty_2::_SC_XOPEN_XPG3;
pub const _SC_XOPEN_XPG4: _bindgen_ty_2 = _bindgen_ty_2::_SC_XOPEN_XPG4;
pub const _SC_CHAR_BIT: _bindgen_ty_2 = _bindgen_ty_2::_SC_CHAR_BIT;
pub const _SC_CHAR_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_CHAR_MAX;
pub const _SC_CHAR_MIN: _bindgen_ty_2 = _bindgen_ty_2::_SC_CHAR_MIN;
pub const _SC_INT_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_INT_MAX;
pub const _SC_INT_MIN: _bindgen_ty_2 = _bindgen_ty_2::_SC_INT_MIN;
pub const _SC_LONG_BIT: _bindgen_ty_2 = _bindgen_ty_2::_SC_LONG_BIT;
pub const _SC_WORD_BIT: _bindgen_ty_2 = _bindgen_ty_2::_SC_WORD_BIT;
pub const _SC_MB_LEN_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_MB_LEN_MAX;
pub const _SC_NZERO: _bindgen_ty_2 = _bindgen_ty_2::_SC_NZERO;
pub const _SC_SSIZE_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_SSIZE_MAX;
pub const _SC_SCHAR_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_SCHAR_MAX;
pub const _SC_SCHAR_MIN: _bindgen_ty_2 = _bindgen_ty_2::_SC_SCHAR_MIN;
pub const _SC_SHRT_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_SHRT_MAX;
pub const _SC_SHRT_MIN: _bindgen_ty_2 = _bindgen_ty_2::_SC_SHRT_MIN;
pub const _SC_UCHAR_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_UCHAR_MAX;
pub const _SC_UINT_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_UINT_MAX;
pub const _SC_ULONG_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_ULONG_MAX;
pub const _SC_USHRT_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_USHRT_MAX;
pub const _SC_NL_ARGMAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_NL_ARGMAX;
pub const _SC_NL_LANGMAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_NL_LANGMAX;
pub const _SC_NL_MSGMAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_NL_MSGMAX;
pub const _SC_NL_NMAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_NL_NMAX;
pub const _SC_NL_SETMAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_NL_SETMAX;
pub const _SC_NL_TEXTMAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_NL_TEXTMAX;
pub const _SC_XBS5_ILP32_OFF32: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_XBS5_ILP32_OFF32;
pub const _SC_XBS5_ILP32_OFFBIG: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_XBS5_ILP32_OFFBIG;
pub const _SC_XBS5_LP64_OFF64: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_XBS5_LP64_OFF64;
pub const _SC_XBS5_LPBIG_OFFBIG: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_XBS5_LPBIG_OFFBIG;
pub const _SC_XOPEN_LEGACY: _bindgen_ty_2 = _bindgen_ty_2::_SC_XOPEN_LEGACY;
pub const _SC_XOPEN_REALTIME: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_XOPEN_REALTIME;
pub const _SC_XOPEN_REALTIME_THREADS: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_XOPEN_REALTIME_THREADS;
pub const _SC_ADVISORY_INFO: _bindgen_ty_2 = _bindgen_ty_2::_SC_ADVISORY_INFO;
pub const _SC_BARRIERS: _bindgen_ty_2 = _bindgen_ty_2::_SC_BARRIERS;
pub const _SC_BASE: _bindgen_ty_2 = _bindgen_ty_2::_SC_BASE;
pub const _SC_C_LANG_SUPPORT: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_C_LANG_SUPPORT;
pub const _SC_C_LANG_SUPPORT_R: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_C_LANG_SUPPORT_R;
pub const _SC_CLOCK_SELECTION: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_CLOCK_SELECTION;
pub const _SC_CPUTIME: _bindgen_ty_2 = _bindgen_ty_2::_SC_CPUTIME;
pub const _SC_THREAD_CPUTIME: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_THREAD_CPUTIME;
pub const _SC_DEVICE_IO: _bindgen_ty_2 = _bindgen_ty_2::_SC_DEVICE_IO;
pub const _SC_DEVICE_SPECIFIC: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_DEVICE_SPECIFIC;
pub const _SC_DEVICE_SPECIFIC_R: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_DEVICE_SPECIFIC_R;
pub const _SC_FD_MGMT: _bindgen_ty_2 = _bindgen_ty_2::_SC_FD_MGMT;
pub const _SC_FIFO: _bindgen_ty_2 = _bindgen_ty_2::_SC_FIFO;
pub const _SC_PIPE: _bindgen_ty_2 = _bindgen_ty_2::_SC_PIPE;
pub const _SC_FILE_ATTRIBUTES: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_FILE_ATTRIBUTES;
pub const _SC_FILE_LOCKING: _bindgen_ty_2 = _bindgen_ty_2::_SC_FILE_LOCKING;
pub const _SC_FILE_SYSTEM: _bindgen_ty_2 = _bindgen_ty_2::_SC_FILE_SYSTEM;
pub const _SC_MONOTONIC_CLOCK: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_MONOTONIC_CLOCK;
pub const _SC_MULTI_PROCESS: _bindgen_ty_2 = _bindgen_ty_2::_SC_MULTI_PROCESS;
pub const _SC_SINGLE_PROCESS: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_SINGLE_PROCESS;
pub const _SC_NETWORKING: _bindgen_ty_2 = _bindgen_ty_2::_SC_NETWORKING;
pub const _SC_READER_WRITER_LOCKS: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_READER_WRITER_LOCKS;
pub const _SC_SPIN_LOCKS: _bindgen_ty_2 = _bindgen_ty_2::_SC_SPIN_LOCKS;
pub const _SC_REGEXP: _bindgen_ty_2 = _bindgen_ty_2::_SC_REGEXP;
pub const _SC_REGEX_VERSION: _bindgen_ty_2 = _bindgen_ty_2::_SC_REGEX_VERSION;
pub const _SC_SHELL: _bindgen_ty_2 = _bindgen_ty_2::_SC_SHELL;
pub const _SC_SIGNALS: _bindgen_ty_2 = _bindgen_ty_2::_SC_SIGNALS;
pub const _SC_SPAWN: _bindgen_ty_2 = _bindgen_ty_2::_SC_SPAWN;
pub const _SC_SPORADIC_SERVER: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_SPORADIC_SERVER;
pub const _SC_THREAD_SPORADIC_SERVER: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_THREAD_SPORADIC_SERVER;
pub const _SC_SYSTEM_DATABASE: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_SYSTEM_DATABASE;
pub const _SC_SYSTEM_DATABASE_R: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_SYSTEM_DATABASE_R;
pub const _SC_TIMEOUTS: _bindgen_ty_2 = _bindgen_ty_2::_SC_TIMEOUTS;
pub const _SC_TYPED_MEMORY_OBJECTS: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_TYPED_MEMORY_OBJECTS;
pub const _SC_USER_GROUPS: _bindgen_ty_2 = _bindgen_ty_2::_SC_USER_GROUPS;
pub const _SC_USER_GROUPS_R: _bindgen_ty_2 = _bindgen_ty_2::_SC_USER_GROUPS_R;
pub const _SC_2_PBS: _bindgen_ty_2 = _bindgen_ty_2::_SC_2_PBS;
pub const _SC_2_PBS_ACCOUNTING: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_2_PBS_ACCOUNTING;
pub const _SC_2_PBS_LOCATE: _bindgen_ty_2 = _bindgen_ty_2::_SC_2_PBS_LOCATE;
pub const _SC_2_PBS_MESSAGE: _bindgen_ty_2 = _bindgen_ty_2::_SC_2_PBS_MESSAGE;
pub const _SC_2_PBS_TRACK: _bindgen_ty_2 = _bindgen_ty_2::_SC_2_PBS_TRACK;
pub const _SC_SYMLOOP_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_SYMLOOP_MAX;
pub const _SC_STREAMS: _bindgen_ty_2 = _bindgen_ty_2::_SC_STREAMS;
pub const _SC_2_PBS_CHECKPOINT: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_2_PBS_CHECKPOINT;
pub const _SC_V6_ILP32_OFF32: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_V6_ILP32_OFF32;
pub const _SC_V6_ILP32_OFFBIG: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_V6_ILP32_OFFBIG;
pub const _SC_V6_LP64_OFF64: _bindgen_ty_2 = _bindgen_ty_2::_SC_V6_LP64_OFF64;
pub const _SC_V6_LPBIG_OFFBIG: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_V6_LPBIG_OFFBIG;
pub const _SC_HOST_NAME_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_HOST_NAME_MAX;
pub const _SC_TRACE: _bindgen_ty_2 = _bindgen_ty_2::_SC_TRACE;
pub const _SC_TRACE_EVENT_FILTER: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_TRACE_EVENT_FILTER;
pub const _SC_TRACE_INHERIT: _bindgen_ty_2 = _bindgen_ty_2::_SC_TRACE_INHERIT;
pub const _SC_TRACE_LOG: _bindgen_ty_2 = _bindgen_ty_2::_SC_TRACE_LOG;
pub const _SC_LEVEL1_ICACHE_SIZE: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_LEVEL1_ICACHE_SIZE;
pub const _SC_LEVEL1_ICACHE_ASSOC: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_LEVEL1_ICACHE_ASSOC;
pub const _SC_LEVEL1_ICACHE_LINESIZE: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_LEVEL1_ICACHE_LINESIZE;
pub const _SC_LEVEL1_DCACHE_SIZE: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_LEVEL1_DCACHE_SIZE;
pub const _SC_LEVEL1_DCACHE_ASSOC: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_LEVEL1_DCACHE_ASSOC;
pub const _SC_LEVEL1_DCACHE_LINESIZE: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_LEVEL1_DCACHE_LINESIZE;
pub const _SC_LEVEL2_CACHE_SIZE: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_LEVEL2_CACHE_SIZE;
pub const _SC_LEVEL2_CACHE_ASSOC: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_LEVEL2_CACHE_ASSOC;
pub const _SC_LEVEL2_CACHE_LINESIZE: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_LEVEL2_CACHE_LINESIZE;
pub const _SC_LEVEL3_CACHE_SIZE: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_LEVEL3_CACHE_SIZE;
pub const _SC_LEVEL3_CACHE_ASSOC: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_LEVEL3_CACHE_ASSOC;
pub const _SC_LEVEL3_CACHE_LINESIZE: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_LEVEL3_CACHE_LINESIZE;
pub const _SC_LEVEL4_CACHE_SIZE: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_LEVEL4_CACHE_SIZE;
pub const _SC_LEVEL4_CACHE_ASSOC: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_LEVEL4_CACHE_ASSOC;
pub const _SC_LEVEL4_CACHE_LINESIZE: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_LEVEL4_CACHE_LINESIZE;
pub const _SC_IPV6: _bindgen_ty_2 = _bindgen_ty_2::_SC_IPV6;
pub const _SC_RAW_SOCKETS: _bindgen_ty_2 = _bindgen_ty_2::_SC_RAW_SOCKETS;
pub const _SC_V7_ILP32_OFF32: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_V7_ILP32_OFF32;
pub const _SC_V7_ILP32_OFFBIG: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_V7_ILP32_OFFBIG;
pub const _SC_V7_LP64_OFF64: _bindgen_ty_2 = _bindgen_ty_2::_SC_V7_LP64_OFF64;
pub const _SC_V7_LPBIG_OFFBIG: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_V7_LPBIG_OFFBIG;
pub const _SC_SS_REPL_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_SS_REPL_MAX;
pub const _SC_TRACE_EVENT_NAME_MAX: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_TRACE_EVENT_NAME_MAX;
pub const _SC_TRACE_NAME_MAX: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_TRACE_NAME_MAX;
pub const _SC_TRACE_SYS_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_TRACE_SYS_MAX;
pub const _SC_TRACE_USER_EVENT_MAX: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_TRACE_USER_EVENT_MAX;
pub const _SC_XOPEN_STREAMS: _bindgen_ty_2 = _bindgen_ty_2::_SC_XOPEN_STREAMS;
pub const _SC_THREAD_ROBUST_PRIO_INHERIT: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_THREAD_ROBUST_PRIO_INHERIT;
pub const _SC_THREAD_ROBUST_PRIO_PROTECT: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_THREAD_ROBUST_PRIO_PROTECT;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_2 {
    _SC_ARG_MAX = 0,
    _SC_CHILD_MAX = 1,
    _SC_CLK_TCK = 2,
    _SC_NGROUPS_MAX = 3,
    _SC_OPEN_MAX = 4,
    _SC_STREAM_MAX = 5,
    _SC_TZNAME_MAX = 6,
    _SC_JOB_CONTROL = 7,
    _SC_SAVED_IDS = 8,
    _SC_REALTIME_SIGNALS = 9,
    _SC_PRIORITY_SCHEDULING = 10,
    _SC_TIMERS = 11,
    _SC_ASYNCHRONOUS_IO = 12,
    _SC_PRIORITIZED_IO = 13,
    _SC_SYNCHRONIZED_IO = 14,
    _SC_FSYNC = 15,
    _SC_MAPPED_FILES = 16,
    _SC_MEMLOCK = 17,
    _SC_MEMLOCK_RANGE = 18,
    _SC_MEMORY_PROTECTION = 19,
    _SC_MESSAGE_PASSING = 20,
    _SC_SEMAPHORES = 21,
    _SC_SHARED_MEMORY_OBJECTS = 22,
    _SC_AIO_LISTIO_MAX = 23,
    _SC_AIO_MAX = 24,
    _SC_AIO_PRIO_DELTA_MAX = 25,
    _SC_DELAYTIMER_MAX = 26,
    _SC_MQ_OPEN_MAX = 27,
    _SC_MQ_PRIO_MAX = 28,
    _SC_VERSION = 29,
    _SC_PAGESIZE = 30,
    _SC_RTSIG_MAX = 31,
    _SC_SEM_NSEMS_MAX = 32,
    _SC_SEM_VALUE_MAX = 33,
    _SC_SIGQUEUE_MAX = 34,
    _SC_TIMER_MAX = 35,
    _SC_BC_BASE_MAX = 36,
    _SC_BC_DIM_MAX = 37,
    _SC_BC_SCALE_MAX = 38,
    _SC_BC_STRING_MAX = 39,
    _SC_COLL_WEIGHTS_MAX = 40,
    _SC_EQUIV_CLASS_MAX = 41,
    _SC_EXPR_NEST_MAX = 42,
    _SC_LINE_MAX = 43,
    _SC_RE_DUP_MAX = 44,
    _SC_CHARCLASS_NAME_MAX = 45,
    _SC_2_VERSION = 46,
    _SC_2_C_BIND = 47,
    _SC_2_C_DEV = 48,
    _SC_2_FORT_DEV = 49,
    _SC_2_FORT_RUN = 50,
    _SC_2_SW_DEV = 51,
    _SC_2_LOCALEDEF = 52,
    _SC_PII = 53,
    _SC_PII_XTI = 54,
    _SC_PII_SOCKET = 55,
    _SC_PII_INTERNET = 56,
    _SC_PII_OSI = 57,
    _SC_POLL = 58,
    _SC_SELECT = 59,
    _SC_UIO_MAXIOV = 60,
    _SC_PII_INTERNET_STREAM = 61,
    _SC_PII_INTERNET_DGRAM = 62,
    _SC_PII_OSI_COTS = 63,
    _SC_PII_OSI_CLTS = 64,
    _SC_PII_OSI_M = 65,
    _SC_T_IOV_MAX = 66,
    _SC_THREADS = 67,
    _SC_THREAD_SAFE_FUNCTIONS = 68,
    _SC_GETGR_R_SIZE_MAX = 69,
    _SC_GETPW_R_SIZE_MAX = 70,
    _SC_LOGIN_NAME_MAX = 71,
    _SC_TTY_NAME_MAX = 72,
    _SC_THREAD_DESTRUCTOR_ITERATIONS = 73,
    _SC_THREAD_KEYS_MAX = 74,
    _SC_THREAD_STACK_MIN = 75,
    _SC_THREAD_THREADS_MAX = 76,
    _SC_THREAD_ATTR_STACKADDR = 77,
    _SC_THREAD_ATTR_STACKSIZE = 78,
    _SC_THREAD_PRIORITY_SCHEDULING = 79,
    _SC_THREAD_PRIO_INHERIT = 80,
    _SC_THREAD_PRIO_PROTECT = 81,
    _SC_THREAD_PROCESS_SHARED = 82,
    _SC_NPROCESSORS_CONF = 83,
    _SC_NPROCESSORS_ONLN = 84,
    _SC_PHYS_PAGES = 85,
    _SC_AVPHYS_PAGES = 86,
    _SC_ATEXIT_MAX = 87,
    _SC_PASS_MAX = 88,
    _SC_XOPEN_VERSION = 89,
    _SC_XOPEN_XCU_VERSION = 90,
    _SC_XOPEN_UNIX = 91,
    _SC_XOPEN_CRYPT = 92,
    _SC_XOPEN_ENH_I18N = 93,
    _SC_XOPEN_SHM = 94,
    _SC_2_CHAR_TERM = 95,
    _SC_2_C_VERSION = 96,
    _SC_2_UPE = 97,
    _SC_XOPEN_XPG2 = 98,
    _SC_XOPEN_XPG3 = 99,
    _SC_XOPEN_XPG4 = 100,
    _SC_CHAR_BIT = 101,
    _SC_CHAR_MAX = 102,
    _SC_CHAR_MIN = 103,
    _SC_INT_MAX = 104,
    _SC_INT_MIN = 105,
    _SC_LONG_BIT = 106,
    _SC_WORD_BIT = 107,
    _SC_MB_LEN_MAX = 108,
    _SC_NZERO = 109,
    _SC_SSIZE_MAX = 110,
    _SC_SCHAR_MAX = 111,
    _SC_SCHAR_MIN = 112,
    _SC_SHRT_MAX = 113,
    _SC_SHRT_MIN = 114,
    _SC_UCHAR_MAX = 115,
    _SC_UINT_MAX = 116,
    _SC_ULONG_MAX = 117,
    _SC_USHRT_MAX = 118,
    _SC_NL_ARGMAX = 119,
    _SC_NL_LANGMAX = 120,
    _SC_NL_MSGMAX = 121,
    _SC_NL_NMAX = 122,
    _SC_NL_SETMAX = 123,
    _SC_NL_TEXTMAX = 124,
    _SC_XBS5_ILP32_OFF32 = 125,
    _SC_XBS5_ILP32_OFFBIG = 126,
    _SC_XBS5_LP64_OFF64 = 127,
    _SC_XBS5_LPBIG_OFFBIG = 128,
    _SC_XOPEN_LEGACY = 129,
    _SC_XOPEN_REALTIME = 130,
    _SC_XOPEN_REALTIME_THREADS = 131,
    _SC_ADVISORY_INFO = 132,
    _SC_BARRIERS = 133,
    _SC_BASE = 134,
    _SC_C_LANG_SUPPORT = 135,
    _SC_C_LANG_SUPPORT_R = 136,
    _SC_CLOCK_SELECTION = 137,
    _SC_CPUTIME = 138,
    _SC_THREAD_CPUTIME = 139,
    _SC_DEVICE_IO = 140,
    _SC_DEVICE_SPECIFIC = 141,
    _SC_DEVICE_SPECIFIC_R = 142,
    _SC_FD_MGMT = 143,
    _SC_FIFO = 144,
    _SC_PIPE = 145,
    _SC_FILE_ATTRIBUTES = 146,
    _SC_FILE_LOCKING = 147,
    _SC_FILE_SYSTEM = 148,
    _SC_MONOTONIC_CLOCK = 149,
    _SC_MULTI_PROCESS = 150,
    _SC_SINGLE_PROCESS = 151,
    _SC_NETWORKING = 152,
    _SC_READER_WRITER_LOCKS = 153,
    _SC_SPIN_LOCKS = 154,
    _SC_REGEXP = 155,
    _SC_REGEX_VERSION = 156,
    _SC_SHELL = 157,
    _SC_SIGNALS = 158,
    _SC_SPAWN = 159,
    _SC_SPORADIC_SERVER = 160,
    _SC_THREAD_SPORADIC_SERVER = 161,
    _SC_SYSTEM_DATABASE = 162,
    _SC_SYSTEM_DATABASE_R = 163,
    _SC_TIMEOUTS = 164,
    _SC_TYPED_MEMORY_OBJECTS = 165,
    _SC_USER_GROUPS = 166,
    _SC_USER_GROUPS_R = 167,
    _SC_2_PBS = 168,
    _SC_2_PBS_ACCOUNTING = 169,
    _SC_2_PBS_LOCATE = 170,
    _SC_2_PBS_MESSAGE = 171,
    _SC_2_PBS_TRACK = 172,
    _SC_SYMLOOP_MAX = 173,
    _SC_STREAMS = 174,
    _SC_2_PBS_CHECKPOINT = 175,
    _SC_V6_ILP32_OFF32 = 176,
    _SC_V6_ILP32_OFFBIG = 177,
    _SC_V6_LP64_OFF64 = 178,
    _SC_V6_LPBIG_OFFBIG = 179,
    _SC_HOST_NAME_MAX = 180,
    _SC_TRACE = 181,
    _SC_TRACE_EVENT_FILTER = 182,
    _SC_TRACE_INHERIT = 183,
    _SC_TRACE_LOG = 184,
    _SC_LEVEL1_ICACHE_SIZE = 185,
    _SC_LEVEL1_ICACHE_ASSOC = 186,
    _SC_LEVEL1_ICACHE_LINESIZE = 187,
    _SC_LEVEL1_DCACHE_SIZE = 188,
    _SC_LEVEL1_DCACHE_ASSOC = 189,
    _SC_LEVEL1_DCACHE_LINESIZE = 190,
    _SC_LEVEL2_CACHE_SIZE = 191,
    _SC_LEVEL2_CACHE_ASSOC = 192,
    _SC_LEVEL2_CACHE_LINESIZE = 193,
    _SC_LEVEL3_CACHE_SIZE = 194,
    _SC_LEVEL3_CACHE_ASSOC = 195,
    _SC_LEVEL3_CACHE_LINESIZE = 196,
    _SC_LEVEL4_CACHE_SIZE = 197,
    _SC_LEVEL4_CACHE_ASSOC = 198,
    _SC_LEVEL4_CACHE_LINESIZE = 199,
    _SC_IPV6 = 235,
    _SC_RAW_SOCKETS = 236,
    _SC_V7_ILP32_OFF32 = 237,
    _SC_V7_ILP32_OFFBIG = 238,
    _SC_V7_LP64_OFF64 = 239,
    _SC_V7_LPBIG_OFFBIG = 240,
    _SC_SS_REPL_MAX = 241,
    _SC_TRACE_EVENT_NAME_MAX = 242,
    _SC_TRACE_NAME_MAX = 243,
    _SC_TRACE_SYS_MAX = 244,
    _SC_TRACE_USER_EVENT_MAX = 245,
    _SC_XOPEN_STREAMS = 246,
    _SC_THREAD_ROBUST_PRIO_INHERIT = 247,
    _SC_THREAD_ROBUST_PRIO_PROTECT = 248,
}
pub const _CS_PATH: _bindgen_ty_3 = _bindgen_ty_3::_CS_PATH;
pub const _CS_V6_WIDTH_RESTRICTED_ENVS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_V6_WIDTH_RESTRICTED_ENVS;
pub const _CS_GNU_LIBC_VERSION: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_GNU_LIBC_VERSION;
pub const _CS_GNU_LIBPTHREAD_VERSION: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_GNU_LIBPTHREAD_VERSION;
pub const _CS_V5_WIDTH_RESTRICTED_ENVS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_V5_WIDTH_RESTRICTED_ENVS;
pub const _CS_V7_WIDTH_RESTRICTED_ENVS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_V7_WIDTH_RESTRICTED_ENVS;
pub const _CS_LFS_CFLAGS: _bindgen_ty_3 = _bindgen_ty_3::_CS_LFS_CFLAGS;
pub const _CS_LFS_LDFLAGS: _bindgen_ty_3 = _bindgen_ty_3::_CS_LFS_LDFLAGS;
pub const _CS_LFS_LIBS: _bindgen_ty_3 = _bindgen_ty_3::_CS_LFS_LIBS;
pub const _CS_LFS_LINTFLAGS: _bindgen_ty_3 = _bindgen_ty_3::_CS_LFS_LINTFLAGS;
pub const _CS_LFS64_CFLAGS: _bindgen_ty_3 = _bindgen_ty_3::_CS_LFS64_CFLAGS;
pub const _CS_LFS64_LDFLAGS: _bindgen_ty_3 = _bindgen_ty_3::_CS_LFS64_LDFLAGS;
pub const _CS_LFS64_LIBS: _bindgen_ty_3 = _bindgen_ty_3::_CS_LFS64_LIBS;
pub const _CS_LFS64_LINTFLAGS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_LFS64_LINTFLAGS;
pub const _CS_XBS5_ILP32_OFF32_CFLAGS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_XBS5_ILP32_OFF32_CFLAGS;
pub const _CS_XBS5_ILP32_OFF32_LDFLAGS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_XBS5_ILP32_OFF32_LDFLAGS;
pub const _CS_XBS5_ILP32_OFF32_LIBS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_XBS5_ILP32_OFF32_LIBS;
pub const _CS_XBS5_ILP32_OFF32_LINTFLAGS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_XBS5_ILP32_OFF32_LINTFLAGS;
pub const _CS_XBS5_ILP32_OFFBIG_CFLAGS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_XBS5_ILP32_OFFBIG_CFLAGS;
pub const _CS_XBS5_ILP32_OFFBIG_LDFLAGS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_XBS5_ILP32_OFFBIG_LDFLAGS;
pub const _CS_XBS5_ILP32_OFFBIG_LIBS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_XBS5_ILP32_OFFBIG_LIBS;
pub const _CS_XBS5_ILP32_OFFBIG_LINTFLAGS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_XBS5_ILP32_OFFBIG_LINTFLAGS;
pub const _CS_XBS5_LP64_OFF64_CFLAGS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_XBS5_LP64_OFF64_CFLAGS;
pub const _CS_XBS5_LP64_OFF64_LDFLAGS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_XBS5_LP64_OFF64_LDFLAGS;
pub const _CS_XBS5_LP64_OFF64_LIBS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_XBS5_LP64_OFF64_LIBS;
pub const _CS_XBS5_LP64_OFF64_LINTFLAGS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_XBS5_LP64_OFF64_LINTFLAGS;
pub const _CS_XBS5_LPBIG_OFFBIG_CFLAGS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_XBS5_LPBIG_OFFBIG_CFLAGS;
pub const _CS_XBS5_LPBIG_OFFBIG_LDFLAGS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_XBS5_LPBIG_OFFBIG_LDFLAGS;
pub const _CS_XBS5_LPBIG_OFFBIG_LIBS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_XBS5_LPBIG_OFFBIG_LIBS;
pub const _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS;
pub const _CS_POSIX_V6_ILP32_OFF32_CFLAGS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_POSIX_V6_ILP32_OFF32_CFLAGS;
pub const _CS_POSIX_V6_ILP32_OFF32_LDFLAGS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_POSIX_V6_ILP32_OFF32_LDFLAGS;
pub const _CS_POSIX_V6_ILP32_OFF32_LIBS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_POSIX_V6_ILP32_OFF32_LIBS;
pub const _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS;
pub const _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LIBS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_POSIX_V6_ILP32_OFFBIG_LIBS;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS;
pub const _CS_POSIX_V6_LP64_OFF64_CFLAGS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_POSIX_V6_LP64_OFF64_CFLAGS;
pub const _CS_POSIX_V6_LP64_OFF64_LDFLAGS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_POSIX_V6_LP64_OFF64_LDFLAGS;
pub const _CS_POSIX_V6_LP64_OFF64_LIBS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_POSIX_V6_LP64_OFF64_LIBS;
pub const _CS_POSIX_V6_LP64_OFF64_LINTFLAGS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_POSIX_V6_LP64_OFF64_LINTFLAGS;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LIBS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_POSIX_V6_LPBIG_OFFBIG_LIBS;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS;
pub const _CS_POSIX_V7_ILP32_OFF32_CFLAGS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_POSIX_V7_ILP32_OFF32_CFLAGS;
pub const _CS_POSIX_V7_ILP32_OFF32_LDFLAGS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_POSIX_V7_ILP32_OFF32_LDFLAGS;
pub const _CS_POSIX_V7_ILP32_OFF32_LIBS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_POSIX_V7_ILP32_OFF32_LIBS;
pub const _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS;
pub const _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS;
pub const _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS;
pub const _CS_POSIX_V7_ILP32_OFFBIG_LIBS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_POSIX_V7_ILP32_OFFBIG_LIBS;
pub const _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS;
pub const _CS_POSIX_V7_LP64_OFF64_CFLAGS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_POSIX_V7_LP64_OFF64_CFLAGS;
pub const _CS_POSIX_V7_LP64_OFF64_LDFLAGS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_POSIX_V7_LP64_OFF64_LDFLAGS;
pub const _CS_POSIX_V7_LP64_OFF64_LIBS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_POSIX_V7_LP64_OFF64_LIBS;
pub const _CS_POSIX_V7_LP64_OFF64_LINTFLAGS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_POSIX_V7_LP64_OFF64_LINTFLAGS;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_LIBS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_POSIX_V7_LPBIG_OFFBIG_LIBS;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS;
pub const _CS_V6_ENV: _bindgen_ty_3 = _bindgen_ty_3::_CS_V6_ENV;
pub const _CS_V7_ENV: _bindgen_ty_3 = _bindgen_ty_3::_CS_V7_ENV;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_3 {
    _CS_PATH = 0,
    _CS_V6_WIDTH_RESTRICTED_ENVS = 1,
    _CS_GNU_LIBC_VERSION = 2,
    _CS_GNU_LIBPTHREAD_VERSION = 3,
    _CS_V5_WIDTH_RESTRICTED_ENVS = 4,
    _CS_V7_WIDTH_RESTRICTED_ENVS = 5,
    _CS_LFS_CFLAGS = 1000,
    _CS_LFS_LDFLAGS = 1001,
    _CS_LFS_LIBS = 1002,
    _CS_LFS_LINTFLAGS = 1003,
    _CS_LFS64_CFLAGS = 1004,
    _CS_LFS64_LDFLAGS = 1005,
    _CS_LFS64_LIBS = 1006,
    _CS_LFS64_LINTFLAGS = 1007,
    _CS_XBS5_ILP32_OFF32_CFLAGS = 1100,
    _CS_XBS5_ILP32_OFF32_LDFLAGS = 1101,
    _CS_XBS5_ILP32_OFF32_LIBS = 1102,
    _CS_XBS5_ILP32_OFF32_LINTFLAGS = 1103,
    _CS_XBS5_ILP32_OFFBIG_CFLAGS = 1104,
    _CS_XBS5_ILP32_OFFBIG_LDFLAGS = 1105,
    _CS_XBS5_ILP32_OFFBIG_LIBS = 1106,
    _CS_XBS5_ILP32_OFFBIG_LINTFLAGS = 1107,
    _CS_XBS5_LP64_OFF64_CFLAGS = 1108,
    _CS_XBS5_LP64_OFF64_LDFLAGS = 1109,
    _CS_XBS5_LP64_OFF64_LIBS = 1110,
    _CS_XBS5_LP64_OFF64_LINTFLAGS = 1111,
    _CS_XBS5_LPBIG_OFFBIG_CFLAGS = 1112,
    _CS_XBS5_LPBIG_OFFBIG_LDFLAGS = 1113,
    _CS_XBS5_LPBIG_OFFBIG_LIBS = 1114,
    _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS = 1115,
    _CS_POSIX_V6_ILP32_OFF32_CFLAGS = 1116,
    _CS_POSIX_V6_ILP32_OFF32_LDFLAGS = 1117,
    _CS_POSIX_V6_ILP32_OFF32_LIBS = 1118,
    _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS = 1119,
    _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS = 1120,
    _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS = 1121,
    _CS_POSIX_V6_ILP32_OFFBIG_LIBS = 1122,
    _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS = 1123,
    _CS_POSIX_V6_LP64_OFF64_CFLAGS = 1124,
    _CS_POSIX_V6_LP64_OFF64_LDFLAGS = 1125,
    _CS_POSIX_V6_LP64_OFF64_LIBS = 1126,
    _CS_POSIX_V6_LP64_OFF64_LINTFLAGS = 1127,
    _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS = 1128,
    _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS = 1129,
    _CS_POSIX_V6_LPBIG_OFFBIG_LIBS = 1130,
    _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS = 1131,
    _CS_POSIX_V7_ILP32_OFF32_CFLAGS = 1132,
    _CS_POSIX_V7_ILP32_OFF32_LDFLAGS = 1133,
    _CS_POSIX_V7_ILP32_OFF32_LIBS = 1134,
    _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS = 1135,
    _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS = 1136,
    _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS = 1137,
    _CS_POSIX_V7_ILP32_OFFBIG_LIBS = 1138,
    _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS = 1139,
    _CS_POSIX_V7_LP64_OFF64_CFLAGS = 1140,
    _CS_POSIX_V7_LP64_OFF64_LDFLAGS = 1141,
    _CS_POSIX_V7_LP64_OFF64_LIBS = 1142,
    _CS_POSIX_V7_LP64_OFF64_LINTFLAGS = 1143,
    _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS = 1144,
    _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS = 1145,
    _CS_POSIX_V7_LPBIG_OFFBIG_LIBS = 1146,
    _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS = 1147,
    _CS_V6_ENV = 1148,
    _CS_V7_ENV = 1149,
}
extern "C" {
    pub fn pathconf(__path: *const ::std::os::raw::c_char,
                    __name: ::std::os::raw::c_int) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn fpathconf(__fd: ::std::os::raw::c_int,
                     __name: ::std::os::raw::c_int) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn sysconf(__name: ::std::os::raw::c_int) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn confstr(__name: ::std::os::raw::c_int,
                   __buf: *mut ::std::os::raw::c_char, __len: usize) -> usize;
}
extern "C" {
    pub fn getpid() -> __pid_t;
}
extern "C" {
    pub fn getppid() -> __pid_t;
}
extern "C" {
    pub fn getpgrp() -> __pid_t;
}
extern "C" {
    pub fn __getpgid(__pid: __pid_t) -> __pid_t;
}
extern "C" {
    pub fn getpgid(__pid: __pid_t) -> __pid_t;
}
extern "C" {
    pub fn setpgid(__pid: __pid_t, __pgid: __pid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setpgrp() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setsid() -> __pid_t;
}
extern "C" {
    pub fn getsid(__pid: __pid_t) -> __pid_t;
}
extern "C" {
    pub fn getuid() -> __uid_t;
}
extern "C" {
    pub fn geteuid() -> __uid_t;
}
extern "C" {
    pub fn getgid() -> __gid_t;
}
extern "C" {
    pub fn getegid() -> __gid_t;
}
extern "C" {
    pub fn getgroups(__size: ::std::os::raw::c_int, __list: *mut __gid_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn group_member(__gid: __gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setuid(__uid: __uid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setreuid(__ruid: __uid_t, __euid: __uid_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn seteuid(__uid: __uid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setgid(__gid: __gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setregid(__rgid: __gid_t, __egid: __gid_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setegid(__gid: __gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getresuid(__ruid: *mut __uid_t, __euid: *mut __uid_t,
                     __suid: *mut __uid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getresgid(__rgid: *mut __gid_t, __egid: *mut __gid_t,
                     __sgid: *mut __gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setresuid(__ruid: __uid_t, __euid: __uid_t, __suid: __uid_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setresgid(__rgid: __gid_t, __egid: __gid_t, __sgid: __gid_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fork() -> __pid_t;
}
extern "C" {
    pub fn vfork() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ttyname(__fd: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ttyname_r(__fd: ::std::os::raw::c_int,
                     __buf: *mut ::std::os::raw::c_char, __buflen: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isatty(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ttyslot() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn link(__from: *const ::std::os::raw::c_char,
                __to: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn linkat(__fromfd: ::std::os::raw::c_int,
                  __from: *const ::std::os::raw::c_char,
                  __tofd: ::std::os::raw::c_int,
                  __to: *const ::std::os::raw::c_char,
                  __flags: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn symlink(__from: *const ::std::os::raw::c_char,
                   __to: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn readlink(__path: *const ::std::os::raw::c_char,
                    __buf: *mut ::std::os::raw::c_char, __len: usize)
     -> isize;
}
extern "C" {
    pub fn symlinkat(__from: *const ::std::os::raw::c_char,
                     __tofd: ::std::os::raw::c_int,
                     __to: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn readlinkat(__fd: ::std::os::raw::c_int,
                      __path: *const ::std::os::raw::c_char,
                      __buf: *mut ::std::os::raw::c_char, __len: usize)
     -> isize;
}
extern "C" {
    pub fn unlink(__name: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unlinkat(__fd: ::std::os::raw::c_int,
                    __name: *const ::std::os::raw::c_char,
                    __flag: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rmdir(__path: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tcgetpgrp(__fd: ::std::os::raw::c_int) -> __pid_t;
}
extern "C" {
    pub fn tcsetpgrp(__fd: ::std::os::raw::c_int, __pgrp_id: __pid_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getlogin() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getlogin_r(__name: *mut ::std::os::raw::c_char, __name_len: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setlogin(__name: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "optarg"]
    pub static mut optarg: *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "optind"]
    pub static mut optind: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "opterr"]
    pub static mut opterr: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "optopt"]
    pub static mut optopt: ::std::os::raw::c_int;
}
extern "C" {
    pub fn getopt(___argc: ::std::os::raw::c_int,
                  ___argv: *const *const ::std::os::raw::c_char,
                  __shortopts: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gethostname(__name: *mut ::std::os::raw::c_char, __len: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sethostname(__name: *const ::std::os::raw::c_char, __len: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sethostid(__id: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getdomainname(__name: *mut ::std::os::raw::c_char, __len: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setdomainname(__name: *const ::std::os::raw::c_char, __len: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vhangup() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn revoke(__file: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn profil(__sample_buffer: *mut ::std::os::raw::c_ushort,
                  __size: usize, __offset: usize,
                  __scale: ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acct(__name: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getusershell() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn endusershell();
}
extern "C" {
    pub fn setusershell();
}
extern "C" {
    pub fn daemon(__nochdir: ::std::os::raw::c_int,
                  __noclose: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chroot(__path: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpass(__prompt: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fsync(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn syncfs(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gethostid() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn sync();
}
extern "C" {
    pub fn getpagesize() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getdtablesize() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn truncate(__file: *const ::std::os::raw::c_char, __length: __off_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn truncate64(__file: *const ::std::os::raw::c_char,
                      __length: __off64_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftruncate(__fd: ::std::os::raw::c_int, __length: __off_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftruncate64(__fd: ::std::os::raw::c_int, __length: __off64_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn brk(__addr: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sbrk(__delta: isize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn syscall(__sysno: ::std::os::raw::c_long, ...)
     -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn lockf(__fd: ::std::os::raw::c_int, __cmd: ::std::os::raw::c_int,
                 __len: __off_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lockf64(__fd: ::std::os::raw::c_int, __cmd: ::std::os::raw::c_int,
                   __len: __off64_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fdatasync(__fildes: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypt(__key: *const ::std::os::raw::c_char,
                 __salt: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn encrypt(__glibc_block: *mut ::std::os::raw::c_char,
                   __edflag: ::std::os::raw::c_int);
}
extern "C" {
    pub fn swab(__from: *const ::std::os::raw::c_void,
                __to: *mut ::std::os::raw::c_void, __n: isize);
}
extern "C" {
    pub fn getentropy(__buffer: *mut ::std::os::raw::c_void, __length: usize)
     -> ::std::os::raw::c_int;
}
pub type wchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: f64,
}
#[test]
fn bindgen_test_layout_max_align_t() {
    assert_eq!(::std::mem::size_of::<max_align_t>() , 32usize , concat ! (
               "Size of: " , stringify ! ( max_align_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const max_align_t ) ) .
                __clang_max_align_nonce1 as * const _ as usize } , 0usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( max_align_t ) , "::" ,
                stringify ! ( __clang_max_align_nonce1 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const max_align_t ) ) .
                __clang_max_align_nonce2 as * const _ as usize } , 16usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( max_align_t ) , "::" ,
                stringify ! ( __clang_max_align_nonce2 ) ));
}
impl Clone for max_align_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _IO_FILE {
    pub _flags: ::std::os::raw::c_int,
    pub _IO_read_ptr: *mut ::std::os::raw::c_char,
    pub _IO_read_end: *mut ::std::os::raw::c_char,
    pub _IO_read_base: *mut ::std::os::raw::c_char,
    pub _IO_write_base: *mut ::std::os::raw::c_char,
    pub _IO_write_ptr: *mut ::std::os::raw::c_char,
    pub _IO_write_end: *mut ::std::os::raw::c_char,
    pub _IO_buf_base: *mut ::std::os::raw::c_char,
    pub _IO_buf_end: *mut ::std::os::raw::c_char,
    pub _IO_save_base: *mut ::std::os::raw::c_char,
    pub _IO_backup_base: *mut ::std::os::raw::c_char,
    pub _IO_save_end: *mut ::std::os::raw::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: ::std::os::raw::c_int,
    pub _flags2: ::std::os::raw::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::std::os::raw::c_ushort,
    pub _vtable_offset: ::std::os::raw::c_schar,
    pub _shortbuf: [::std::os::raw::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub __pad1: *mut ::std::os::raw::c_void,
    pub __pad2: *mut ::std::os::raw::c_void,
    pub __pad3: *mut ::std::os::raw::c_void,
    pub __pad4: *mut ::std::os::raw::c_void,
    pub __pad5: usize,
    pub _mode: ::std::os::raw::c_int,
    pub _unused2: [::std::os::raw::c_char; 20usize],
}
#[test]
fn bindgen_test_layout__IO_FILE() {
    assert_eq!(::std::mem::size_of::<_IO_FILE>() , 216usize , concat ! (
               "Size of: " , stringify ! ( _IO_FILE ) ));
    assert_eq! (::std::mem::align_of::<_IO_FILE>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( _IO_FILE ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . _flags as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( _flags ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . _IO_read_ptr as * const _
                as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( _IO_read_ptr ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . _IO_read_end as * const _
                as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( _IO_read_end ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . _IO_read_base as * const _
                as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( _IO_read_base ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . _IO_write_base as * const
                _ as usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( _IO_write_base ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . _IO_write_ptr as * const _
                as usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( _IO_write_ptr ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . _IO_write_end as * const _
                as usize } , 48usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( _IO_write_end ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . _IO_buf_base as * const _
                as usize } , 56usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( _IO_buf_base ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . _IO_buf_end as * const _
                as usize } , 64usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( _IO_buf_end ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . _IO_save_base as * const _
                as usize } , 72usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( _IO_save_base ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . _IO_backup_base as * const
                _ as usize } , 80usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( _IO_backup_base ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . _IO_save_end as * const _
                as usize } , 88usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( _IO_save_end ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . _markers as * const _ as
                usize } , 96usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( _markers ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . _chain as * const _ as
                usize } , 104usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( _chain ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . _fileno as * const _ as
                usize } , 112usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( _fileno ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . _flags2 as * const _ as
                usize } , 116usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( _flags2 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . _old_offset as * const _
                as usize } , 120usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( _old_offset ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . _cur_column as * const _
                as usize } , 128usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( _cur_column ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . _vtable_offset as * const
                _ as usize } , 130usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( _vtable_offset ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . _shortbuf as * const _ as
                usize } , 131usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( _shortbuf ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . _lock as * const _ as
                usize } , 136usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( _lock ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . _offset as * const _ as
                usize } , 144usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( _offset ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . __pad1 as * const _ as
                usize } , 152usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( __pad1 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . __pad2 as * const _ as
                usize } , 160usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( __pad2 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . __pad3 as * const _ as
                usize } , 168usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( __pad3 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . __pad4 as * const _ as
                usize } , 176usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( __pad4 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . __pad5 as * const _ as
                usize } , 184usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( __pad5 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . _mode as * const _ as
                usize } , 192usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( _mode ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . _unused2 as * const _ as
                usize } , 196usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( _unused2 ) ));
}
impl Clone for _IO_FILE {
    fn clone(&self) -> Self { *self }
}
pub type FILE = _IO_FILE;
pub type __FILE = _IO_FILE;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __mbstate_t {
    pub __count: ::std::os::raw::c_int,
    pub __value: __mbstate_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __mbstate_t__bindgen_ty_1 {
    pub __wch: __BindgenUnionField<::std::os::raw::c_uint>,
    pub __wchb: __BindgenUnionField<[::std::os::raw::c_char; 4usize]>,
    pub bindgen_union_field: u32,
}
#[test]
fn bindgen_test_layout___mbstate_t__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<__mbstate_t__bindgen_ty_1>() , 4usize ,
               concat ! (
               "Size of: " , stringify ! ( __mbstate_t__bindgen_ty_1 ) ));
    assert_eq! (::std::mem::align_of::<__mbstate_t__bindgen_ty_1>() , 4usize ,
                concat ! (
                "Alignment of " , stringify ! ( __mbstate_t__bindgen_ty_1 )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __mbstate_t__bindgen_ty_1 ) ) . __wch as
                * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                __mbstate_t__bindgen_ty_1 ) , "::" , stringify ! ( __wch ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __mbstate_t__bindgen_ty_1 ) ) . __wchb as
                * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                __mbstate_t__bindgen_ty_1 ) , "::" , stringify ! ( __wchb )
                ));
}
impl Clone for __mbstate_t__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout___mbstate_t() {
    assert_eq!(::std::mem::size_of::<__mbstate_t>() , 8usize , concat ! (
               "Size of: " , stringify ! ( __mbstate_t ) ));
    assert_eq! (::std::mem::align_of::<__mbstate_t>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( __mbstate_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __mbstate_t ) ) . __count as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( __mbstate_t ) , "::" ,
                stringify ! ( __count ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __mbstate_t ) ) . __value as * const _ as
                usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( __mbstate_t ) , "::" ,
                stringify ! ( __value ) ));
}
impl Clone for __mbstate_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _G_fpos_t {
    pub __pos: __off_t,
    pub __state: __mbstate_t,
}
#[test]
fn bindgen_test_layout__G_fpos_t() {
    assert_eq!(::std::mem::size_of::<_G_fpos_t>() , 16usize , concat ! (
               "Size of: " , stringify ! ( _G_fpos_t ) ));
    assert_eq! (::std::mem::align_of::<_G_fpos_t>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( _G_fpos_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _G_fpos_t ) ) . __pos as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( _G_fpos_t ) , "::" ,
                stringify ! ( __pos ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _G_fpos_t ) ) . __state as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( _G_fpos_t ) , "::" ,
                stringify ! ( __state ) ));
}
impl Clone for _G_fpos_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _G_fpos64_t {
    pub __pos: __off64_t,
    pub __state: __mbstate_t,
}
#[test]
fn bindgen_test_layout__G_fpos64_t() {
    assert_eq!(::std::mem::size_of::<_G_fpos64_t>() , 16usize , concat ! (
               "Size of: " , stringify ! ( _G_fpos64_t ) ));
    assert_eq! (::std::mem::align_of::<_G_fpos64_t>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( _G_fpos64_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _G_fpos64_t ) ) . __pos as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( _G_fpos64_t ) , "::" ,
                stringify ! ( __pos ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _G_fpos64_t ) ) . __state as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( _G_fpos64_t ) , "::" ,
                stringify ! ( __state ) ));
}
impl Clone for _G_fpos64_t {
    fn clone(&self) -> Self { *self }
}
pub type va_list = __builtin_va_list;
pub type __gnuc_va_list = __builtin_va_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_jump_t {
    _unused: [u8; 0],
}
pub type _IO_lock_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _IO_marker {
    pub _next: *mut _IO_marker,
    pub _sbuf: *mut _IO_FILE,
    pub _pos: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__IO_marker() {
    assert_eq!(::std::mem::size_of::<_IO_marker>() , 24usize , concat ! (
               "Size of: " , stringify ! ( _IO_marker ) ));
    assert_eq! (::std::mem::align_of::<_IO_marker>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( _IO_marker ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_marker ) ) . _next as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_marker ) , "::" ,
                stringify ! ( _next ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_marker ) ) . _sbuf as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_marker ) , "::" ,
                stringify ! ( _sbuf ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_marker ) ) . _pos as * const _ as
                usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_marker ) , "::" ,
                stringify ! ( _pos ) ));
}
impl Clone for _IO_marker {
    fn clone(&self) -> Self { *self }
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum __codecvt_result {
    __codecvt_ok = 0,
    __codecvt_partial = 1,
    __codecvt_error = 2,
    __codecvt_noconv = 3,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE_plus {
    _unused: [u8; 0],
}
extern "C" {
    #[link_name = "_IO_2_1_stdin_"]
    pub static mut _IO_2_1_stdin_: _IO_FILE_plus;
}
extern "C" {
    #[link_name = "_IO_2_1_stdout_"]
    pub static mut _IO_2_1_stdout_: _IO_FILE_plus;
}
extern "C" {
    #[link_name = "_IO_2_1_stderr_"]
    pub static mut _IO_2_1_stderr_: _IO_FILE_plus;
}
pub type __io_read_fn =
    ::std::option::Option<unsafe extern "C" fn(__cookie:
                                                   *mut ::std::os::raw::c_void,
                                               __buf:
                                                   *mut ::std::os::raw::c_char,
                                               __nbytes: usize) -> __ssize_t>;
pub type __io_write_fn =
    ::std::option::Option<unsafe extern "C" fn(__cookie:
                                                   *mut ::std::os::raw::c_void,
                                               __buf:
                                                   *const ::std::os::raw::c_char,
                                               __n: usize) -> __ssize_t>;
pub type __io_seek_fn =
    ::std::option::Option<unsafe extern "C" fn(__cookie:
                                                   *mut ::std::os::raw::c_void,
                                               __pos: *mut __off64_t,
                                               __w: ::std::os::raw::c_int)
                              -> ::std::os::raw::c_int>;
pub type __io_close_fn =
    ::std::option::Option<unsafe extern "C" fn(__cookie:
                                                   *mut ::std::os::raw::c_void)
                              -> ::std::os::raw::c_int>;
pub type cookie_read_function_t = __io_read_fn;
pub type cookie_write_function_t = __io_write_fn;
pub type cookie_seek_function_t = __io_seek_fn;
pub type cookie_close_function_t = __io_close_fn;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _IO_cookie_io_functions_t {
    pub read: __io_read_fn,
    pub write: __io_write_fn,
    pub seek: __io_seek_fn,
    pub close: __io_close_fn,
}
#[test]
fn bindgen_test_layout__IO_cookie_io_functions_t() {
    assert_eq!(::std::mem::size_of::<_IO_cookie_io_functions_t>() , 32usize ,
               concat ! (
               "Size of: " , stringify ! ( _IO_cookie_io_functions_t ) ));
    assert_eq! (::std::mem::align_of::<_IO_cookie_io_functions_t>() , 8usize ,
                concat ! (
                "Alignment of " , stringify ! ( _IO_cookie_io_functions_t )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_cookie_io_functions_t ) ) . read as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                _IO_cookie_io_functions_t ) , "::" , stringify ! ( read ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_cookie_io_functions_t ) ) . write as
                * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! (
                _IO_cookie_io_functions_t ) , "::" , stringify ! ( write ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_cookie_io_functions_t ) ) . seek as *
                const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! (
                _IO_cookie_io_functions_t ) , "::" , stringify ! ( seek ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_cookie_io_functions_t ) ) . close as
                * const _ as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! (
                _IO_cookie_io_functions_t ) , "::" , stringify ! ( close ) ));
}
impl Clone for _IO_cookie_io_functions_t {
    fn clone(&self) -> Self { *self }
}
pub type cookie_io_functions_t = _IO_cookie_io_functions_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_cookie_file {
    _unused: [u8; 0],
}
extern "C" {
    pub fn _IO_cookie_init(__cfile: *mut _IO_cookie_file,
                           __read_write: ::std::os::raw::c_int,
                           __cookie: *mut ::std::os::raw::c_void,
                           __fns: _IO_cookie_io_functions_t);
}
extern "C" {
    pub fn __underflow(arg1: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __uflow(arg1: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __overflow(arg1: *mut _IO_FILE, arg2: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_getc(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_putc(__c: ::std::os::raw::c_int, __fp: *mut _IO_FILE)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_feof(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_ferror(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_peekc_locked(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_flockfile(arg1: *mut _IO_FILE);
}
extern "C" {
    pub fn _IO_funlockfile(arg1: *mut _IO_FILE);
}
extern "C" {
    pub fn _IO_ftrylockfile(arg1: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_vfscanf(arg1: *mut _IO_FILE,
                       arg2: *const ::std::os::raw::c_char,
                       arg3: *mut __va_list_tag,
                       arg4: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_vfprintf(arg1: *mut _IO_FILE,
                        arg2: *const ::std::os::raw::c_char,
                        arg3: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_padn(arg1: *mut _IO_FILE, arg2: ::std::os::raw::c_int,
                    arg3: __ssize_t) -> __ssize_t;
}
extern "C" {
    pub fn _IO_sgetn(arg1: *mut _IO_FILE, arg2: *mut ::std::os::raw::c_void,
                     arg3: usize) -> usize;
}
extern "C" {
    pub fn _IO_seekoff(arg1: *mut _IO_FILE, arg2: __off64_t,
                       arg3: ::std::os::raw::c_int,
                       arg4: ::std::os::raw::c_int) -> __off64_t;
}
extern "C" {
    pub fn _IO_seekpos(arg1: *mut _IO_FILE, arg2: __off64_t,
                       arg3: ::std::os::raw::c_int) -> __off64_t;
}
extern "C" {
    pub fn _IO_free_backup_area(arg1: *mut _IO_FILE);
}
pub type fpos_t = _G_fpos_t;
pub type fpos64_t = _G_fpos64_t;
extern "C" {
    #[link_name = "stdin"]
    pub static mut stdin: *mut _IO_FILE;
}
extern "C" {
    #[link_name = "stdout"]
    pub static mut stdout: *mut _IO_FILE;
}
extern "C" {
    #[link_name = "stderr"]
    pub static mut stderr: *mut _IO_FILE;
}
extern "C" {
    pub fn remove(__filename: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rename(__old: *const ::std::os::raw::c_char,
                  __new: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn renameat(__oldfd: ::std::os::raw::c_int,
                    __old: *const ::std::os::raw::c_char,
                    __newfd: ::std::os::raw::c_int,
                    __new: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
extern "C" {
    pub fn tmpfile64() -> *mut FILE;
}
extern "C" {
    pub fn tmpnam(__s: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tmpnam_r(__s: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tempnam(__dir: *const ::std::os::raw::c_char,
                   __pfx: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fcloseall() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fopen(__filename: *const ::std::os::raw::c_char,
                 __modes: *const ::std::os::raw::c_char) -> *mut FILE;
}
extern "C" {
    pub fn freopen(__filename: *const ::std::os::raw::c_char,
                   __modes: *const ::std::os::raw::c_char,
                   __stream: *mut FILE) -> *mut FILE;
}
extern "C" {
    pub fn fopen64(__filename: *const ::std::os::raw::c_char,
                   __modes: *const ::std::os::raw::c_char) -> *mut FILE;
}
extern "C" {
    pub fn freopen64(__filename: *const ::std::os::raw::c_char,
                     __modes: *const ::std::os::raw::c_char,
                     __stream: *mut FILE) -> *mut FILE;
}
extern "C" {
    pub fn fdopen(__fd: ::std::os::raw::c_int,
                  __modes: *const ::std::os::raw::c_char) -> *mut FILE;
}
extern "C" {
    pub fn fopencookie(__magic_cookie: *mut ::std::os::raw::c_void,
                       __modes: *const ::std::os::raw::c_char,
                       __io_funcs: _IO_cookie_io_functions_t) -> *mut FILE;
}
extern "C" {
    pub fn fmemopen(__s: *mut ::std::os::raw::c_void, __len: usize,
                    __modes: *const ::std::os::raw::c_char) -> *mut FILE;
}
extern "C" {
    pub fn open_memstream(__bufloc: *mut *mut ::std::os::raw::c_char,
                          __sizeloc: *mut usize) -> *mut FILE;
}
extern "C" {
    pub fn setbuf(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn setvbuf(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char,
                   __modes: ::std::os::raw::c_int, __n: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setbuffer(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char,
                     __size: usize);
}
extern "C" {
    pub fn setlinebuf(__stream: *mut FILE);
}
extern "C" {
    pub fn fprintf(__stream: *mut FILE,
                   __format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn printf(__format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sprintf(__s: *mut ::std::os::raw::c_char,
                   __format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfprintf(__s: *mut FILE, __format: *const ::std::os::raw::c_char,
                    __arg: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vprintf(__format: *const ::std::os::raw::c_char,
                   __arg: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsprintf(__s: *mut ::std::os::raw::c_char,
                    __format: *const ::std::os::raw::c_char,
                    __arg: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snprintf(__s: *mut ::std::os::raw::c_char, __maxlen: usize,
                    __format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsnprintf(__s: *mut ::std::os::raw::c_char, __maxlen: usize,
                     __format: *const ::std::os::raw::c_char,
                     __arg: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vasprintf(__ptr: *mut *mut ::std::os::raw::c_char,
                     __f: *const ::std::os::raw::c_char,
                     __arg: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __asprintf(__ptr: *mut *mut ::std::os::raw::c_char,
                      __fmt: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asprintf(__ptr: *mut *mut ::std::os::raw::c_char,
                    __fmt: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vdprintf(__fd: ::std::os::raw::c_int,
                    __fmt: *const ::std::os::raw::c_char,
                    __arg: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dprintf(__fd: ::std::os::raw::c_int,
                   __fmt: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fscanf(__stream: *mut FILE,
                  __format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scanf(__format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sscanf(__s: *const ::std::os::raw::c_char,
                  __format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfscanf(__s: *mut FILE, __format: *const ::std::os::raw::c_char,
                   __arg: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vscanf(__format: *const ::std::os::raw::c_char,
                  __arg: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsscanf(__s: *const ::std::os::raw::c_char,
                   __format: *const ::std::os::raw::c_char,
                   __arg: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar_unlocked() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc(__c: ::std::os::raw::c_int, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc(__c: ::std::os::raw::c_int, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar_unlocked(__c: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getw(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putw(__w: ::std::os::raw::c_int, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgets(__s: *mut ::std::os::raw::c_char, __n: ::std::os::raw::c_int,
                 __stream: *mut FILE) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fgets_unlocked(__s: *mut ::std::os::raw::c_char,
                          __n: ::std::os::raw::c_int, __stream: *mut FILE)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __getdelim(__lineptr: *mut *mut ::std::os::raw::c_char,
                      __n: *mut usize, __delimiter: ::std::os::raw::c_int,
                      __stream: *mut FILE) -> __ssize_t;
}
extern "C" {
    pub fn getdelim(__lineptr: *mut *mut ::std::os::raw::c_char,
                    __n: *mut usize, __delimiter: ::std::os::raw::c_int,
                    __stream: *mut FILE) -> __ssize_t;
}
extern "C" {
    pub fn getline(__lineptr: *mut *mut ::std::os::raw::c_char,
                   __n: *mut usize, __stream: *mut FILE) -> __ssize_t;
}
extern "C" {
    pub fn fputs(__s: *const ::std::os::raw::c_char, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn puts(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ungetc(__c: ::std::os::raw::c_int, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fread(__ptr: *mut ::std::os::raw::c_void, __size: usize,
                 __n: usize, __stream: *mut FILE) -> usize;
}
extern "C" {
    pub fn fwrite(__ptr: *const ::std::os::raw::c_void, __size: usize,
                  __n: usize, __s: *mut FILE) -> usize;
}
extern "C" {
    pub fn fputs_unlocked(__s: *const ::std::os::raw::c_char,
                          __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fread_unlocked(__ptr: *mut ::std::os::raw::c_void, __size: usize,
                          __n: usize, __stream: *mut FILE) -> usize;
}
extern "C" {
    pub fn fwrite_unlocked(__ptr: *const ::std::os::raw::c_void,
                           __size: usize, __n: usize, __stream: *mut FILE)
     -> usize;
}
extern "C" {
    pub fn fseek(__stream: *mut FILE, __off: ::std::os::raw::c_long,
                 __whence: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftell(__stream: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn rewind(__stream: *mut FILE);
}
extern "C" {
    pub fn fseeko(__stream: *mut FILE, __off: __off_t,
                  __whence: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftello(__stream: *mut FILE) -> __off_t;
}
extern "C" {
    pub fn fgetpos(__stream: *mut FILE, __pos: *mut fpos_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsetpos(__stream: *mut FILE, __pos: *const fpos_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fseeko64(__stream: *mut FILE, __off: __off64_t,
                    __whence: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftello64(__stream: *mut FILE) -> __off64_t;
}
extern "C" {
    pub fn fgetpos64(__stream: *mut FILE, __pos: *mut fpos64_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsetpos64(__stream: *mut FILE, __pos: *const fpos64_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr(__stream: *mut FILE);
}
extern "C" {
    pub fn feof(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr_unlocked(__stream: *mut FILE);
}
extern "C" {
    pub fn feof_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn perror(__s: *const ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "sys_nerr"]
    pub static mut sys_nerr: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "sys_errlist"]
    pub static mut sys_errlist: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    #[link_name = "_sys_nerr"]
    pub static mut _sys_nerr: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "_sys_errlist"]
    pub static mut _sys_errlist: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub fn fileno(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fileno_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn popen(__command: *const ::std::os::raw::c_char,
                 __modes: *const ::std::os::raw::c_char) -> *mut FILE;
}
extern "C" {
    pub fn pclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ctermid(__s: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn cuserid(__s: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct obstack {
    _unused: [u8; 0],
}
extern "C" {
    pub fn obstack_printf(__obstack: *mut obstack,
                          __format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn obstack_vprintf(__obstack: *mut obstack,
                           __format: *const ::std::os::raw::c_char,
                           __args: *mut __va_list_tag)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flockfile(__stream: *mut FILE);
}
extern "C" {
    pub fn ftrylockfile(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn funlockfile(__stream: *mut FILE);
}
pub const _ISupper: _bindgen_ty_4 = _bindgen_ty_4::_ISupper;
pub const _ISlower: _bindgen_ty_4 = _bindgen_ty_4::_ISlower;
pub const _ISalpha: _bindgen_ty_4 = _bindgen_ty_4::_ISalpha;
pub const _ISdigit: _bindgen_ty_4 = _bindgen_ty_4::_ISdigit;
pub const _ISxdigit: _bindgen_ty_4 = _bindgen_ty_4::_ISxdigit;
pub const _ISspace: _bindgen_ty_4 = _bindgen_ty_4::_ISspace;
pub const _ISprint: _bindgen_ty_4 = _bindgen_ty_4::_ISprint;
pub const _ISgraph: _bindgen_ty_4 = _bindgen_ty_4::_ISgraph;
pub const _ISblank: _bindgen_ty_4 = _bindgen_ty_4::_ISblank;
pub const _IScntrl: _bindgen_ty_4 = _bindgen_ty_4::_IScntrl;
pub const _ISpunct: _bindgen_ty_4 = _bindgen_ty_4::_ISpunct;
pub const _ISalnum: _bindgen_ty_4 = _bindgen_ty_4::_ISalnum;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_4 {
    _ISupper = 256,
    _ISlower = 512,
    _ISalpha = 1024,
    _ISdigit = 2048,
    _ISxdigit = 4096,
    _ISspace = 8192,
    _ISprint = 16384,
    _ISgraph = 32768,
    _ISblank = 1,
    _IScntrl = 2,
    _ISpunct = 4,
    _ISalnum = 8,
}
extern "C" {
    pub fn __ctype_b_loc() -> *mut *const ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn __ctype_tolower_loc() -> *mut *const __int32_t;
}
extern "C" {
    pub fn __ctype_toupper_loc() -> *mut *const __int32_t;
}
extern "C" {
    pub fn isalnum(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isalpha(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iscntrl(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isdigit(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn islower(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isgraph(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isprint(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ispunct(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isspace(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isupper(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isxdigit(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tolower(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn toupper(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isblank(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isctype(__c: ::std::os::raw::c_int, __mask: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isascii(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn toascii(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _toupper(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _tolower(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __locale_struct {
    pub __locales: [*mut __locale_data; 13usize],
    pub __ctype_b: *const ::std::os::raw::c_ushort,
    pub __ctype_tolower: *const ::std::os::raw::c_int,
    pub __ctype_toupper: *const ::std::os::raw::c_int,
    pub __names: [*const ::std::os::raw::c_char; 13usize],
}
#[test]
fn bindgen_test_layout___locale_struct() {
    assert_eq!(::std::mem::size_of::<__locale_struct>() , 232usize , concat !
               ( "Size of: " , stringify ! ( __locale_struct ) ));
    assert_eq! (::std::mem::align_of::<__locale_struct>() , 8usize , concat !
                ( "Alignment of " , stringify ! ( __locale_struct ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __locale_struct ) ) . __locales as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( __locale_struct ) ,
                "::" , stringify ! ( __locales ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __locale_struct ) ) . __ctype_b as *
                const _ as usize } , 104usize , concat ! (
                "Alignment of field: " , stringify ! ( __locale_struct ) ,
                "::" , stringify ! ( __ctype_b ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __locale_struct ) ) . __ctype_tolower as
                * const _ as usize } , 112usize , concat ! (
                "Alignment of field: " , stringify ! ( __locale_struct ) ,
                "::" , stringify ! ( __ctype_tolower ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __locale_struct ) ) . __ctype_toupper as
                * const _ as usize } , 120usize , concat ! (
                "Alignment of field: " , stringify ! ( __locale_struct ) ,
                "::" , stringify ! ( __ctype_toupper ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __locale_struct ) ) . __names as * const
                _ as usize } , 128usize , concat ! (
                "Alignment of field: " , stringify ! ( __locale_struct ) ,
                "::" , stringify ! ( __names ) ));
}
impl Clone for __locale_struct {
    fn clone(&self) -> Self { *self }
}
pub type __locale_t = *mut __locale_struct;
pub type locale_t = __locale_t;
extern "C" {
    pub fn isalnum_l(arg1: ::std::os::raw::c_int, arg2: __locale_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isalpha_l(arg1: ::std::os::raw::c_int, arg2: __locale_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iscntrl_l(arg1: ::std::os::raw::c_int, arg2: __locale_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isdigit_l(arg1: ::std::os::raw::c_int, arg2: __locale_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn islower_l(arg1: ::std::os::raw::c_int, arg2: __locale_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isgraph_l(arg1: ::std::os::raw::c_int, arg2: __locale_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isprint_l(arg1: ::std::os::raw::c_int, arg2: __locale_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ispunct_l(arg1: ::std::os::raw::c_int, arg2: __locale_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isspace_l(arg1: ::std::os::raw::c_int, arg2: __locale_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isupper_l(arg1: ::std::os::raw::c_int, arg2: __locale_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isxdigit_l(arg1: ::std::os::raw::c_int, arg2: __locale_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isblank_l(arg1: ::std::os::raw::c_int, arg2: __locale_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __tolower_l(__c: ::std::os::raw::c_int, __l: __locale_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tolower_l(__c: ::std::os::raw::c_int, __l: __locale_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __toupper_l(__c: ::std::os::raw::c_int, __l: __locale_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn toupper_l(__c: ::std::os::raw::c_int, __l: __locale_t)
     -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct stat {
    pub st_dev: __dev_t,
    pub st_ino: __ino_t,
    pub st_nlink: __nlink_t,
    pub st_mode: __mode_t,
    pub st_uid: __uid_t,
    pub st_gid: __gid_t,
    pub __pad0: ::std::os::raw::c_int,
    pub st_rdev: __dev_t,
    pub st_size: __off_t,
    pub st_blksize: __blksize_t,
    pub st_blocks: __blkcnt_t,
    pub st_atim: timespec,
    pub st_mtim: timespec,
    pub st_ctim: timespec,
    pub __glibc_reserved: [__syscall_slong_t; 3usize],
}
#[test]
fn bindgen_test_layout_stat() {
    assert_eq!(::std::mem::size_of::<stat>() , 144usize , concat ! (
               "Size of: " , stringify ! ( stat ) ));
    assert_eq! (::std::mem::align_of::<stat>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( stat ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const stat ) ) . st_dev as * const _ as usize }
                , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( stat ) , "::" ,
                stringify ! ( st_dev ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const stat ) ) . st_ino as * const _ as usize }
                , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( stat ) , "::" ,
                stringify ! ( st_ino ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const stat ) ) . st_nlink as * const _ as usize
                } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( stat ) , "::" ,
                stringify ! ( st_nlink ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const stat ) ) . st_mode as * const _ as usize
                } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( stat ) , "::" ,
                stringify ! ( st_mode ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const stat ) ) . st_uid as * const _ as usize }
                , 28usize , concat ! (
                "Alignment of field: " , stringify ! ( stat ) , "::" ,
                stringify ! ( st_uid ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const stat ) ) . st_gid as * const _ as usize }
                , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( stat ) , "::" ,
                stringify ! ( st_gid ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const stat ) ) . __pad0 as * const _ as usize }
                , 36usize , concat ! (
                "Alignment of field: " , stringify ! ( stat ) , "::" ,
                stringify ! ( __pad0 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const stat ) ) . st_rdev as * const _ as usize
                } , 40usize , concat ! (
                "Alignment of field: " , stringify ! ( stat ) , "::" ,
                stringify ! ( st_rdev ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const stat ) ) . st_size as * const _ as usize
                } , 48usize , concat ! (
                "Alignment of field: " , stringify ! ( stat ) , "::" ,
                stringify ! ( st_size ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const stat ) ) . st_blksize as * const _ as
                usize } , 56usize , concat ! (
                "Alignment of field: " , stringify ! ( stat ) , "::" ,
                stringify ! ( st_blksize ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const stat ) ) . st_blocks as * const _ as
                usize } , 64usize , concat ! (
                "Alignment of field: " , stringify ! ( stat ) , "::" ,
                stringify ! ( st_blocks ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const stat ) ) . st_atim as * const _ as usize
                } , 72usize , concat ! (
                "Alignment of field: " , stringify ! ( stat ) , "::" ,
                stringify ! ( st_atim ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const stat ) ) . st_mtim as * const _ as usize
                } , 88usize , concat ! (
                "Alignment of field: " , stringify ! ( stat ) , "::" ,
                stringify ! ( st_mtim ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const stat ) ) . st_ctim as * const _ as usize
                } , 104usize , concat ! (
                "Alignment of field: " , stringify ! ( stat ) , "::" ,
                stringify ! ( st_ctim ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const stat ) ) . __glibc_reserved as * const _
                as usize } , 120usize , concat ! (
                "Alignment of field: " , stringify ! ( stat ) , "::" ,
                stringify ! ( __glibc_reserved ) ));
}
impl Clone for stat {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct stat64 {
    pub st_dev: __dev_t,
    pub st_ino: __ino64_t,
    pub st_nlink: __nlink_t,
    pub st_mode: __mode_t,
    pub st_uid: __uid_t,
    pub st_gid: __gid_t,
    pub __pad0: ::std::os::raw::c_int,
    pub st_rdev: __dev_t,
    pub st_size: __off_t,
    pub st_blksize: __blksize_t,
    pub st_blocks: __blkcnt64_t,
    pub st_atim: timespec,
    pub st_mtim: timespec,
    pub st_ctim: timespec,
    pub __glibc_reserved: [__syscall_slong_t; 3usize],
}
#[test]
fn bindgen_test_layout_stat64() {
    assert_eq!(::std::mem::size_of::<stat64>() , 144usize , concat ! (
               "Size of: " , stringify ! ( stat64 ) ));
    assert_eq! (::std::mem::align_of::<stat64>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( stat64 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const stat64 ) ) . st_dev as * const _ as usize
                } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( stat64 ) , "::" ,
                stringify ! ( st_dev ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const stat64 ) ) . st_ino as * const _ as usize
                } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( stat64 ) , "::" ,
                stringify ! ( st_ino ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const stat64 ) ) . st_nlink as * const _ as
                usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( stat64 ) , "::" ,
                stringify ! ( st_nlink ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const stat64 ) ) . st_mode as * const _ as
                usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( stat64 ) , "::" ,
                stringify ! ( st_mode ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const stat64 ) ) . st_uid as * const _ as usize
                } , 28usize , concat ! (
                "Alignment of field: " , stringify ! ( stat64 ) , "::" ,
                stringify ! ( st_uid ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const stat64 ) ) . st_gid as * const _ as usize
                } , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( stat64 ) , "::" ,
                stringify ! ( st_gid ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const stat64 ) ) . __pad0 as * const _ as usize
                } , 36usize , concat ! (
                "Alignment of field: " , stringify ! ( stat64 ) , "::" ,
                stringify ! ( __pad0 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const stat64 ) ) . st_rdev as * const _ as
                usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! ( stat64 ) , "::" ,
                stringify ! ( st_rdev ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const stat64 ) ) . st_size as * const _ as
                usize } , 48usize , concat ! (
                "Alignment of field: " , stringify ! ( stat64 ) , "::" ,
                stringify ! ( st_size ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const stat64 ) ) . st_blksize as * const _ as
                usize } , 56usize , concat ! (
                "Alignment of field: " , stringify ! ( stat64 ) , "::" ,
                stringify ! ( st_blksize ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const stat64 ) ) . st_blocks as * const _ as
                usize } , 64usize , concat ! (
                "Alignment of field: " , stringify ! ( stat64 ) , "::" ,
                stringify ! ( st_blocks ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const stat64 ) ) . st_atim as * const _ as
                usize } , 72usize , concat ! (
                "Alignment of field: " , stringify ! ( stat64 ) , "::" ,
                stringify ! ( st_atim ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const stat64 ) ) . st_mtim as * const _ as
                usize } , 88usize , concat ! (
                "Alignment of field: " , stringify ! ( stat64 ) , "::" ,
                stringify ! ( st_mtim ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const stat64 ) ) . st_ctim as * const _ as
                usize } , 104usize , concat ! (
                "Alignment of field: " , stringify ! ( stat64 ) , "::" ,
                stringify ! ( st_ctim ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const stat64 ) ) . __glibc_reserved as * const
                _ as usize } , 120usize , concat ! (
                "Alignment of field: " , stringify ! ( stat64 ) , "::" ,
                stringify ! ( __glibc_reserved ) ));
}
impl Clone for stat64 {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn stat(__file: *const ::std::os::raw::c_char, __buf: *mut stat)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fstat(__fd: ::std::os::raw::c_int, __buf: *mut stat)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn stat64(__file: *const ::std::os::raw::c_char, __buf: *mut stat64)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fstat64(__fd: ::std::os::raw::c_int, __buf: *mut stat64)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fstatat(__fd: ::std::os::raw::c_int,
                   __file: *const ::std::os::raw::c_char, __buf: *mut stat,
                   __flag: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fstatat64(__fd: ::std::os::raw::c_int,
                     __file: *const ::std::os::raw::c_char,
                     __buf: *mut stat64, __flag: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lstat(__file: *const ::std::os::raw::c_char, __buf: *mut stat)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lstat64(__file: *const ::std::os::raw::c_char, __buf: *mut stat64)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chmod(__file: *const ::std::os::raw::c_char, __mode: __mode_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lchmod(__file: *const ::std::os::raw::c_char, __mode: __mode_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fchmod(__fd: ::std::os::raw::c_int, __mode: __mode_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fchmodat(__fd: ::std::os::raw::c_int,
                    __file: *const ::std::os::raw::c_char, __mode: __mode_t,
                    __flag: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn umask(__mask: __mode_t) -> __mode_t;
}
extern "C" {
    pub fn getumask() -> __mode_t;
}
extern "C" {
    pub fn mkdir(__path: *const ::std::os::raw::c_char, __mode: __mode_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkdirat(__fd: ::std::os::raw::c_int,
                   __path: *const ::std::os::raw::c_char, __mode: __mode_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mknod(__path: *const ::std::os::raw::c_char, __mode: __mode_t,
                 __dev: __dev_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mknodat(__fd: ::std::os::raw::c_int,
                   __path: *const ::std::os::raw::c_char, __mode: __mode_t,
                   __dev: __dev_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkfifo(__path: *const ::std::os::raw::c_char, __mode: __mode_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkfifoat(__fd: ::std::os::raw::c_int,
                    __path: *const ::std::os::raw::c_char, __mode: __mode_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn utimensat(__fd: ::std::os::raw::c_int,
                     __path: *const ::std::os::raw::c_char,
                     __times: *const timespec, __flags: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn futimens(__fd: ::std::os::raw::c_int, __times: *const timespec)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __fxstat(__ver: ::std::os::raw::c_int,
                    __fildes: ::std::os::raw::c_int, __stat_buf: *mut stat)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __xstat(__ver: ::std::os::raw::c_int,
                   __filename: *const ::std::os::raw::c_char,
                   __stat_buf: *mut stat) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __lxstat(__ver: ::std::os::raw::c_int,
                    __filename: *const ::std::os::raw::c_char,
                    __stat_buf: *mut stat) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __fxstatat(__ver: ::std::os::raw::c_int,
                      __fildes: ::std::os::raw::c_int,
                      __filename: *const ::std::os::raw::c_char,
                      __stat_buf: *mut stat, __flag: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __fxstat64(__ver: ::std::os::raw::c_int,
                      __fildes: ::std::os::raw::c_int,
                      __stat_buf: *mut stat64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __xstat64(__ver: ::std::os::raw::c_int,
                     __filename: *const ::std::os::raw::c_char,
                     __stat_buf: *mut stat64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __lxstat64(__ver: ::std::os::raw::c_int,
                      __filename: *const ::std::os::raw::c_char,
                      __stat_buf: *mut stat64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __fxstatat64(__ver: ::std::os::raw::c_int,
                        __fildes: ::std::os::raw::c_int,
                        __filename: *const ::std::os::raw::c_char,
                        __stat_buf: *mut stat64,
                        __flag: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __xmknod(__ver: ::std::os::raw::c_int,
                    __path: *const ::std::os::raw::c_char, __mode: __mode_t,
                    __dev: *mut __dev_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __xmknodat(__ver: ::std::os::raw::c_int,
                      __fd: ::std::os::raw::c_int,
                      __path: *const ::std::os::raw::c_char, __mode: __mode_t,
                      __dev: *mut __dev_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __sigismember(arg1: *const __sigset_t, arg2: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __sigaddset(arg1: *mut __sigset_t, arg2: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __sigdelset(arg1: *mut __sigset_t, arg2: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
pub type sig_atomic_t = __sig_atomic_t;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct sigval {
    pub sival_int: __BindgenUnionField<::std::os::raw::c_int>,
    pub sival_ptr: __BindgenUnionField<*mut ::std::os::raw::c_void>,
    pub bindgen_union_field: u64,
}
#[test]
fn bindgen_test_layout_sigval() {
    assert_eq!(::std::mem::size_of::<sigval>() , 8usize , concat ! (
               "Size of: " , stringify ! ( sigval ) ));
    assert_eq! (::std::mem::align_of::<sigval>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( sigval ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigval ) ) . sival_int as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( sigval ) , "::" ,
                stringify ! ( sival_int ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigval ) ) . sival_ptr as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( sigval ) , "::" ,
                stringify ! ( sival_ptr ) ));
}
impl Clone for sigval {
    fn clone(&self) -> Self { *self }
}
pub type sigval_t = sigval;
pub type __sigchld_clock_t = __clock_t;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct siginfo_t {
    pub si_signo: ::std::os::raw::c_int,
    pub si_errno: ::std::os::raw::c_int,
    pub si_code: ::std::os::raw::c_int,
    pub _sifields: siginfo_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct siginfo_t__bindgen_ty_1 {
    pub _pad: __BindgenUnionField<[::std::os::raw::c_int; 28usize]>,
    pub _kill: __BindgenUnionField<siginfo_t__bindgen_ty_1__bindgen_ty_1>,
    pub _timer: __BindgenUnionField<siginfo_t__bindgen_ty_1__bindgen_ty_2>,
    pub _rt: __BindgenUnionField<siginfo_t__bindgen_ty_1__bindgen_ty_3>,
    pub _sigchld: __BindgenUnionField<siginfo_t__bindgen_ty_1__bindgen_ty_4>,
    pub _sigfault: __BindgenUnionField<siginfo_t__bindgen_ty_1__bindgen_ty_5>,
    pub _sigpoll: __BindgenUnionField<siginfo_t__bindgen_ty_1__bindgen_ty_6>,
    pub _sigsys: __BindgenUnionField<siginfo_t__bindgen_ty_1__bindgen_ty_7>,
    pub bindgen_union_field: [u64; 14usize],
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct siginfo_t__bindgen_ty_1__bindgen_ty_1 {
    pub si_pid: __pid_t,
    pub si_uid: __uid_t,
}
#[test]
fn bindgen_test_layout_siginfo_t__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<siginfo_t__bindgen_ty_1__bindgen_ty_1>()
               , 8usize , concat ! (
               "Size of: " , stringify ! (
               siginfo_t__bindgen_ty_1__bindgen_ty_1 ) ));
    assert_eq! (::std::mem::align_of::<siginfo_t__bindgen_ty_1__bindgen_ty_1>()
                , 4usize , concat ! (
                "Alignment of " , stringify ! (
                siginfo_t__bindgen_ty_1__bindgen_ty_1 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const siginfo_t__bindgen_ty_1__bindgen_ty_1 ) )
                . si_pid as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                siginfo_t__bindgen_ty_1__bindgen_ty_1 ) , "::" , stringify ! (
                si_pid ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const siginfo_t__bindgen_ty_1__bindgen_ty_1 ) )
                . si_uid as * const _ as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! (
                siginfo_t__bindgen_ty_1__bindgen_ty_1 ) , "::" , stringify ! (
                si_uid ) ));
}
impl Clone for siginfo_t__bindgen_ty_1__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct siginfo_t__bindgen_ty_1__bindgen_ty_2 {
    pub si_tid: ::std::os::raw::c_int,
    pub si_overrun: ::std::os::raw::c_int,
    pub si_sigval: sigval_t,
}
#[test]
fn bindgen_test_layout_siginfo_t__bindgen_ty_1__bindgen_ty_2() {
    assert_eq!(::std::mem::size_of::<siginfo_t__bindgen_ty_1__bindgen_ty_2>()
               , 16usize , concat ! (
               "Size of: " , stringify ! (
               siginfo_t__bindgen_ty_1__bindgen_ty_2 ) ));
    assert_eq! (::std::mem::align_of::<siginfo_t__bindgen_ty_1__bindgen_ty_2>()
                , 8usize , concat ! (
                "Alignment of " , stringify ! (
                siginfo_t__bindgen_ty_1__bindgen_ty_2 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const siginfo_t__bindgen_ty_1__bindgen_ty_2 ) )
                . si_tid as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                siginfo_t__bindgen_ty_1__bindgen_ty_2 ) , "::" , stringify ! (
                si_tid ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const siginfo_t__bindgen_ty_1__bindgen_ty_2 ) )
                . si_overrun as * const _ as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! (
                siginfo_t__bindgen_ty_1__bindgen_ty_2 ) , "::" , stringify ! (
                si_overrun ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const siginfo_t__bindgen_ty_1__bindgen_ty_2 ) )
                . si_sigval as * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! (
                siginfo_t__bindgen_ty_1__bindgen_ty_2 ) , "::" , stringify ! (
                si_sigval ) ));
}
impl Clone for siginfo_t__bindgen_ty_1__bindgen_ty_2 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct siginfo_t__bindgen_ty_1__bindgen_ty_3 {
    pub si_pid: __pid_t,
    pub si_uid: __uid_t,
    pub si_sigval: sigval_t,
}
#[test]
fn bindgen_test_layout_siginfo_t__bindgen_ty_1__bindgen_ty_3() {
    assert_eq!(::std::mem::size_of::<siginfo_t__bindgen_ty_1__bindgen_ty_3>()
               , 16usize , concat ! (
               "Size of: " , stringify ! (
               siginfo_t__bindgen_ty_1__bindgen_ty_3 ) ));
    assert_eq! (::std::mem::align_of::<siginfo_t__bindgen_ty_1__bindgen_ty_3>()
                , 8usize , concat ! (
                "Alignment of " , stringify ! (
                siginfo_t__bindgen_ty_1__bindgen_ty_3 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const siginfo_t__bindgen_ty_1__bindgen_ty_3 ) )
                . si_pid as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                siginfo_t__bindgen_ty_1__bindgen_ty_3 ) , "::" , stringify ! (
                si_pid ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const siginfo_t__bindgen_ty_1__bindgen_ty_3 ) )
                . si_uid as * const _ as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! (
                siginfo_t__bindgen_ty_1__bindgen_ty_3 ) , "::" , stringify ! (
                si_uid ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const siginfo_t__bindgen_ty_1__bindgen_ty_3 ) )
                . si_sigval as * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! (
                siginfo_t__bindgen_ty_1__bindgen_ty_3 ) , "::" , stringify ! (
                si_sigval ) ));
}
impl Clone for siginfo_t__bindgen_ty_1__bindgen_ty_3 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct siginfo_t__bindgen_ty_1__bindgen_ty_4 {
    pub si_pid: __pid_t,
    pub si_uid: __uid_t,
    pub si_status: ::std::os::raw::c_int,
    pub si_utime: __sigchld_clock_t,
    pub si_stime: __sigchld_clock_t,
}
#[test]
fn bindgen_test_layout_siginfo_t__bindgen_ty_1__bindgen_ty_4() {
    assert_eq!(::std::mem::size_of::<siginfo_t__bindgen_ty_1__bindgen_ty_4>()
               , 32usize , concat ! (
               "Size of: " , stringify ! (
               siginfo_t__bindgen_ty_1__bindgen_ty_4 ) ));
    assert_eq! (::std::mem::align_of::<siginfo_t__bindgen_ty_1__bindgen_ty_4>()
                , 8usize , concat ! (
                "Alignment of " , stringify ! (
                siginfo_t__bindgen_ty_1__bindgen_ty_4 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const siginfo_t__bindgen_ty_1__bindgen_ty_4 ) )
                . si_pid as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                siginfo_t__bindgen_ty_1__bindgen_ty_4 ) , "::" , stringify ! (
                si_pid ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const siginfo_t__bindgen_ty_1__bindgen_ty_4 ) )
                . si_uid as * const _ as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! (
                siginfo_t__bindgen_ty_1__bindgen_ty_4 ) , "::" , stringify ! (
                si_uid ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const siginfo_t__bindgen_ty_1__bindgen_ty_4 ) )
                . si_status as * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! (
                siginfo_t__bindgen_ty_1__bindgen_ty_4 ) , "::" , stringify ! (
                si_status ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const siginfo_t__bindgen_ty_1__bindgen_ty_4 ) )
                . si_utime as * const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! (
                siginfo_t__bindgen_ty_1__bindgen_ty_4 ) , "::" , stringify ! (
                si_utime ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const siginfo_t__bindgen_ty_1__bindgen_ty_4 ) )
                . si_stime as * const _ as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! (
                siginfo_t__bindgen_ty_1__bindgen_ty_4 ) , "::" , stringify ! (
                si_stime ) ));
}
impl Clone for siginfo_t__bindgen_ty_1__bindgen_ty_4 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct siginfo_t__bindgen_ty_1__bindgen_ty_5 {
    pub si_addr: *mut ::std::os::raw::c_void,
    pub si_addr_lsb: ::std::os::raw::c_short,
    pub si_addr_bnd: siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1 {
    pub _lower: *mut ::std::os::raw::c_void,
    pub _upper: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1>()
               , 16usize , concat ! (
               "Size of: " , stringify ! (
               siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1 ) ));
    assert_eq! (::std::mem::align_of::<siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1>()
                , 8usize , concat ! (
                "Alignment of " , stringify ! (
                siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1 ) ));
    assert_eq! (unsafe {
                & (
                * (
                0 as * const
                siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1 ) ) .
                _lower as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1 ) , "::" ,
                stringify ! ( _lower ) ));
    assert_eq! (unsafe {
                & (
                * (
                0 as * const
                siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1 ) ) .
                _upper as * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! (
                siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1 ) , "::" ,
                stringify ! ( _upper ) ));
}
impl Clone for siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_siginfo_t__bindgen_ty_1__bindgen_ty_5() {
    assert_eq!(::std::mem::size_of::<siginfo_t__bindgen_ty_1__bindgen_ty_5>()
               , 32usize , concat ! (
               "Size of: " , stringify ! (
               siginfo_t__bindgen_ty_1__bindgen_ty_5 ) ));
    assert_eq! (::std::mem::align_of::<siginfo_t__bindgen_ty_1__bindgen_ty_5>()
                , 8usize , concat ! (
                "Alignment of " , stringify ! (
                siginfo_t__bindgen_ty_1__bindgen_ty_5 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const siginfo_t__bindgen_ty_1__bindgen_ty_5 ) )
                . si_addr as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                siginfo_t__bindgen_ty_1__bindgen_ty_5 ) , "::" , stringify ! (
                si_addr ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const siginfo_t__bindgen_ty_1__bindgen_ty_5 ) )
                . si_addr_lsb as * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! (
                siginfo_t__bindgen_ty_1__bindgen_ty_5 ) , "::" , stringify ! (
                si_addr_lsb ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const siginfo_t__bindgen_ty_1__bindgen_ty_5 ) )
                . si_addr_bnd as * const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! (
                siginfo_t__bindgen_ty_1__bindgen_ty_5 ) , "::" , stringify ! (
                si_addr_bnd ) ));
}
impl Clone for siginfo_t__bindgen_ty_1__bindgen_ty_5 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct siginfo_t__bindgen_ty_1__bindgen_ty_6 {
    pub si_band: ::std::os::raw::c_long,
    pub si_fd: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_siginfo_t__bindgen_ty_1__bindgen_ty_6() {
    assert_eq!(::std::mem::size_of::<siginfo_t__bindgen_ty_1__bindgen_ty_6>()
               , 16usize , concat ! (
               "Size of: " , stringify ! (
               siginfo_t__bindgen_ty_1__bindgen_ty_6 ) ));
    assert_eq! (::std::mem::align_of::<siginfo_t__bindgen_ty_1__bindgen_ty_6>()
                , 8usize , concat ! (
                "Alignment of " , stringify ! (
                siginfo_t__bindgen_ty_1__bindgen_ty_6 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const siginfo_t__bindgen_ty_1__bindgen_ty_6 ) )
                . si_band as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                siginfo_t__bindgen_ty_1__bindgen_ty_6 ) , "::" , stringify ! (
                si_band ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const siginfo_t__bindgen_ty_1__bindgen_ty_6 ) )
                . si_fd as * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! (
                siginfo_t__bindgen_ty_1__bindgen_ty_6 ) , "::" , stringify ! (
                si_fd ) ));
}
impl Clone for siginfo_t__bindgen_ty_1__bindgen_ty_6 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct siginfo_t__bindgen_ty_1__bindgen_ty_7 {
    pub _call_addr: *mut ::std::os::raw::c_void,
    pub _syscall: ::std::os::raw::c_int,
    pub _arch: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_siginfo_t__bindgen_ty_1__bindgen_ty_7() {
    assert_eq!(::std::mem::size_of::<siginfo_t__bindgen_ty_1__bindgen_ty_7>()
               , 16usize , concat ! (
               "Size of: " , stringify ! (
               siginfo_t__bindgen_ty_1__bindgen_ty_7 ) ));
    assert_eq! (::std::mem::align_of::<siginfo_t__bindgen_ty_1__bindgen_ty_7>()
                , 8usize , concat ! (
                "Alignment of " , stringify ! (
                siginfo_t__bindgen_ty_1__bindgen_ty_7 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const siginfo_t__bindgen_ty_1__bindgen_ty_7 ) )
                . _call_addr as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                siginfo_t__bindgen_ty_1__bindgen_ty_7 ) , "::" , stringify ! (
                _call_addr ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const siginfo_t__bindgen_ty_1__bindgen_ty_7 ) )
                . _syscall as * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! (
                siginfo_t__bindgen_ty_1__bindgen_ty_7 ) , "::" , stringify ! (
                _syscall ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const siginfo_t__bindgen_ty_1__bindgen_ty_7 ) )
                . _arch as * const _ as usize } , 12usize , concat ! (
                "Alignment of field: " , stringify ! (
                siginfo_t__bindgen_ty_1__bindgen_ty_7 ) , "::" , stringify ! (
                _arch ) ));
}
impl Clone for siginfo_t__bindgen_ty_1__bindgen_ty_7 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_siginfo_t__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<siginfo_t__bindgen_ty_1>() , 112usize ,
               concat ! (
               "Size of: " , stringify ! ( siginfo_t__bindgen_ty_1 ) ));
    assert_eq! (::std::mem::align_of::<siginfo_t__bindgen_ty_1>() , 8usize ,
                concat ! (
                "Alignment of " , stringify ! ( siginfo_t__bindgen_ty_1 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const siginfo_t__bindgen_ty_1 ) ) . _pad as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( siginfo_t__bindgen_ty_1
                ) , "::" , stringify ! ( _pad ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const siginfo_t__bindgen_ty_1 ) ) . _kill as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( siginfo_t__bindgen_ty_1
                ) , "::" , stringify ! ( _kill ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const siginfo_t__bindgen_ty_1 ) ) . _timer as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( siginfo_t__bindgen_ty_1
                ) , "::" , stringify ! ( _timer ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const siginfo_t__bindgen_ty_1 ) ) . _rt as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( siginfo_t__bindgen_ty_1
                ) , "::" , stringify ! ( _rt ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const siginfo_t__bindgen_ty_1 ) ) . _sigchld as
                * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( siginfo_t__bindgen_ty_1
                ) , "::" , stringify ! ( _sigchld ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const siginfo_t__bindgen_ty_1 ) ) . _sigfault
                as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( siginfo_t__bindgen_ty_1
                ) , "::" , stringify ! ( _sigfault ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const siginfo_t__bindgen_ty_1 ) ) . _sigpoll as
                * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( siginfo_t__bindgen_ty_1
                ) , "::" , stringify ! ( _sigpoll ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const siginfo_t__bindgen_ty_1 ) ) . _sigsys as
                * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( siginfo_t__bindgen_ty_1
                ) , "::" , stringify ! ( _sigsys ) ));
}
impl Clone for siginfo_t__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_siginfo_t() {
    assert_eq!(::std::mem::size_of::<siginfo_t>() , 128usize , concat ! (
               "Size of: " , stringify ! ( siginfo_t ) ));
    assert_eq! (::std::mem::align_of::<siginfo_t>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( siginfo_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const siginfo_t ) ) . si_signo as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( siginfo_t ) , "::" ,
                stringify ! ( si_signo ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const siginfo_t ) ) . si_errno as * const _ as
                usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( siginfo_t ) , "::" ,
                stringify ! ( si_errno ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const siginfo_t ) ) . si_code as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( siginfo_t ) , "::" ,
                stringify ! ( si_code ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const siginfo_t ) ) . _sifields as * const _ as
                usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( siginfo_t ) , "::" ,
                stringify ! ( _sifields ) ));
}
impl Clone for siginfo_t {
    fn clone(&self) -> Self { *self }
}
pub const SI_ASYNCNL: _bindgen_ty_5 = _bindgen_ty_5::SI_ASYNCNL;
pub const SI_TKILL: _bindgen_ty_5 = _bindgen_ty_5::SI_TKILL;
pub const SI_SIGIO: _bindgen_ty_5 = _bindgen_ty_5::SI_SIGIO;
pub const SI_ASYNCIO: _bindgen_ty_5 = _bindgen_ty_5::SI_ASYNCIO;
pub const SI_MESGQ: _bindgen_ty_5 = _bindgen_ty_5::SI_MESGQ;
pub const SI_TIMER: _bindgen_ty_5 = _bindgen_ty_5::SI_TIMER;
pub const SI_QUEUE: _bindgen_ty_5 = _bindgen_ty_5::SI_QUEUE;
pub const SI_USER: _bindgen_ty_5 = _bindgen_ty_5::SI_USER;
pub const SI_KERNEL: _bindgen_ty_5 = _bindgen_ty_5::SI_KERNEL;
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_5 {
    SI_ASYNCNL = -60,
    SI_TKILL = -6,
    SI_SIGIO = -5,
    SI_ASYNCIO = -4,
    SI_MESGQ = -3,
    SI_TIMER = -2,
    SI_QUEUE = -1,
    SI_USER = 0,
    SI_KERNEL = 128,
}
pub const ILL_ILLOPC: _bindgen_ty_6 = _bindgen_ty_6::ILL_ILLOPC;
pub const ILL_ILLOPN: _bindgen_ty_6 = _bindgen_ty_6::ILL_ILLOPN;
pub const ILL_ILLADR: _bindgen_ty_6 = _bindgen_ty_6::ILL_ILLADR;
pub const ILL_ILLTRP: _bindgen_ty_6 = _bindgen_ty_6::ILL_ILLTRP;
pub const ILL_PRVOPC: _bindgen_ty_6 = _bindgen_ty_6::ILL_PRVOPC;
pub const ILL_PRVREG: _bindgen_ty_6 = _bindgen_ty_6::ILL_PRVREG;
pub const ILL_COPROC: _bindgen_ty_6 = _bindgen_ty_6::ILL_COPROC;
pub const ILL_BADSTK: _bindgen_ty_6 = _bindgen_ty_6::ILL_BADSTK;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_6 {
    ILL_ILLOPC = 1,
    ILL_ILLOPN = 2,
    ILL_ILLADR = 3,
    ILL_ILLTRP = 4,
    ILL_PRVOPC = 5,
    ILL_PRVREG = 6,
    ILL_COPROC = 7,
    ILL_BADSTK = 8,
}
pub const FPE_INTDIV: _bindgen_ty_7 = _bindgen_ty_7::FPE_INTDIV;
pub const FPE_INTOVF: _bindgen_ty_7 = _bindgen_ty_7::FPE_INTOVF;
pub const FPE_FLTDIV: _bindgen_ty_7 = _bindgen_ty_7::FPE_FLTDIV;
pub const FPE_FLTOVF: _bindgen_ty_7 = _bindgen_ty_7::FPE_FLTOVF;
pub const FPE_FLTUND: _bindgen_ty_7 = _bindgen_ty_7::FPE_FLTUND;
pub const FPE_FLTRES: _bindgen_ty_7 = _bindgen_ty_7::FPE_FLTRES;
pub const FPE_FLTINV: _bindgen_ty_7 = _bindgen_ty_7::FPE_FLTINV;
pub const FPE_FLTSUB: _bindgen_ty_7 = _bindgen_ty_7::FPE_FLTSUB;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_7 {
    FPE_INTDIV = 1,
    FPE_INTOVF = 2,
    FPE_FLTDIV = 3,
    FPE_FLTOVF = 4,
    FPE_FLTUND = 5,
    FPE_FLTRES = 6,
    FPE_FLTINV = 7,
    FPE_FLTSUB = 8,
}
pub const SEGV_MAPERR: _bindgen_ty_8 = _bindgen_ty_8::SEGV_MAPERR;
pub const SEGV_ACCERR: _bindgen_ty_8 = _bindgen_ty_8::SEGV_ACCERR;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_8 { SEGV_MAPERR = 1, SEGV_ACCERR = 2, }
pub const BUS_ADRALN: _bindgen_ty_9 = _bindgen_ty_9::BUS_ADRALN;
pub const BUS_ADRERR: _bindgen_ty_9 = _bindgen_ty_9::BUS_ADRERR;
pub const BUS_OBJERR: _bindgen_ty_9 = _bindgen_ty_9::BUS_OBJERR;
pub const BUS_MCEERR_AR: _bindgen_ty_9 = _bindgen_ty_9::BUS_MCEERR_AR;
pub const BUS_MCEERR_AO: _bindgen_ty_9 = _bindgen_ty_9::BUS_MCEERR_AO;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_9 {
    BUS_ADRALN = 1,
    BUS_ADRERR = 2,
    BUS_OBJERR = 3,
    BUS_MCEERR_AR = 4,
    BUS_MCEERR_AO = 5,
}
pub const TRAP_BRKPT: _bindgen_ty_10 = _bindgen_ty_10::TRAP_BRKPT;
pub const TRAP_TRACE: _bindgen_ty_10 = _bindgen_ty_10::TRAP_TRACE;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_10 { TRAP_BRKPT = 1, TRAP_TRACE = 2, }
pub const CLD_EXITED: _bindgen_ty_11 = _bindgen_ty_11::CLD_EXITED;
pub const CLD_KILLED: _bindgen_ty_11 = _bindgen_ty_11::CLD_KILLED;
pub const CLD_DUMPED: _bindgen_ty_11 = _bindgen_ty_11::CLD_DUMPED;
pub const CLD_TRAPPED: _bindgen_ty_11 = _bindgen_ty_11::CLD_TRAPPED;
pub const CLD_STOPPED: _bindgen_ty_11 = _bindgen_ty_11::CLD_STOPPED;
pub const CLD_CONTINUED: _bindgen_ty_11 = _bindgen_ty_11::CLD_CONTINUED;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_11 {
    CLD_EXITED = 1,
    CLD_KILLED = 2,
    CLD_DUMPED = 3,
    CLD_TRAPPED = 4,
    CLD_STOPPED = 5,
    CLD_CONTINUED = 6,
}
pub const POLL_IN: _bindgen_ty_12 = _bindgen_ty_12::POLL_IN;
pub const POLL_OUT: _bindgen_ty_12 = _bindgen_ty_12::POLL_OUT;
pub const POLL_MSG: _bindgen_ty_12 = _bindgen_ty_12::POLL_MSG;
pub const POLL_ERR: _bindgen_ty_12 = _bindgen_ty_12::POLL_ERR;
pub const POLL_PRI: _bindgen_ty_12 = _bindgen_ty_12::POLL_PRI;
pub const POLL_HUP: _bindgen_ty_12 = _bindgen_ty_12::POLL_HUP;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_12 {
    POLL_IN = 1,
    POLL_OUT = 2,
    POLL_MSG = 3,
    POLL_ERR = 4,
    POLL_PRI = 5,
    POLL_HUP = 6,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct sigevent {
    pub sigev_value: sigval_t,
    pub sigev_signo: ::std::os::raw::c_int,
    pub sigev_notify: ::std::os::raw::c_int,
    pub _sigev_un: sigevent__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct sigevent__bindgen_ty_1 {
    pub _pad: __BindgenUnionField<[::std::os::raw::c_int; 12usize]>,
    pub _tid: __BindgenUnionField<__pid_t>,
    pub _sigev_thread: __BindgenUnionField<sigevent__bindgen_ty_1__bindgen_ty_1>,
    pub bindgen_union_field: [u64; 6usize],
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct sigevent__bindgen_ty_1__bindgen_ty_1 {
    pub _function: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                  sigval_t)>,
    pub _attribute: *mut pthread_attr_t,
}
#[test]
fn bindgen_test_layout_sigevent__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<sigevent__bindgen_ty_1__bindgen_ty_1>() ,
               16usize , concat ! (
               "Size of: " , stringify ! (
               sigevent__bindgen_ty_1__bindgen_ty_1 ) ));
    assert_eq! (::std::mem::align_of::<sigevent__bindgen_ty_1__bindgen_ty_1>()
                , 8usize , concat ! (
                "Alignment of " , stringify ! (
                sigevent__bindgen_ty_1__bindgen_ty_1 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigevent__bindgen_ty_1__bindgen_ty_1 ) )
                . _function as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                sigevent__bindgen_ty_1__bindgen_ty_1 ) , "::" , stringify ! (
                _function ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigevent__bindgen_ty_1__bindgen_ty_1 ) )
                . _attribute as * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! (
                sigevent__bindgen_ty_1__bindgen_ty_1 ) , "::" , stringify ! (
                _attribute ) ));
}
impl Clone for sigevent__bindgen_ty_1__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_sigevent__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<sigevent__bindgen_ty_1>() , 48usize ,
               concat ! ( "Size of: " , stringify ! ( sigevent__bindgen_ty_1 )
               ));
    assert_eq! (::std::mem::align_of::<sigevent__bindgen_ty_1>() , 8usize ,
                concat ! (
                "Alignment of " , stringify ! ( sigevent__bindgen_ty_1 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigevent__bindgen_ty_1 ) ) . _pad as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( sigevent__bindgen_ty_1
                ) , "::" , stringify ! ( _pad ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigevent__bindgen_ty_1 ) ) . _tid as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( sigevent__bindgen_ty_1
                ) , "::" , stringify ! ( _tid ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigevent__bindgen_ty_1 ) ) .
                _sigev_thread as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( sigevent__bindgen_ty_1
                ) , "::" , stringify ! ( _sigev_thread ) ));
}
impl Clone for sigevent__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_sigevent() {
    assert_eq!(::std::mem::size_of::<sigevent>() , 64usize , concat ! (
               "Size of: " , stringify ! ( sigevent ) ));
    assert_eq! (::std::mem::align_of::<sigevent>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( sigevent ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigevent ) ) . sigev_value as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( sigevent ) , "::" ,
                stringify ! ( sigev_value ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigevent ) ) . sigev_signo as * const _
                as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( sigevent ) , "::" ,
                stringify ! ( sigev_signo ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigevent ) ) . sigev_notify as * const _
                as usize } , 12usize , concat ! (
                "Alignment of field: " , stringify ! ( sigevent ) , "::" ,
                stringify ! ( sigev_notify ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigevent ) ) . _sigev_un as * const _ as
                usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( sigevent ) , "::" ,
                stringify ! ( _sigev_un ) ));
}
impl Clone for sigevent {
    fn clone(&self) -> Self { *self }
}
pub type sigevent_t = sigevent;
pub const SIGEV_SIGNAL: _bindgen_ty_13 = _bindgen_ty_13::SIGEV_SIGNAL;
pub const SIGEV_NONE: _bindgen_ty_13 = _bindgen_ty_13::SIGEV_NONE;
pub const SIGEV_THREAD: _bindgen_ty_13 = _bindgen_ty_13::SIGEV_THREAD;
pub const SIGEV_THREAD_ID: _bindgen_ty_13 = _bindgen_ty_13::SIGEV_THREAD_ID;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_13 {
    SIGEV_SIGNAL = 0,
    SIGEV_NONE = 1,
    SIGEV_THREAD = 2,
    SIGEV_THREAD_ID = 4,
}
pub type __sighandler_t =
    ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>;
extern "C" {
    pub fn __sysv_signal(__sig: ::std::os::raw::c_int,
                         __handler: __sighandler_t) -> __sighandler_t;
}
extern "C" {
    pub fn sysv_signal(__sig: ::std::os::raw::c_int,
                       __handler: __sighandler_t) -> __sighandler_t;
}
extern "C" {
    pub fn signal(__sig: ::std::os::raw::c_int, __handler: __sighandler_t)
     -> __sighandler_t;
}
extern "C" {
    pub fn bsd_signal(__sig: ::std::os::raw::c_int, __handler: __sighandler_t)
     -> __sighandler_t;
}
extern "C" {
    pub fn kill(__pid: __pid_t, __sig: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn killpg(__pgrp: __pid_t, __sig: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn raise(__sig: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ssignal(__sig: ::std::os::raw::c_int, __handler: __sighandler_t)
     -> __sighandler_t;
}
extern "C" {
    pub fn gsignal(__sig: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn psignal(__sig: ::std::os::raw::c_int,
                   __s: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn psiginfo(__pinfo: *const siginfo_t,
                    __s: *const ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "__xpg_sigpause"]
    pub fn sigpause(__sig: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigblock(__mask: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigsetmask(__mask: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn siggetmask() -> ::std::os::raw::c_int;
}
pub type sighandler_t = __sighandler_t;
pub type sig_t = __sighandler_t;
extern "C" {
    pub fn sigemptyset(__set: *mut sigset_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigfillset(__set: *mut sigset_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigaddset(__set: *mut sigset_t, __signo: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigdelset(__set: *mut sigset_t, __signo: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigismember(__set: *const sigset_t, __signo: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigisemptyset(__set: *const sigset_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigandset(__set: *mut sigset_t, __left: *const sigset_t,
                     __right: *const sigset_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigorset(__set: *mut sigset_t, __left: *const sigset_t,
                    __right: *const sigset_t) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct sigaction {
    pub __sigaction_handler: sigaction__bindgen_ty_1,
    pub sa_mask: __sigset_t,
    pub sa_flags: ::std::os::raw::c_int,
    pub sa_restorer: ::std::option::Option<unsafe extern "C" fn()>,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct sigaction__bindgen_ty_1 {
    pub sa_handler: __BindgenUnionField<__sighandler_t>,
    pub sa_sigaction: __BindgenUnionField<::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                         ::std::os::raw::c_int,
                                                                                     arg2:
                                                                                         *mut siginfo_t,
                                                                                     arg3:
                                                                                         *mut ::std::os::raw::c_void)>>,
    pub bindgen_union_field: u64,
}
#[test]
fn bindgen_test_layout_sigaction__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<sigaction__bindgen_ty_1>() , 8usize ,
               concat ! (
               "Size of: " , stringify ! ( sigaction__bindgen_ty_1 ) ));
    assert_eq! (::std::mem::align_of::<sigaction__bindgen_ty_1>() , 8usize ,
                concat ! (
                "Alignment of " , stringify ! ( sigaction__bindgen_ty_1 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigaction__bindgen_ty_1 ) ) . sa_handler
                as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( sigaction__bindgen_ty_1
                ) , "::" , stringify ! ( sa_handler ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigaction__bindgen_ty_1 ) ) .
                sa_sigaction as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( sigaction__bindgen_ty_1
                ) , "::" , stringify ! ( sa_sigaction ) ));
}
impl Clone for sigaction__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_sigaction() {
    assert_eq!(::std::mem::size_of::<sigaction>() , 152usize , concat ! (
               "Size of: " , stringify ! ( sigaction ) ));
    assert_eq! (::std::mem::align_of::<sigaction>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( sigaction ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigaction ) ) . __sigaction_handler as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( sigaction ) , "::" ,
                stringify ! ( __sigaction_handler ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigaction ) ) . sa_mask as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( sigaction ) , "::" ,
                stringify ! ( sa_mask ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigaction ) ) . sa_flags as * const _ as
                usize } , 136usize , concat ! (
                "Alignment of field: " , stringify ! ( sigaction ) , "::" ,
                stringify ! ( sa_flags ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigaction ) ) . sa_restorer as * const _
                as usize } , 144usize , concat ! (
                "Alignment of field: " , stringify ! ( sigaction ) , "::" ,
                stringify ! ( sa_restorer ) ));
}
impl Clone for sigaction {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn sigprocmask(__how: ::std::os::raw::c_int, __set: *const sigset_t,
                       __oset: *mut sigset_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigsuspend(__set: *const sigset_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigaction(__sig: ::std::os::raw::c_int, __act: *const sigaction,
                     __oact: *mut sigaction) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigpending(__set: *mut sigset_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigwait(__set: *const sigset_t, __sig: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigwaitinfo(__set: *const sigset_t, __info: *mut siginfo_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigtimedwait(__set: *const sigset_t, __info: *mut siginfo_t,
                        __timeout: *const timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigqueue(__pid: __pid_t, __sig: ::std::os::raw::c_int,
                    __val: sigval) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "_sys_siglist"]
    pub static mut _sys_siglist: [*const ::std::os::raw::c_char; 65usize];
}
extern "C" {
    #[link_name = "sys_siglist"]
    pub static mut sys_siglist: [*const ::std::os::raw::c_char; 65usize];
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _fpx_sw_bytes {
    pub magic1: __uint32_t,
    pub extended_size: __uint32_t,
    pub xstate_bv: __uint64_t,
    pub xstate_size: __uint32_t,
    pub padding: [__uint32_t; 7usize],
}
#[test]
fn bindgen_test_layout__fpx_sw_bytes() {
    assert_eq!(::std::mem::size_of::<_fpx_sw_bytes>() , 48usize , concat ! (
               "Size of: " , stringify ! ( _fpx_sw_bytes ) ));
    assert_eq! (::std::mem::align_of::<_fpx_sw_bytes>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( _fpx_sw_bytes ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _fpx_sw_bytes ) ) . magic1 as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( _fpx_sw_bytes ) , "::"
                , stringify ! ( magic1 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _fpx_sw_bytes ) ) . extended_size as *
                const _ as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( _fpx_sw_bytes ) , "::"
                , stringify ! ( extended_size ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _fpx_sw_bytes ) ) . xstate_bv as * const
                _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( _fpx_sw_bytes ) , "::"
                , stringify ! ( xstate_bv ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _fpx_sw_bytes ) ) . xstate_size as *
                const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( _fpx_sw_bytes ) , "::"
                , stringify ! ( xstate_size ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _fpx_sw_bytes ) ) . padding as * const _
                as usize } , 20usize , concat ! (
                "Alignment of field: " , stringify ! ( _fpx_sw_bytes ) , "::"
                , stringify ! ( padding ) ));
}
impl Clone for _fpx_sw_bytes {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _fpreg {
    pub significand: [::std::os::raw::c_ushort; 4usize],
    pub exponent: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout__fpreg() {
    assert_eq!(::std::mem::size_of::<_fpreg>() , 10usize , concat ! (
               "Size of: " , stringify ! ( _fpreg ) ));
    assert_eq! (::std::mem::align_of::<_fpreg>() , 2usize , concat ! (
                "Alignment of " , stringify ! ( _fpreg ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _fpreg ) ) . significand as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( _fpreg ) , "::" ,
                stringify ! ( significand ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _fpreg ) ) . exponent as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( _fpreg ) , "::" ,
                stringify ! ( exponent ) ));
}
impl Clone for _fpreg {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _fpxreg {
    pub significand: [::std::os::raw::c_ushort; 4usize],
    pub exponent: ::std::os::raw::c_ushort,
    pub padding: [::std::os::raw::c_ushort; 3usize],
}
#[test]
fn bindgen_test_layout__fpxreg() {
    assert_eq!(::std::mem::size_of::<_fpxreg>() , 16usize , concat ! (
               "Size of: " , stringify ! ( _fpxreg ) ));
    assert_eq! (::std::mem::align_of::<_fpxreg>() , 2usize , concat ! (
                "Alignment of " , stringify ! ( _fpxreg ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _fpxreg ) ) . significand as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( _fpxreg ) , "::" ,
                stringify ! ( significand ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _fpxreg ) ) . exponent as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( _fpxreg ) , "::" ,
                stringify ! ( exponent ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _fpxreg ) ) . padding as * const _ as
                usize } , 10usize , concat ! (
                "Alignment of field: " , stringify ! ( _fpxreg ) , "::" ,
                stringify ! ( padding ) ));
}
impl Clone for _fpxreg {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _xmmreg {
    pub element: [__uint32_t; 4usize],
}
#[test]
fn bindgen_test_layout__xmmreg() {
    assert_eq!(::std::mem::size_of::<_xmmreg>() , 16usize , concat ! (
               "Size of: " , stringify ! ( _xmmreg ) ));
    assert_eq! (::std::mem::align_of::<_xmmreg>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( _xmmreg ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _xmmreg ) ) . element as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( _xmmreg ) , "::" ,
                stringify ! ( element ) ));
}
impl Clone for _xmmreg {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _fpstate {
    pub cwd: __uint16_t,
    pub swd: __uint16_t,
    pub ftw: __uint16_t,
    pub fop: __uint16_t,
    pub rip: __uint64_t,
    pub rdp: __uint64_t,
    pub mxcsr: __uint32_t,
    pub mxcr_mask: __uint32_t,
    pub _st: [_fpxreg; 8usize],
    pub _xmm: [_xmmreg; 16usize],
    pub padding: [__uint32_t; 24usize],
}
#[test]
fn bindgen_test_layout__fpstate() {
    assert_eq!(::std::mem::size_of::<_fpstate>() , 512usize , concat ! (
               "Size of: " , stringify ! ( _fpstate ) ));
    assert_eq! (::std::mem::align_of::<_fpstate>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( _fpstate ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _fpstate ) ) . cwd as * const _ as usize
                } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( _fpstate ) , "::" ,
                stringify ! ( cwd ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _fpstate ) ) . swd as * const _ as usize
                } , 2usize , concat ! (
                "Alignment of field: " , stringify ! ( _fpstate ) , "::" ,
                stringify ! ( swd ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _fpstate ) ) . ftw as * const _ as usize
                } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( _fpstate ) , "::" ,
                stringify ! ( ftw ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _fpstate ) ) . fop as * const _ as usize
                } , 6usize , concat ! (
                "Alignment of field: " , stringify ! ( _fpstate ) , "::" ,
                stringify ! ( fop ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _fpstate ) ) . rip as * const _ as usize
                } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( _fpstate ) , "::" ,
                stringify ! ( rip ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _fpstate ) ) . rdp as * const _ as usize
                } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( _fpstate ) , "::" ,
                stringify ! ( rdp ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _fpstate ) ) . mxcsr as * const _ as
                usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( _fpstate ) , "::" ,
                stringify ! ( mxcsr ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _fpstate ) ) . mxcr_mask as * const _ as
                usize } , 28usize , concat ! (
                "Alignment of field: " , stringify ! ( _fpstate ) , "::" ,
                stringify ! ( mxcr_mask ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _fpstate ) ) . _st as * const _ as usize
                } , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( _fpstate ) , "::" ,
                stringify ! ( _st ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _fpstate ) ) . _xmm as * const _ as usize
                } , 160usize , concat ! (
                "Alignment of field: " , stringify ! ( _fpstate ) , "::" ,
                stringify ! ( _xmm ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _fpstate ) ) . padding as * const _ as
                usize } , 416usize , concat ! (
                "Alignment of field: " , stringify ! ( _fpstate ) , "::" ,
                stringify ! ( padding ) ));
}
impl Clone for _fpstate {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct sigcontext {
    pub r8: __uint64_t,
    pub r9: __uint64_t,
    pub r10: __uint64_t,
    pub r11: __uint64_t,
    pub r12: __uint64_t,
    pub r13: __uint64_t,
    pub r14: __uint64_t,
    pub r15: __uint64_t,
    pub rdi: __uint64_t,
    pub rsi: __uint64_t,
    pub rbp: __uint64_t,
    pub rbx: __uint64_t,
    pub rdx: __uint64_t,
    pub rax: __uint64_t,
    pub rcx: __uint64_t,
    pub rsp: __uint64_t,
    pub rip: __uint64_t,
    pub eflags: __uint64_t,
    pub cs: ::std::os::raw::c_ushort,
    pub gs: ::std::os::raw::c_ushort,
    pub fs: ::std::os::raw::c_ushort,
    pub __pad0: ::std::os::raw::c_ushort,
    pub err: __uint64_t,
    pub trapno: __uint64_t,
    pub oldmask: __uint64_t,
    pub cr2: __uint64_t,
    pub __bindgen_anon_1: sigcontext__bindgen_ty_1,
    pub __reserved1: [__uint64_t; 8usize],
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct sigcontext__bindgen_ty_1 {
    pub fpstate: __BindgenUnionField<*mut _fpstate>,
    pub __fpstate_word: __BindgenUnionField<__uint64_t>,
    pub bindgen_union_field: u64,
}
#[test]
fn bindgen_test_layout_sigcontext__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<sigcontext__bindgen_ty_1>() , 8usize ,
               concat ! (
               "Size of: " , stringify ! ( sigcontext__bindgen_ty_1 ) ));
    assert_eq! (::std::mem::align_of::<sigcontext__bindgen_ty_1>() , 8usize ,
                concat ! (
                "Alignment of " , stringify ! ( sigcontext__bindgen_ty_1 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigcontext__bindgen_ty_1 ) ) . fpstate as
                * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                sigcontext__bindgen_ty_1 ) , "::" , stringify ! ( fpstate )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigcontext__bindgen_ty_1 ) ) .
                __fpstate_word as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                sigcontext__bindgen_ty_1 ) , "::" , stringify ! (
                __fpstate_word ) ));
}
impl Clone for sigcontext__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_sigcontext() {
    assert_eq!(::std::mem::size_of::<sigcontext>() , 256usize , concat ! (
               "Size of: " , stringify ! ( sigcontext ) ));
    assert_eq! (::std::mem::align_of::<sigcontext>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( sigcontext ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigcontext ) ) . r8 as * const _ as usize
                } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( sigcontext ) , "::" ,
                stringify ! ( r8 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigcontext ) ) . r9 as * const _ as usize
                } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( sigcontext ) , "::" ,
                stringify ! ( r9 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigcontext ) ) . r10 as * const _ as
                usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( sigcontext ) , "::" ,
                stringify ! ( r10 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigcontext ) ) . r11 as * const _ as
                usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( sigcontext ) , "::" ,
                stringify ! ( r11 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigcontext ) ) . r12 as * const _ as
                usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( sigcontext ) , "::" ,
                stringify ! ( r12 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigcontext ) ) . r13 as * const _ as
                usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! ( sigcontext ) , "::" ,
                stringify ! ( r13 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigcontext ) ) . r14 as * const _ as
                usize } , 48usize , concat ! (
                "Alignment of field: " , stringify ! ( sigcontext ) , "::" ,
                stringify ! ( r14 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigcontext ) ) . r15 as * const _ as
                usize } , 56usize , concat ! (
                "Alignment of field: " , stringify ! ( sigcontext ) , "::" ,
                stringify ! ( r15 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigcontext ) ) . rdi as * const _ as
                usize } , 64usize , concat ! (
                "Alignment of field: " , stringify ! ( sigcontext ) , "::" ,
                stringify ! ( rdi ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigcontext ) ) . rsi as * const _ as
                usize } , 72usize , concat ! (
                "Alignment of field: " , stringify ! ( sigcontext ) , "::" ,
                stringify ! ( rsi ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigcontext ) ) . rbp as * const _ as
                usize } , 80usize , concat ! (
                "Alignment of field: " , stringify ! ( sigcontext ) , "::" ,
                stringify ! ( rbp ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigcontext ) ) . rbx as * const _ as
                usize } , 88usize , concat ! (
                "Alignment of field: " , stringify ! ( sigcontext ) , "::" ,
                stringify ! ( rbx ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigcontext ) ) . rdx as * const _ as
                usize } , 96usize , concat ! (
                "Alignment of field: " , stringify ! ( sigcontext ) , "::" ,
                stringify ! ( rdx ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigcontext ) ) . rax as * const _ as
                usize } , 104usize , concat ! (
                "Alignment of field: " , stringify ! ( sigcontext ) , "::" ,
                stringify ! ( rax ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigcontext ) ) . rcx as * const _ as
                usize } , 112usize , concat ! (
                "Alignment of field: " , stringify ! ( sigcontext ) , "::" ,
                stringify ! ( rcx ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigcontext ) ) . rsp as * const _ as
                usize } , 120usize , concat ! (
                "Alignment of field: " , stringify ! ( sigcontext ) , "::" ,
                stringify ! ( rsp ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigcontext ) ) . rip as * const _ as
                usize } , 128usize , concat ! (
                "Alignment of field: " , stringify ! ( sigcontext ) , "::" ,
                stringify ! ( rip ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigcontext ) ) . eflags as * const _ as
                usize } , 136usize , concat ! (
                "Alignment of field: " , stringify ! ( sigcontext ) , "::" ,
                stringify ! ( eflags ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigcontext ) ) . cs as * const _ as usize
                } , 144usize , concat ! (
                "Alignment of field: " , stringify ! ( sigcontext ) , "::" ,
                stringify ! ( cs ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigcontext ) ) . gs as * const _ as usize
                } , 146usize , concat ! (
                "Alignment of field: " , stringify ! ( sigcontext ) , "::" ,
                stringify ! ( gs ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigcontext ) ) . fs as * const _ as usize
                } , 148usize , concat ! (
                "Alignment of field: " , stringify ! ( sigcontext ) , "::" ,
                stringify ! ( fs ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigcontext ) ) . __pad0 as * const _ as
                usize } , 150usize , concat ! (
                "Alignment of field: " , stringify ! ( sigcontext ) , "::" ,
                stringify ! ( __pad0 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigcontext ) ) . err as * const _ as
                usize } , 152usize , concat ! (
                "Alignment of field: " , stringify ! ( sigcontext ) , "::" ,
                stringify ! ( err ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigcontext ) ) . trapno as * const _ as
                usize } , 160usize , concat ! (
                "Alignment of field: " , stringify ! ( sigcontext ) , "::" ,
                stringify ! ( trapno ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigcontext ) ) . oldmask as * const _ as
                usize } , 168usize , concat ! (
                "Alignment of field: " , stringify ! ( sigcontext ) , "::" ,
                stringify ! ( oldmask ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigcontext ) ) . cr2 as * const _ as
                usize } , 176usize , concat ! (
                "Alignment of field: " , stringify ! ( sigcontext ) , "::" ,
                stringify ! ( cr2 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigcontext ) ) . __reserved1 as * const _
                as usize } , 192usize , concat ! (
                "Alignment of field: " , stringify ! ( sigcontext ) , "::" ,
                stringify ! ( __reserved1 ) ));
}
impl Clone for sigcontext {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _xsave_hdr {
    pub xstate_bv: __uint64_t,
    pub reserved1: [__uint64_t; 2usize],
    pub reserved2: [__uint64_t; 5usize],
}
#[test]
fn bindgen_test_layout__xsave_hdr() {
    assert_eq!(::std::mem::size_of::<_xsave_hdr>() , 64usize , concat ! (
               "Size of: " , stringify ! ( _xsave_hdr ) ));
    assert_eq! (::std::mem::align_of::<_xsave_hdr>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( _xsave_hdr ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _xsave_hdr ) ) . xstate_bv as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( _xsave_hdr ) , "::" ,
                stringify ! ( xstate_bv ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _xsave_hdr ) ) . reserved1 as * const _
                as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( _xsave_hdr ) , "::" ,
                stringify ! ( reserved1 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _xsave_hdr ) ) . reserved2 as * const _
                as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( _xsave_hdr ) , "::" ,
                stringify ! ( reserved2 ) ));
}
impl Clone for _xsave_hdr {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
pub struct _ymmh_state {
    pub ymmh_space: [__uint32_t; 64usize],
}
#[test]
fn bindgen_test_layout__ymmh_state() {
    assert_eq!(::std::mem::size_of::<_ymmh_state>() , 256usize , concat ! (
               "Size of: " , stringify ! ( _ymmh_state ) ));
    assert_eq! (::std::mem::align_of::<_ymmh_state>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( _ymmh_state ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _ymmh_state ) ) . ymmh_space as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( _ymmh_state ) , "::" ,
                stringify ! ( ymmh_space ) ));
}
#[repr(C)]
pub struct _xstate {
    pub fpstate: _fpstate,
    pub xstate_hdr: _xsave_hdr,
    pub ymmh: _ymmh_state,
}
#[test]
fn bindgen_test_layout__xstate() {
    assert_eq!(::std::mem::size_of::<_xstate>() , 832usize , concat ! (
               "Size of: " , stringify ! ( _xstate ) ));
    assert_eq! (::std::mem::align_of::<_xstate>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( _xstate ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _xstate ) ) . fpstate as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( _xstate ) , "::" ,
                stringify ! ( fpstate ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _xstate ) ) . xstate_hdr as * const _ as
                usize } , 512usize , concat ! (
                "Alignment of field: " , stringify ! ( _xstate ) , "::" ,
                stringify ! ( xstate_hdr ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _xstate ) ) . ymmh as * const _ as usize
                } , 576usize , concat ! (
                "Alignment of field: " , stringify ! ( _xstate ) , "::" ,
                stringify ! ( ymmh ) ));
}
extern "C" {
    pub fn sigreturn(__scp: *mut sigcontext) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn siginterrupt(__sig: ::std::os::raw::c_int,
                        __interrupt: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct sigstack {
    pub ss_sp: *mut ::std::os::raw::c_void,
    pub ss_onstack: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_sigstack() {
    assert_eq!(::std::mem::size_of::<sigstack>() , 16usize , concat ! (
               "Size of: " , stringify ! ( sigstack ) ));
    assert_eq! (::std::mem::align_of::<sigstack>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( sigstack ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigstack ) ) . ss_sp as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( sigstack ) , "::" ,
                stringify ! ( ss_sp ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigstack ) ) . ss_onstack as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( sigstack ) , "::" ,
                stringify ! ( ss_onstack ) ));
}
impl Clone for sigstack {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct sigaltstack {
    pub ss_sp: *mut ::std::os::raw::c_void,
    pub ss_flags: ::std::os::raw::c_int,
    pub ss_size: usize,
}
#[test]
fn bindgen_test_layout_sigaltstack() {
    assert_eq!(::std::mem::size_of::<sigaltstack>() , 24usize , concat ! (
               "Size of: " , stringify ! ( sigaltstack ) ));
    assert_eq! (::std::mem::align_of::<sigaltstack>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( sigaltstack ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigaltstack ) ) . ss_sp as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( sigaltstack ) , "::" ,
                stringify ! ( ss_sp ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigaltstack ) ) . ss_flags as * const _
                as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( sigaltstack ) , "::" ,
                stringify ! ( ss_flags ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigaltstack ) ) . ss_size as * const _ as
                usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( sigaltstack ) , "::" ,
                stringify ! ( ss_size ) ));
}
impl Clone for sigaltstack {
    fn clone(&self) -> Self { *self }
}
pub type stack_t = sigaltstack;
pub const SS_ONSTACK: _bindgen_ty_14 = _bindgen_ty_14::SS_ONSTACK;
pub const SS_DISABLE: _bindgen_ty_14 = _bindgen_ty_14::SS_DISABLE;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_14 { SS_ONSTACK = 1, SS_DISABLE = 2, }
pub type greg_t = ::std::os::raw::c_longlong;
pub type gregset_t = [greg_t; 23usize];
pub const REG_R8: _bindgen_ty_15 = _bindgen_ty_15::REG_R8;
pub const REG_R9: _bindgen_ty_15 = _bindgen_ty_15::REG_R9;
pub const REG_R10: _bindgen_ty_15 = _bindgen_ty_15::REG_R10;
pub const REG_R11: _bindgen_ty_15 = _bindgen_ty_15::REG_R11;
pub const REG_R12: _bindgen_ty_15 = _bindgen_ty_15::REG_R12;
pub const REG_R13: _bindgen_ty_15 = _bindgen_ty_15::REG_R13;
pub const REG_R14: _bindgen_ty_15 = _bindgen_ty_15::REG_R14;
pub const REG_R15: _bindgen_ty_15 = _bindgen_ty_15::REG_R15;
pub const REG_RDI: _bindgen_ty_15 = _bindgen_ty_15::REG_RDI;
pub const REG_RSI: _bindgen_ty_15 = _bindgen_ty_15::REG_RSI;
pub const REG_RBP: _bindgen_ty_15 = _bindgen_ty_15::REG_RBP;
pub const REG_RBX: _bindgen_ty_15 = _bindgen_ty_15::REG_RBX;
pub const REG_RDX: _bindgen_ty_15 = _bindgen_ty_15::REG_RDX;
pub const REG_RAX: _bindgen_ty_15 = _bindgen_ty_15::REG_RAX;
pub const REG_RCX: _bindgen_ty_15 = _bindgen_ty_15::REG_RCX;
pub const REG_RSP: _bindgen_ty_15 = _bindgen_ty_15::REG_RSP;
pub const REG_RIP: _bindgen_ty_15 = _bindgen_ty_15::REG_RIP;
pub const REG_EFL: _bindgen_ty_15 = _bindgen_ty_15::REG_EFL;
pub const REG_CSGSFS: _bindgen_ty_15 = _bindgen_ty_15::REG_CSGSFS;
pub const REG_ERR: _bindgen_ty_15 = _bindgen_ty_15::REG_ERR;
pub const REG_TRAPNO: _bindgen_ty_15 = _bindgen_ty_15::REG_TRAPNO;
pub const REG_OLDMASK: _bindgen_ty_15 = _bindgen_ty_15::REG_OLDMASK;
pub const REG_CR2: _bindgen_ty_15 = _bindgen_ty_15::REG_CR2;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_15 {
    REG_R8 = 0,
    REG_R9 = 1,
    REG_R10 = 2,
    REG_R11 = 3,
    REG_R12 = 4,
    REG_R13 = 5,
    REG_R14 = 6,
    REG_R15 = 7,
    REG_RDI = 8,
    REG_RSI = 9,
    REG_RBP = 10,
    REG_RBX = 11,
    REG_RDX = 12,
    REG_RAX = 13,
    REG_RCX = 14,
    REG_RSP = 15,
    REG_RIP = 16,
    REG_EFL = 17,
    REG_CSGSFS = 18,
    REG_ERR = 19,
    REG_TRAPNO = 20,
    REG_OLDMASK = 21,
    REG_CR2 = 22,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _libc_fpxreg {
    pub significand: [::std::os::raw::c_ushort; 4usize],
    pub exponent: ::std::os::raw::c_ushort,
    pub padding: [::std::os::raw::c_ushort; 3usize],
}
#[test]
fn bindgen_test_layout__libc_fpxreg() {
    assert_eq!(::std::mem::size_of::<_libc_fpxreg>() , 16usize , concat ! (
               "Size of: " , stringify ! ( _libc_fpxreg ) ));
    assert_eq! (::std::mem::align_of::<_libc_fpxreg>() , 2usize , concat ! (
                "Alignment of " , stringify ! ( _libc_fpxreg ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _libc_fpxreg ) ) . significand as * const
                _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( _libc_fpxreg ) , "::" ,
                stringify ! ( significand ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _libc_fpxreg ) ) . exponent as * const _
                as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( _libc_fpxreg ) , "::" ,
                stringify ! ( exponent ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _libc_fpxreg ) ) . padding as * const _
                as usize } , 10usize , concat ! (
                "Alignment of field: " , stringify ! ( _libc_fpxreg ) , "::" ,
                stringify ! ( padding ) ));
}
impl Clone for _libc_fpxreg {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _libc_xmmreg {
    pub element: [__uint32_t; 4usize],
}
#[test]
fn bindgen_test_layout__libc_xmmreg() {
    assert_eq!(::std::mem::size_of::<_libc_xmmreg>() , 16usize , concat ! (
               "Size of: " , stringify ! ( _libc_xmmreg ) ));
    assert_eq! (::std::mem::align_of::<_libc_xmmreg>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( _libc_xmmreg ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _libc_xmmreg ) ) . element as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( _libc_xmmreg ) , "::" ,
                stringify ! ( element ) ));
}
impl Clone for _libc_xmmreg {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _libc_fpstate {
    pub cwd: __uint16_t,
    pub swd: __uint16_t,
    pub ftw: __uint16_t,
    pub fop: __uint16_t,
    pub rip: __uint64_t,
    pub rdp: __uint64_t,
    pub mxcsr: __uint32_t,
    pub mxcr_mask: __uint32_t,
    pub _st: [_libc_fpxreg; 8usize],
    pub _xmm: [_libc_xmmreg; 16usize],
    pub padding: [__uint32_t; 24usize],
}
#[test]
fn bindgen_test_layout__libc_fpstate() {
    assert_eq!(::std::mem::size_of::<_libc_fpstate>() , 512usize , concat ! (
               "Size of: " , stringify ! ( _libc_fpstate ) ));
    assert_eq! (::std::mem::align_of::<_libc_fpstate>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( _libc_fpstate ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _libc_fpstate ) ) . cwd as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( _libc_fpstate ) , "::"
                , stringify ! ( cwd ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _libc_fpstate ) ) . swd as * const _ as
                usize } , 2usize , concat ! (
                "Alignment of field: " , stringify ! ( _libc_fpstate ) , "::"
                , stringify ! ( swd ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _libc_fpstate ) ) . ftw as * const _ as
                usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( _libc_fpstate ) , "::"
                , stringify ! ( ftw ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _libc_fpstate ) ) . fop as * const _ as
                usize } , 6usize , concat ! (
                "Alignment of field: " , stringify ! ( _libc_fpstate ) , "::"
                , stringify ! ( fop ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _libc_fpstate ) ) . rip as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( _libc_fpstate ) , "::"
                , stringify ! ( rip ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _libc_fpstate ) ) . rdp as * const _ as
                usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( _libc_fpstate ) , "::"
                , stringify ! ( rdp ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _libc_fpstate ) ) . mxcsr as * const _ as
                usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( _libc_fpstate ) , "::"
                , stringify ! ( mxcsr ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _libc_fpstate ) ) . mxcr_mask as * const
                _ as usize } , 28usize , concat ! (
                "Alignment of field: " , stringify ! ( _libc_fpstate ) , "::"
                , stringify ! ( mxcr_mask ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _libc_fpstate ) ) . _st as * const _ as
                usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( _libc_fpstate ) , "::"
                , stringify ! ( _st ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _libc_fpstate ) ) . _xmm as * const _ as
                usize } , 160usize , concat ! (
                "Alignment of field: " , stringify ! ( _libc_fpstate ) , "::"
                , stringify ! ( _xmm ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _libc_fpstate ) ) . padding as * const _
                as usize } , 416usize , concat ! (
                "Alignment of field: " , stringify ! ( _libc_fpstate ) , "::"
                , stringify ! ( padding ) ));
}
impl Clone for _libc_fpstate {
    fn clone(&self) -> Self { *self }
}
pub type fpregset_t = *mut _libc_fpstate;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct mcontext_t {
    pub gregs: gregset_t,
    pub fpregs: fpregset_t,
    pub __reserved1: [::std::os::raw::c_ulonglong; 8usize],
}
#[test]
fn bindgen_test_layout_mcontext_t() {
    assert_eq!(::std::mem::size_of::<mcontext_t>() , 256usize , concat ! (
               "Size of: " , stringify ! ( mcontext_t ) ));
    assert_eq! (::std::mem::align_of::<mcontext_t>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( mcontext_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const mcontext_t ) ) . gregs as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( mcontext_t ) , "::" ,
                stringify ! ( gregs ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const mcontext_t ) ) . fpregs as * const _ as
                usize } , 184usize , concat ! (
                "Alignment of field: " , stringify ! ( mcontext_t ) , "::" ,
                stringify ! ( fpregs ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const mcontext_t ) ) . __reserved1 as * const _
                as usize } , 192usize , concat ! (
                "Alignment of field: " , stringify ! ( mcontext_t ) , "::" ,
                stringify ! ( __reserved1 ) ));
}
impl Clone for mcontext_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct ucontext {
    pub uc_flags: ::std::os::raw::c_ulong,
    pub uc_link: *mut ucontext,
    pub uc_stack: stack_t,
    pub uc_mcontext: mcontext_t,
    pub uc_sigmask: __sigset_t,
    pub __fpregs_mem: _libc_fpstate,
}
#[test]
fn bindgen_test_layout_ucontext() {
    assert_eq!(::std::mem::size_of::<ucontext>() , 936usize , concat ! (
               "Size of: " , stringify ! ( ucontext ) ));
    assert_eq! (::std::mem::align_of::<ucontext>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( ucontext ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ucontext ) ) . uc_flags as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( ucontext ) , "::" ,
                stringify ! ( uc_flags ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ucontext ) ) . uc_link as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( ucontext ) , "::" ,
                stringify ! ( uc_link ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ucontext ) ) . uc_stack as * const _ as
                usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( ucontext ) , "::" ,
                stringify ! ( uc_stack ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ucontext ) ) . uc_mcontext as * const _
                as usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! ( ucontext ) , "::" ,
                stringify ! ( uc_mcontext ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ucontext ) ) . uc_sigmask as * const _ as
                usize } , 296usize , concat ! (
                "Alignment of field: " , stringify ! ( ucontext ) , "::" ,
                stringify ! ( uc_sigmask ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ucontext ) ) . __fpregs_mem as * const _
                as usize } , 424usize , concat ! (
                "Alignment of field: " , stringify ! ( ucontext ) , "::" ,
                stringify ! ( __fpregs_mem ) ));
}
impl Clone for ucontext {
    fn clone(&self) -> Self { *self }
}
pub type ucontext_t = ucontext;
extern "C" {
    pub fn sigstack(__ss: *mut sigstack, __oss: *mut sigstack)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigaltstack(__ss: *const sigaltstack, __oss: *mut sigaltstack)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sighold(__sig: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigrelse(__sig: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigignore(__sig: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigset(__sig: ::std::os::raw::c_int, __disp: __sighandler_t)
     -> __sighandler_t;
}
extern "C" {
    pub fn pthread_sigmask(__how: ::std::os::raw::c_int,
                           __newmask: *const __sigset_t,
                           __oldmask: *mut __sigset_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_kill(__threadid: pthread_t, __signo: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_sigqueue(__threadid: pthread_t,
                            __signo: ::std::os::raw::c_int, __value: sigval)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __libc_current_sigrtmin() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __libc_current_sigrtmax() -> ::std::os::raw::c_int;
}
pub type __jmp_buf = [::std::os::raw::c_long; 8usize];
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __jmp_buf_tag {
    pub __jmpbuf: __jmp_buf,
    pub __mask_was_saved: ::std::os::raw::c_int,
    pub __saved_mask: __sigset_t,
}
#[test]
fn bindgen_test_layout___jmp_buf_tag() {
    assert_eq!(::std::mem::size_of::<__jmp_buf_tag>() , 200usize , concat ! (
               "Size of: " , stringify ! ( __jmp_buf_tag ) ));
    assert_eq! (::std::mem::align_of::<__jmp_buf_tag>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( __jmp_buf_tag ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __jmp_buf_tag ) ) . __jmpbuf as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( __jmp_buf_tag ) , "::"
                , stringify ! ( __jmpbuf ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __jmp_buf_tag ) ) . __mask_was_saved as *
                const _ as usize } , 64usize , concat ! (
                "Alignment of field: " , stringify ! ( __jmp_buf_tag ) , "::"
                , stringify ! ( __mask_was_saved ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __jmp_buf_tag ) ) . __saved_mask as *
                const _ as usize } , 72usize , concat ! (
                "Alignment of field: " , stringify ! ( __jmp_buf_tag ) , "::"
                , stringify ! ( __saved_mask ) ));
}
impl Clone for __jmp_buf_tag {
    fn clone(&self) -> Self { *self }
}
pub type jmp_buf = [__jmp_buf_tag; 1usize];
extern "C" {
    pub fn setjmp(__env: *mut __jmp_buf_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __sigsetjmp(__env: *mut __jmp_buf_tag,
                       __savemask: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _setjmp(__env: *mut __jmp_buf_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn longjmp(__env: *mut __jmp_buf_tag, __val: ::std::os::raw::c_int);
}
extern "C" {
    pub fn _longjmp(__env: *mut __jmp_buf_tag, __val: ::std::os::raw::c_int);
}
pub type sigjmp_buf = [__jmp_buf_tag; 1usize];
extern "C" {
    pub fn siglongjmp(__env: *mut __jmp_buf_tag,
                      __val: ::std::os::raw::c_int);
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct passwd {
    pub pw_name: *mut ::std::os::raw::c_char,
    pub pw_passwd: *mut ::std::os::raw::c_char,
    pub pw_uid: __uid_t,
    pub pw_gid: __gid_t,
    pub pw_gecos: *mut ::std::os::raw::c_char,
    pub pw_dir: *mut ::std::os::raw::c_char,
    pub pw_shell: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_passwd() {
    assert_eq!(::std::mem::size_of::<passwd>() , 48usize , concat ! (
               "Size of: " , stringify ! ( passwd ) ));
    assert_eq! (::std::mem::align_of::<passwd>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( passwd ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const passwd ) ) . pw_name as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( passwd ) , "::" ,
                stringify ! ( pw_name ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const passwd ) ) . pw_passwd as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( passwd ) , "::" ,
                stringify ! ( pw_passwd ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const passwd ) ) . pw_uid as * const _ as usize
                } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( passwd ) , "::" ,
                stringify ! ( pw_uid ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const passwd ) ) . pw_gid as * const _ as usize
                } , 20usize , concat ! (
                "Alignment of field: " , stringify ! ( passwd ) , "::" ,
                stringify ! ( pw_gid ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const passwd ) ) . pw_gecos as * const _ as
                usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( passwd ) , "::" ,
                stringify ! ( pw_gecos ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const passwd ) ) . pw_dir as * const _ as usize
                } , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( passwd ) , "::" ,
                stringify ! ( pw_dir ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const passwd ) ) . pw_shell as * const _ as
                usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! ( passwd ) , "::" ,
                stringify ! ( pw_shell ) ));
}
impl Clone for passwd {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn setpwent();
}
extern "C" {
    pub fn endpwent();
}
extern "C" {
    pub fn getpwent() -> *mut passwd;
}
extern "C" {
    pub fn fgetpwent(__stream: *mut FILE) -> *mut passwd;
}
extern "C" {
    pub fn putpwent(__p: *const passwd, __f: *mut FILE)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpwuid(__uid: __uid_t) -> *mut passwd;
}
extern "C" {
    pub fn getpwnam(__name: *const ::std::os::raw::c_char) -> *mut passwd;
}
extern "C" {
    pub fn getpwent_r(__resultbuf: *mut passwd,
                      __buffer: *mut ::std::os::raw::c_char, __buflen: usize,
                      __result: *mut *mut passwd) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpwuid_r(__uid: __uid_t, __resultbuf: *mut passwd,
                      __buffer: *mut ::std::os::raw::c_char, __buflen: usize,
                      __result: *mut *mut passwd) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpwnam_r(__name: *const ::std::os::raw::c_char,
                      __resultbuf: *mut passwd,
                      __buffer: *mut ::std::os::raw::c_char, __buflen: usize,
                      __result: *mut *mut passwd) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetpwent_r(__stream: *mut FILE, __resultbuf: *mut passwd,
                       __buffer: *mut ::std::os::raw::c_char, __buflen: usize,
                       __result: *mut *mut passwd) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpw(__uid: __uid_t, __buffer: *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct group {
    pub gr_name: *mut ::std::os::raw::c_char,
    pub gr_passwd: *mut ::std::os::raw::c_char,
    pub gr_gid: __gid_t,
    pub gr_mem: *mut *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_group() {
    assert_eq!(::std::mem::size_of::<group>() , 32usize , concat ! (
               "Size of: " , stringify ! ( group ) ));
    assert_eq! (::std::mem::align_of::<group>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( group ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const group ) ) . gr_name as * const _ as usize
                } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( group ) , "::" ,
                stringify ! ( gr_name ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const group ) ) . gr_passwd as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( group ) , "::" ,
                stringify ! ( gr_passwd ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const group ) ) . gr_gid as * const _ as usize
                } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( group ) , "::" ,
                stringify ! ( gr_gid ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const group ) ) . gr_mem as * const _ as usize
                } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( group ) , "::" ,
                stringify ! ( gr_mem ) ));
}
impl Clone for group {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn setgrent();
}
extern "C" {
    pub fn endgrent();
}
extern "C" {
    pub fn getgrent() -> *mut group;
}
extern "C" {
    pub fn fgetgrent(__stream: *mut FILE) -> *mut group;
}
extern "C" {
    pub fn putgrent(__p: *const group, __f: *mut FILE)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getgrgid(__gid: __gid_t) -> *mut group;
}
extern "C" {
    pub fn getgrnam(__name: *const ::std::os::raw::c_char) -> *mut group;
}
extern "C" {
    pub fn getgrent_r(__resultbuf: *mut group,
                      __buffer: *mut ::std::os::raw::c_char, __buflen: usize,
                      __result: *mut *mut group) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getgrgid_r(__gid: __gid_t, __resultbuf: *mut group,
                      __buffer: *mut ::std::os::raw::c_char, __buflen: usize,
                      __result: *mut *mut group) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getgrnam_r(__name: *const ::std::os::raw::c_char,
                      __resultbuf: *mut group,
                      __buffer: *mut ::std::os::raw::c_char, __buflen: usize,
                      __result: *mut *mut group) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetgrent_r(__stream: *mut FILE, __resultbuf: *mut group,
                       __buffer: *mut ::std::os::raw::c_char, __buflen: usize,
                       __result: *mut *mut group) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setgroups(__n: usize, __groups: *const __gid_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getgrouplist(__user: *const ::std::os::raw::c_char,
                        __group: __gid_t, __groups: *mut __gid_t,
                        __ngroups: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn initgroups(__user: *const ::std::os::raw::c_char, __group: __gid_t)
     -> ::std::os::raw::c_int;
}
#[repr(C)]
pub struct dirent {
    pub d_ino: __ino_t,
    pub d_off: __off_t,
    pub d_reclen: ::std::os::raw::c_ushort,
    pub d_type: ::std::os::raw::c_uchar,
    pub d_name: [::std::os::raw::c_char; 256usize],
}
#[test]
fn bindgen_test_layout_dirent() {
    assert_eq!(::std::mem::size_of::<dirent>() , 280usize , concat ! (
               "Size of: " , stringify ! ( dirent ) ));
    assert_eq! (::std::mem::align_of::<dirent>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( dirent ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const dirent ) ) . d_ino as * const _ as usize
                } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( dirent ) , "::" ,
                stringify ! ( d_ino ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const dirent ) ) . d_off as * const _ as usize
                } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( dirent ) , "::" ,
                stringify ! ( d_off ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const dirent ) ) . d_reclen as * const _ as
                usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( dirent ) , "::" ,
                stringify ! ( d_reclen ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const dirent ) ) . d_type as * const _ as usize
                } , 18usize , concat ! (
                "Alignment of field: " , stringify ! ( dirent ) , "::" ,
                stringify ! ( d_type ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const dirent ) ) . d_name as * const _ as usize
                } , 19usize , concat ! (
                "Alignment of field: " , stringify ! ( dirent ) , "::" ,
                stringify ! ( d_name ) ));
}
#[repr(C)]
pub struct dirent64 {
    pub d_ino: __ino64_t,
    pub d_off: __off64_t,
    pub d_reclen: ::std::os::raw::c_ushort,
    pub d_type: ::std::os::raw::c_uchar,
    pub d_name: [::std::os::raw::c_char; 256usize],
}
#[test]
fn bindgen_test_layout_dirent64() {
    assert_eq!(::std::mem::size_of::<dirent64>() , 280usize , concat ! (
               "Size of: " , stringify ! ( dirent64 ) ));
    assert_eq! (::std::mem::align_of::<dirent64>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( dirent64 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const dirent64 ) ) . d_ino as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( dirent64 ) , "::" ,
                stringify ! ( d_ino ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const dirent64 ) ) . d_off as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( dirent64 ) , "::" ,
                stringify ! ( d_off ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const dirent64 ) ) . d_reclen as * const _ as
                usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( dirent64 ) , "::" ,
                stringify ! ( d_reclen ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const dirent64 ) ) . d_type as * const _ as
                usize } , 18usize , concat ! (
                "Alignment of field: " , stringify ! ( dirent64 ) , "::" ,
                stringify ! ( d_type ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const dirent64 ) ) . d_name as * const _ as
                usize } , 19usize , concat ! (
                "Alignment of field: " , stringify ! ( dirent64 ) , "::" ,
                stringify ! ( d_name ) ));
}
pub const DT_UNKNOWN: _bindgen_ty_16 = _bindgen_ty_16::DT_UNKNOWN;
pub const DT_FIFO: _bindgen_ty_16 = _bindgen_ty_16::DT_FIFO;
pub const DT_CHR: _bindgen_ty_16 = _bindgen_ty_16::DT_CHR;
pub const DT_DIR: _bindgen_ty_16 = _bindgen_ty_16::DT_DIR;
pub const DT_BLK: _bindgen_ty_16 = _bindgen_ty_16::DT_BLK;
pub const DT_REG: _bindgen_ty_16 = _bindgen_ty_16::DT_REG;
pub const DT_LNK: _bindgen_ty_16 = _bindgen_ty_16::DT_LNK;
pub const DT_SOCK: _bindgen_ty_16 = _bindgen_ty_16::DT_SOCK;
pub const DT_WHT: _bindgen_ty_16 = _bindgen_ty_16::DT_WHT;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_16 {
    DT_UNKNOWN = 0,
    DT_FIFO = 1,
    DT_CHR = 2,
    DT_DIR = 4,
    DT_BLK = 6,
    DT_REG = 8,
    DT_LNK = 10,
    DT_SOCK = 12,
    DT_WHT = 14,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __dirstream {
    _unused: [u8; 0],
}
pub type DIR = __dirstream;
extern "C" {
    pub fn opendir(__name: *const ::std::os::raw::c_char) -> *mut DIR;
}
extern "C" {
    pub fn fdopendir(__fd: ::std::os::raw::c_int) -> *mut DIR;
}
extern "C" {
    pub fn closedir(__dirp: *mut DIR) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn readdir(__dirp: *mut DIR) -> *mut dirent;
}
extern "C" {
    pub fn readdir64(__dirp: *mut DIR) -> *mut dirent64;
}
extern "C" {
    pub fn readdir_r(__dirp: *mut DIR, __entry: *mut dirent,
                     __result: *mut *mut dirent) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn readdir64_r(__dirp: *mut DIR, __entry: *mut dirent64,
                       __result: *mut *mut dirent64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rewinddir(__dirp: *mut DIR);
}
extern "C" {
    pub fn seekdir(__dirp: *mut DIR, __pos: ::std::os::raw::c_long);
}
extern "C" {
    pub fn telldir(__dirp: *mut DIR) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn dirfd(__dirp: *mut DIR) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scandir(__dir: *const ::std::os::raw::c_char,
                   __namelist: *mut *mut *mut dirent,
                   __selector:
                       ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                      *const dirent)
                                                 -> ::std::os::raw::c_int>,
                   __cmp:
                       ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                      *mut *const dirent,
                                                                  arg2:
                                                                      *mut *const dirent)
                                                 -> ::std::os::raw::c_int>)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scandir64(__dir: *const ::std::os::raw::c_char,
                     __namelist: *mut *mut *mut dirent64,
                     __selector:
                         ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                        *const dirent64)
                                                   -> ::std::os::raw::c_int>,
                     __cmp:
                         ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                        *mut *const dirent64,
                                                                    arg2:
                                                                        *mut *const dirent64)
                                                   -> ::std::os::raw::c_int>)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scandirat(__dfd: ::std::os::raw::c_int,
                     __dir: *const ::std::os::raw::c_char,
                     __namelist: *mut *mut *mut dirent,
                     __selector:
                         ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                        *const dirent)
                                                   -> ::std::os::raw::c_int>,
                     __cmp:
                         ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                        *mut *const dirent,
                                                                    arg2:
                                                                        *mut *const dirent)
                                                   -> ::std::os::raw::c_int>)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scandirat64(__dfd: ::std::os::raw::c_int,
                       __dir: *const ::std::os::raw::c_char,
                       __namelist: *mut *mut *mut dirent64,
                       __selector:
                           ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                          *const dirent64)
                                                     ->
                                                         ::std::os::raw::c_int>,
                       __cmp:
                           ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                          *mut *const dirent64,
                                                                      arg2:
                                                                          *mut *const dirent64)
                                                     ->
                                                         ::std::os::raw::c_int>)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn alphasort(__e1: *mut *const dirent, __e2: *mut *const dirent)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn alphasort64(__e1: *mut *const dirent64, __e2: *mut *const dirent64)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getdirentries(__fd: ::std::os::raw::c_int,
                         __buf: *mut ::std::os::raw::c_char, __nbytes: usize,
                         __basep: *mut __off_t) -> __ssize_t;
}
extern "C" {
    pub fn getdirentries64(__fd: ::std::os::raw::c_int,
                           __buf: *mut ::std::os::raw::c_char,
                           __nbytes: usize, __basep: *mut __off64_t)
     -> __ssize_t;
}
extern "C" {
    pub fn versionsort(__e1: *mut *const dirent, __e2: *mut *const dirent)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn versionsort64(__e1: *mut *const dirent64,
                         __e2: *mut *const dirent64) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct div_t {
    pub quot: ::std::os::raw::c_int,
    pub rem: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_div_t() {
    assert_eq!(::std::mem::size_of::<div_t>() , 8usize , concat ! (
               "Size of: " , stringify ! ( div_t ) ));
    assert_eq! (::std::mem::align_of::<div_t>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( div_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const div_t ) ) . quot as * const _ as usize }
                , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( div_t ) , "::" ,
                stringify ! ( quot ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const div_t ) ) . rem as * const _ as usize } ,
                4usize , concat ! (
                "Alignment of field: " , stringify ! ( div_t ) , "::" ,
                stringify ! ( rem ) ));
}
impl Clone for div_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct ldiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_ldiv_t() {
    assert_eq!(::std::mem::size_of::<ldiv_t>() , 16usize , concat ! (
               "Size of: " , stringify ! ( ldiv_t ) ));
    assert_eq! (::std::mem::align_of::<ldiv_t>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( ldiv_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ldiv_t ) ) . quot as * const _ as usize }
                , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( ldiv_t ) , "::" ,
                stringify ! ( quot ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ldiv_t ) ) . rem as * const _ as usize }
                , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( ldiv_t ) , "::" ,
                stringify ! ( rem ) ));
}
impl Clone for ldiv_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct lldiv_t {
    pub quot: ::std::os::raw::c_longlong,
    pub rem: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout_lldiv_t() {
    assert_eq!(::std::mem::size_of::<lldiv_t>() , 16usize , concat ! (
               "Size of: " , stringify ! ( lldiv_t ) ));
    assert_eq! (::std::mem::align_of::<lldiv_t>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( lldiv_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const lldiv_t ) ) . quot as * const _ as usize
                } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( lldiv_t ) , "::" ,
                stringify ! ( quot ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const lldiv_t ) ) . rem as * const _ as usize }
                , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( lldiv_t ) , "::" ,
                stringify ! ( rem ) ));
}
impl Clone for lldiv_t {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn __ctype_get_mb_cur_max() -> usize;
}
extern "C" {
    pub fn atof(__nptr: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn atoi(__nptr: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atol(__nptr: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn atoll(__nptr: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtod(__nptr: *const ::std::os::raw::c_char,
                  __endptr: *mut *mut ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn strtof(__nptr: *const ::std::os::raw::c_char,
                  __endptr: *mut *mut ::std::os::raw::c_char) -> f32;
}
extern "C" {
    pub fn strtold(__nptr: *const ::std::os::raw::c_char,
                   __endptr: *mut *mut ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn strtol(__nptr: *const ::std::os::raw::c_char,
                  __endptr: *mut *mut ::std::os::raw::c_char,
                  __base: ::std::os::raw::c_int) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn strtoul(__nptr: *const ::std::os::raw::c_char,
                   __endptr: *mut *mut ::std::os::raw::c_char,
                   __base: ::std::os::raw::c_int) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strtoq(__nptr: *const ::std::os::raw::c_char,
                  __endptr: *mut *mut ::std::os::raw::c_char,
                  __base: ::std::os::raw::c_int)
     -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtouq(__nptr: *const ::std::os::raw::c_char,
                   __endptr: *mut *mut ::std::os::raw::c_char,
                   __base: ::std::os::raw::c_int)
     -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn strtoll(__nptr: *const ::std::os::raw::c_char,
                   __endptr: *mut *mut ::std::os::raw::c_char,
                   __base: ::std::os::raw::c_int)
     -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtoull(__nptr: *const ::std::os::raw::c_char,
                    __endptr: *mut *mut ::std::os::raw::c_char,
                    __base: ::std::os::raw::c_int)
     -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn strfromd(__dest: *mut ::std::os::raw::c_char, __size: usize,
                    __format: *const ::std::os::raw::c_char, __f: f64)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strfromf(__dest: *mut ::std::os::raw::c_char, __size: usize,
                    __format: *const ::std::os::raw::c_char, __f: f32)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strfroml(__dest: *mut ::std::os::raw::c_char, __size: usize,
                    __format: *const ::std::os::raw::c_char, __f: f64)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strtol_l(__nptr: *const ::std::os::raw::c_char,
                    __endptr: *mut *mut ::std::os::raw::c_char,
                    __base: ::std::os::raw::c_int, __loc: __locale_t)
     -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn strtoul_l(__nptr: *const ::std::os::raw::c_char,
                     __endptr: *mut *mut ::std::os::raw::c_char,
                     __base: ::std::os::raw::c_int, __loc: __locale_t)
     -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strtoll_l(__nptr: *const ::std::os::raw::c_char,
                     __endptr: *mut *mut ::std::os::raw::c_char,
                     __base: ::std::os::raw::c_int, __loc: __locale_t)
     -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtoull_l(__nptr: *const ::std::os::raw::c_char,
                      __endptr: *mut *mut ::std::os::raw::c_char,
                      __base: ::std::os::raw::c_int, __loc: __locale_t)
     -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn strtod_l(__nptr: *const ::std::os::raw::c_char,
                    __endptr: *mut *mut ::std::os::raw::c_char,
                    __loc: __locale_t) -> f64;
}
extern "C" {
    pub fn strtof_l(__nptr: *const ::std::os::raw::c_char,
                    __endptr: *mut *mut ::std::os::raw::c_char,
                    __loc: __locale_t) -> f32;
}
extern "C" {
    pub fn strtold_l(__nptr: *const ::std::os::raw::c_char,
                     __endptr: *mut *mut ::std::os::raw::c_char,
                     __loc: __locale_t) -> f64;
}
extern "C" {
    pub fn l64a(__n: ::std::os::raw::c_long) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn a64l(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn random() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn srandom(__seed: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn initstate(__seed: ::std::os::raw::c_uint,
                     __statebuf: *mut ::std::os::raw::c_char,
                     __statelen: usize) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn setstate(__statebuf: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct random_data {
    pub fptr: *mut i32,
    pub rptr: *mut i32,
    pub state: *mut i32,
    pub rand_type: ::std::os::raw::c_int,
    pub rand_deg: ::std::os::raw::c_int,
    pub rand_sep: ::std::os::raw::c_int,
    pub end_ptr: *mut i32,
}
#[test]
fn bindgen_test_layout_random_data() {
    assert_eq!(::std::mem::size_of::<random_data>() , 48usize , concat ! (
               "Size of: " , stringify ! ( random_data ) ));
    assert_eq! (::std::mem::align_of::<random_data>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( random_data ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const random_data ) ) . fptr as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( random_data ) , "::" ,
                stringify ! ( fptr ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const random_data ) ) . rptr as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( random_data ) , "::" ,
                stringify ! ( rptr ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const random_data ) ) . state as * const _ as
                usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( random_data ) , "::" ,
                stringify ! ( state ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const random_data ) ) . rand_type as * const _
                as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( random_data ) , "::" ,
                stringify ! ( rand_type ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const random_data ) ) . rand_deg as * const _
                as usize } , 28usize , concat ! (
                "Alignment of field: " , stringify ! ( random_data ) , "::" ,
                stringify ! ( rand_deg ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const random_data ) ) . rand_sep as * const _
                as usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( random_data ) , "::" ,
                stringify ! ( rand_sep ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const random_data ) ) . end_ptr as * const _ as
                usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! ( random_data ) , "::" ,
                stringify ! ( end_ptr ) ));
}
impl Clone for random_data {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn random_r(__buf: *mut random_data, __result: *mut i32)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srandom_r(__seed: ::std::os::raw::c_uint, __buf: *mut random_data)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn initstate_r(__seed: ::std::os::raw::c_uint,
                       __statebuf: *mut ::std::os::raw::c_char,
                       __statelen: usize, __buf: *mut random_data)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setstate_r(__statebuf: *mut ::std::os::raw::c_char,
                      __buf: *mut random_data) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rand() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srand(__seed: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn rand_r(__seed: *mut ::std::os::raw::c_uint)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drand48() -> f64;
}
extern "C" {
    pub fn erand48(__xsubi: *mut ::std::os::raw::c_ushort) -> f64;
}
extern "C" {
    pub fn lrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn nrand48(__xsubi: *mut ::std::os::raw::c_ushort)
     -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn mrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn jrand48(__xsubi: *mut ::std::os::raw::c_ushort)
     -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn srand48(__seedval: ::std::os::raw::c_long);
}
extern "C" {
    pub fn seed48(__seed16v: *mut ::std::os::raw::c_ushort)
     -> *mut ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn lcong48(__param: *mut ::std::os::raw::c_ushort);
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct drand48_data {
    pub __x: [::std::os::raw::c_ushort; 3usize],
    pub __old_x: [::std::os::raw::c_ushort; 3usize],
    pub __c: ::std::os::raw::c_ushort,
    pub __init: ::std::os::raw::c_ushort,
    pub __a: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_drand48_data() {
    assert_eq!(::std::mem::size_of::<drand48_data>() , 24usize , concat ! (
               "Size of: " , stringify ! ( drand48_data ) ));
    assert_eq! (::std::mem::align_of::<drand48_data>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( drand48_data ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const drand48_data ) ) . __x as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( drand48_data ) , "::" ,
                stringify ! ( __x ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const drand48_data ) ) . __old_x as * const _
                as usize } , 6usize , concat ! (
                "Alignment of field: " , stringify ! ( drand48_data ) , "::" ,
                stringify ! ( __old_x ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const drand48_data ) ) . __c as * const _ as
                usize } , 12usize , concat ! (
                "Alignment of field: " , stringify ! ( drand48_data ) , "::" ,
                stringify ! ( __c ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const drand48_data ) ) . __init as * const _ as
                usize } , 14usize , concat ! (
                "Alignment of field: " , stringify ! ( drand48_data ) , "::" ,
                stringify ! ( __init ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const drand48_data ) ) . __a as * const _ as
                usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( drand48_data ) , "::" ,
                stringify ! ( __a ) ));
}
impl Clone for drand48_data {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn drand48_r(__buffer: *mut drand48_data, __result: *mut f64)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn erand48_r(__xsubi: *mut ::std::os::raw::c_ushort,
                     __buffer: *mut drand48_data, __result: *mut f64)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lrand48_r(__buffer: *mut drand48_data,
                     __result: *mut ::std::os::raw::c_long)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nrand48_r(__xsubi: *mut ::std::os::raw::c_ushort,
                     __buffer: *mut drand48_data,
                     __result: *mut ::std::os::raw::c_long)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mrand48_r(__buffer: *mut drand48_data,
                     __result: *mut ::std::os::raw::c_long)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn jrand48_r(__xsubi: *mut ::std::os::raw::c_ushort,
                     __buffer: *mut drand48_data,
                     __result: *mut ::std::os::raw::c_long)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srand48_r(__seedval: ::std::os::raw::c_long,
                     __buffer: *mut drand48_data) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn seed48_r(__seed16v: *mut ::std::os::raw::c_ushort,
                    __buffer: *mut drand48_data) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lcong48_r(__param: *mut ::std::os::raw::c_ushort,
                     __buffer: *mut drand48_data) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn malloc(__size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn calloc(__nmemb: usize, __size: usize)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn realloc(__ptr: *mut ::std::os::raw::c_void, __size: usize)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn free(__ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn cfree(__ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn alloca(__size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn valloc(__size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn posix_memalign(__memptr: *mut *mut ::std::os::raw::c_void,
                          __alignment: usize, __size: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn aligned_alloc(__alignment: usize, __size: usize)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn abort();
}
extern "C" {
    pub fn atexit(__func: ::std::option::Option<unsafe extern "C" fn()>)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn at_quick_exit(__func:
                             ::std::option::Option<unsafe extern "C" fn()>)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn on_exit(__func:
                       ::std::option::Option<unsafe extern "C" fn(__status:
                                                                      ::std::os::raw::c_int,
                                                                  __arg:
                                                                      *mut ::std::os::raw::c_void)>,
                   __arg: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn exit(__status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn quick_exit(__status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn _Exit(__status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn getenv(__name: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn secure_getenv(__name: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn putenv(__string: *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setenv(__name: *const ::std::os::raw::c_char,
                  __value: *const ::std::os::raw::c_char,
                  __replace: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unsetenv(__name: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearenv() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mktemp(__template: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mkstemp(__template: *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkstemp64(__template: *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkstemps(__template: *mut ::std::os::raw::c_char,
                    __suffixlen: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkstemps64(__template: *mut ::std::os::raw::c_char,
                      __suffixlen: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkdtemp(__template: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mkostemp(__template: *mut ::std::os::raw::c_char,
                    __flags: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkostemp64(__template: *mut ::std::os::raw::c_char,
                      __flags: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkostemps(__template: *mut ::std::os::raw::c_char,
                     __suffixlen: ::std::os::raw::c_int,
                     __flags: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkostemps64(__template: *mut ::std::os::raw::c_char,
                       __suffixlen: ::std::os::raw::c_int,
                       __flags: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn system(__command: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn canonicalize_file_name(__name: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn realpath(__name: *const ::std::os::raw::c_char,
                    __resolved: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
pub type __compar_fn_t =
    ::std::option::Option<unsafe extern "C" fn(arg1:
                                                   *const ::std::os::raw::c_void,
                                               arg2:
                                                   *const ::std::os::raw::c_void)
                              -> ::std::os::raw::c_int>;
pub type comparison_fn_t = __compar_fn_t;
pub type __compar_d_fn_t =
    ::std::option::Option<unsafe extern "C" fn(arg1:
                                                   *const ::std::os::raw::c_void,
                                               arg2:
                                                   *const ::std::os::raw::c_void,
                                               arg3:
                                                   *mut ::std::os::raw::c_void)
                              -> ::std::os::raw::c_int>;
extern "C" {
    pub fn bsearch(__key: *const ::std::os::raw::c_void,
                   __base: *const ::std::os::raw::c_void, __nmemb: usize,
                   __size: usize, __compar: __compar_fn_t)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn qsort(__base: *mut ::std::os::raw::c_void, __nmemb: usize,
                 __size: usize, __compar: __compar_fn_t);
}
extern "C" {
    pub fn qsort_r(__base: *mut ::std::os::raw::c_void, __nmemb: usize,
                   __size: usize, __compar: __compar_d_fn_t,
                   __arg: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn abs(__x: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn labs(__x: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llabs(__x: ::std::os::raw::c_longlong)
     -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn div(__numer: ::std::os::raw::c_int, __denom: ::std::os::raw::c_int)
     -> div_t;
}
extern "C" {
    pub fn ldiv(__numer: ::std::os::raw::c_long,
                __denom: ::std::os::raw::c_long) -> ldiv_t;
}
extern "C" {
    pub fn lldiv(__numer: ::std::os::raw::c_longlong,
                 __denom: ::std::os::raw::c_longlong) -> lldiv_t;
}
extern "C" {
    pub fn ecvt(__value: f64, __ndigit: ::std::os::raw::c_int,
                __decpt: *mut ::std::os::raw::c_int,
                __sign: *mut ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fcvt(__value: f64, __ndigit: ::std::os::raw::c_int,
                __decpt: *mut ::std::os::raw::c_int,
                __sign: *mut ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn gcvt(__value: f64, __ndigit: ::std::os::raw::c_int,
                __buf: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qecvt(__value: f64, __ndigit: ::std::os::raw::c_int,
                 __decpt: *mut ::std::os::raw::c_int,
                 __sign: *mut ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qfcvt(__value: f64, __ndigit: ::std::os::raw::c_int,
                 __decpt: *mut ::std::os::raw::c_int,
                 __sign: *mut ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qgcvt(__value: f64, __ndigit: ::std::os::raw::c_int,
                 __buf: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecvt_r(__value: f64, __ndigit: ::std::os::raw::c_int,
                  __decpt: *mut ::std::os::raw::c_int,
                  __sign: *mut ::std::os::raw::c_int,
                  __buf: *mut ::std::os::raw::c_char, __len: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fcvt_r(__value: f64, __ndigit: ::std::os::raw::c_int,
                  __decpt: *mut ::std::os::raw::c_int,
                  __sign: *mut ::std::os::raw::c_int,
                  __buf: *mut ::std::os::raw::c_char, __len: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qecvt_r(__value: f64, __ndigit: ::std::os::raw::c_int,
                   __decpt: *mut ::std::os::raw::c_int,
                   __sign: *mut ::std::os::raw::c_int,
                   __buf: *mut ::std::os::raw::c_char, __len: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qfcvt_r(__value: f64, __ndigit: ::std::os::raw::c_int,
                   __decpt: *mut ::std::os::raw::c_int,
                   __sign: *mut ::std::os::raw::c_int,
                   __buf: *mut ::std::os::raw::c_char, __len: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mblen(__s: *const ::std::os::raw::c_char, __n: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbtowc(__pwc: *mut wchar_t, __s: *const ::std::os::raw::c_char,
                  __n: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wctomb(__s: *mut ::std::os::raw::c_char, __wchar: wchar_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbstowcs(__pwcs: *mut wchar_t, __s: *const ::std::os::raw::c_char,
                    __n: usize) -> usize;
}
extern "C" {
    pub fn wcstombs(__s: *mut ::std::os::raw::c_char, __pwcs: *const wchar_t,
                    __n: usize) -> usize;
}
extern "C" {
    pub fn rpmatch(__response: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getsubopt(__optionp: *mut *mut ::std::os::raw::c_char,
                     __tokens: *const *const ::std::os::raw::c_char,
                     __valuep: *mut *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setkey(__key: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn posix_openpt(__oflag: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn grantpt(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unlockpt(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ptsname(__fd: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ptsname_r(__fd: ::std::os::raw::c_int,
                     __buf: *mut ::std::os::raw::c_char, __buflen: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpt() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getloadavg(__loadavg: *mut f64, __nelem: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __errno_location() -> *mut ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "program_invocation_name"]
    pub static mut program_invocation_name: *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "program_invocation_short_name"]
    pub static mut program_invocation_short_name: *mut ::std::os::raw::c_char;
}
pub type error_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct timezone {
    pub tz_minuteswest: ::std::os::raw::c_int,
    pub tz_dsttime: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_timezone() {
    assert_eq!(::std::mem::size_of::<timezone>() , 8usize , concat ! (
               "Size of: " , stringify ! ( timezone ) ));
    assert_eq! (::std::mem::align_of::<timezone>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( timezone ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const timezone ) ) . tz_minuteswest as * const
                _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( timezone ) , "::" ,
                stringify ! ( tz_minuteswest ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const timezone ) ) . tz_dsttime as * const _ as
                usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( timezone ) , "::" ,
                stringify ! ( tz_dsttime ) ));
}
impl Clone for timezone {
    fn clone(&self) -> Self { *self }
}
pub type __timezone_ptr_t = *mut timezone;
extern "C" {
    pub fn gettimeofday(__tv: *mut timeval, __tz: __timezone_ptr_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn settimeofday(__tv: *const timeval, __tz: *const timezone)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn adjtime(__delta: *const timeval, __olddelta: *mut timeval)
     -> ::std::os::raw::c_int;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum __itimer_which {
    ITIMER_REAL = 0,
    ITIMER_VIRTUAL = 1,
    ITIMER_PROF = 2,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct itimerval {
    pub it_interval: timeval,
    pub it_value: timeval,
}
#[test]
fn bindgen_test_layout_itimerval() {
    assert_eq!(::std::mem::size_of::<itimerval>() , 32usize , concat ! (
               "Size of: " , stringify ! ( itimerval ) ));
    assert_eq! (::std::mem::align_of::<itimerval>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( itimerval ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const itimerval ) ) . it_interval as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( itimerval ) , "::" ,
                stringify ! ( it_interval ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const itimerval ) ) . it_value as * const _ as
                usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( itimerval ) , "::" ,
                stringify ! ( it_value ) ));
}
impl Clone for itimerval {
    fn clone(&self) -> Self { *self }
}
pub use self::__itimer_which as __itimer_which_t;
extern "C" {
    pub fn getitimer(__which: __itimer_which_t, __value: *mut itimerval)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setitimer(__which: __itimer_which_t, __new: *const itimerval,
                     __old: *mut itimerval) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn utimes(__file: *const ::std::os::raw::c_char,
                  __tvp: *const timeval) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lutimes(__file: *const ::std::os::raw::c_char,
                   __tvp: *const timeval) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn futimes(__fd: ::std::os::raw::c_int, __tvp: *const timeval)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn futimesat(__fd: ::std::os::raw::c_int,
                     __file: *const ::std::os::raw::c_char,
                     __tvp: *const timeval) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct timex {
    pub modes: ::std::os::raw::c_uint,
    pub offset: __syscall_slong_t,
    pub freq: __syscall_slong_t,
    pub maxerror: __syscall_slong_t,
    pub esterror: __syscall_slong_t,
    pub status: ::std::os::raw::c_int,
    pub constant: __syscall_slong_t,
    pub precision: __syscall_slong_t,
    pub tolerance: __syscall_slong_t,
    pub time: timeval,
    pub tick: __syscall_slong_t,
    pub ppsfreq: __syscall_slong_t,
    pub jitter: __syscall_slong_t,
    pub shift: ::std::os::raw::c_int,
    pub stabil: __syscall_slong_t,
    pub jitcnt: __syscall_slong_t,
    pub calcnt: __syscall_slong_t,
    pub errcnt: __syscall_slong_t,
    pub stbcnt: __syscall_slong_t,
    pub tai: ::std::os::raw::c_int,
    pub _bitfield_1: [u32; 11usize],
}
#[test]
fn bindgen_test_layout_timex() {
    assert_eq!(::std::mem::size_of::<timex>() , 208usize , concat ! (
               "Size of: " , stringify ! ( timex ) ));
    assert_eq! (::std::mem::align_of::<timex>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( timex ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const timex ) ) . modes as * const _ as usize }
                , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( timex ) , "::" ,
                stringify ! ( modes ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const timex ) ) . offset as * const _ as usize
                } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( timex ) , "::" ,
                stringify ! ( offset ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const timex ) ) . freq as * const _ as usize }
                , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( timex ) , "::" ,
                stringify ! ( freq ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const timex ) ) . maxerror as * const _ as
                usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( timex ) , "::" ,
                stringify ! ( maxerror ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const timex ) ) . esterror as * const _ as
                usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( timex ) , "::" ,
                stringify ! ( esterror ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const timex ) ) . status as * const _ as usize
                } , 40usize , concat ! (
                "Alignment of field: " , stringify ! ( timex ) , "::" ,
                stringify ! ( status ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const timex ) ) . constant as * const _ as
                usize } , 48usize , concat ! (
                "Alignment of field: " , stringify ! ( timex ) , "::" ,
                stringify ! ( constant ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const timex ) ) . precision as * const _ as
                usize } , 56usize , concat ! (
                "Alignment of field: " , stringify ! ( timex ) , "::" ,
                stringify ! ( precision ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const timex ) ) . tolerance as * const _ as
                usize } , 64usize , concat ! (
                "Alignment of field: " , stringify ! ( timex ) , "::" ,
                stringify ! ( tolerance ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const timex ) ) . time as * const _ as usize }
                , 72usize , concat ! (
                "Alignment of field: " , stringify ! ( timex ) , "::" ,
                stringify ! ( time ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const timex ) ) . tick as * const _ as usize }
                , 88usize , concat ! (
                "Alignment of field: " , stringify ! ( timex ) , "::" ,
                stringify ! ( tick ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const timex ) ) . ppsfreq as * const _ as usize
                } , 96usize , concat ! (
                "Alignment of field: " , stringify ! ( timex ) , "::" ,
                stringify ! ( ppsfreq ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const timex ) ) . jitter as * const _ as usize
                } , 104usize , concat ! (
                "Alignment of field: " , stringify ! ( timex ) , "::" ,
                stringify ! ( jitter ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const timex ) ) . shift as * const _ as usize }
                , 112usize , concat ! (
                "Alignment of field: " , stringify ! ( timex ) , "::" ,
                stringify ! ( shift ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const timex ) ) . stabil as * const _ as usize
                } , 120usize , concat ! (
                "Alignment of field: " , stringify ! ( timex ) , "::" ,
                stringify ! ( stabil ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const timex ) ) . jitcnt as * const _ as usize
                } , 128usize , concat ! (
                "Alignment of field: " , stringify ! ( timex ) , "::" ,
                stringify ! ( jitcnt ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const timex ) ) . calcnt as * const _ as usize
                } , 136usize , concat ! (
                "Alignment of field: " , stringify ! ( timex ) , "::" ,
                stringify ! ( calcnt ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const timex ) ) . errcnt as * const _ as usize
                } , 144usize , concat ! (
                "Alignment of field: " , stringify ! ( timex ) , "::" ,
                stringify ! ( errcnt ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const timex ) ) . stbcnt as * const _ as usize
                } , 152usize , concat ! (
                "Alignment of field: " , stringify ! ( timex ) , "::" ,
                stringify ! ( stbcnt ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const timex ) ) . tai as * const _ as usize } ,
                160usize , concat ! (
                "Alignment of field: " , stringify ! ( timex ) , "::" ,
                stringify ! ( tai ) ));
}
impl Clone for timex {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn clock_adjtime(__clock_id: __clockid_t, __utx: *mut timex)
     -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct tm {
    pub tm_sec: ::std::os::raw::c_int,
    pub tm_min: ::std::os::raw::c_int,
    pub tm_hour: ::std::os::raw::c_int,
    pub tm_mday: ::std::os::raw::c_int,
    pub tm_mon: ::std::os::raw::c_int,
    pub tm_year: ::std::os::raw::c_int,
    pub tm_wday: ::std::os::raw::c_int,
    pub tm_yday: ::std::os::raw::c_int,
    pub tm_isdst: ::std::os::raw::c_int,
    pub tm_gmtoff: ::std::os::raw::c_long,
    pub tm_zone: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_tm() {
    assert_eq!(::std::mem::size_of::<tm>() , 56usize , concat ! (
               "Size of: " , stringify ! ( tm ) ));
    assert_eq! (::std::mem::align_of::<tm>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( tm ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const tm ) ) . tm_sec as * const _ as usize } ,
                0usize , concat ! (
                "Alignment of field: " , stringify ! ( tm ) , "::" , stringify
                ! ( tm_sec ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const tm ) ) . tm_min as * const _ as usize } ,
                4usize , concat ! (
                "Alignment of field: " , stringify ! ( tm ) , "::" , stringify
                ! ( tm_min ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const tm ) ) . tm_hour as * const _ as usize }
                , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( tm ) , "::" , stringify
                ! ( tm_hour ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const tm ) ) . tm_mday as * const _ as usize }
                , 12usize , concat ! (
                "Alignment of field: " , stringify ! ( tm ) , "::" , stringify
                ! ( tm_mday ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const tm ) ) . tm_mon as * const _ as usize } ,
                16usize , concat ! (
                "Alignment of field: " , stringify ! ( tm ) , "::" , stringify
                ! ( tm_mon ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const tm ) ) . tm_year as * const _ as usize }
                , 20usize , concat ! (
                "Alignment of field: " , stringify ! ( tm ) , "::" , stringify
                ! ( tm_year ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const tm ) ) . tm_wday as * const _ as usize }
                , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( tm ) , "::" , stringify
                ! ( tm_wday ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const tm ) ) . tm_yday as * const _ as usize }
                , 28usize , concat ! (
                "Alignment of field: " , stringify ! ( tm ) , "::" , stringify
                ! ( tm_yday ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const tm ) ) . tm_isdst as * const _ as usize }
                , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( tm ) , "::" , stringify
                ! ( tm_isdst ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const tm ) ) . tm_gmtoff as * const _ as usize
                } , 40usize , concat ! (
                "Alignment of field: " , stringify ! ( tm ) , "::" , stringify
                ! ( tm_gmtoff ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const tm ) ) . tm_zone as * const _ as usize }
                , 48usize , concat ! (
                "Alignment of field: " , stringify ! ( tm ) , "::" , stringify
                ! ( tm_zone ) ));
}
impl Clone for tm {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct itimerspec {
    pub it_interval: timespec,
    pub it_value: timespec,
}
#[test]
fn bindgen_test_layout_itimerspec() {
    assert_eq!(::std::mem::size_of::<itimerspec>() , 32usize , concat ! (
               "Size of: " , stringify ! ( itimerspec ) ));
    assert_eq! (::std::mem::align_of::<itimerspec>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( itimerspec ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const itimerspec ) ) . it_interval as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( itimerspec ) , "::" ,
                stringify ! ( it_interval ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const itimerspec ) ) . it_value as * const _ as
                usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( itimerspec ) , "::" ,
                stringify ! ( it_value ) ));
}
impl Clone for itimerspec {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn clock() -> clock_t;
}
extern "C" {
    pub fn time(__timer: *mut time_t) -> time_t;
}
extern "C" {
    pub fn difftime(__time1: time_t, __time0: time_t) -> f64;
}
extern "C" {
    pub fn mktime(__tp: *mut tm) -> time_t;
}
extern "C" {
    pub fn strftime(__s: *mut ::std::os::raw::c_char, __maxsize: usize,
                    __format: *const ::std::os::raw::c_char, __tp: *const tm)
     -> usize;
}
extern "C" {
    pub fn strptime(__s: *const ::std::os::raw::c_char,
                    __fmt: *const ::std::os::raw::c_char, __tp: *mut tm)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strftime_l(__s: *mut ::std::os::raw::c_char, __maxsize: usize,
                      __format: *const ::std::os::raw::c_char,
                      __tp: *const tm, __loc: __locale_t) -> usize;
}
extern "C" {
    pub fn strptime_l(__s: *const ::std::os::raw::c_char,
                      __fmt: *const ::std::os::raw::c_char, __tp: *mut tm,
                      __loc: __locale_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn gmtime(__timer: *const time_t) -> *mut tm;
}
extern "C" {
    pub fn localtime(__timer: *const time_t) -> *mut tm;
}
extern "C" {
    pub fn gmtime_r(__timer: *const time_t, __tp: *mut tm) -> *mut tm;
}
extern "C" {
    pub fn localtime_r(__timer: *const time_t, __tp: *mut tm) -> *mut tm;
}
extern "C" {
    pub fn asctime(__tp: *const tm) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ctime(__timer: *const time_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn asctime_r(__tp: *const tm, __buf: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ctime_r(__timer: *const time_t, __buf: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "__tzname"]
    pub static mut __tzname: [*mut ::std::os::raw::c_char; 2usize];
}
extern "C" {
    #[link_name = "__daylight"]
    pub static mut __daylight: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "__timezone"]
    pub static mut __timezone: ::std::os::raw::c_long;
}
extern "C" {
    #[link_name = "tzname"]
    pub static mut tzname: [*mut ::std::os::raw::c_char; 2usize];
}
extern "C" {
    pub fn tzset();
}
extern "C" {
    #[link_name = "daylight"]
    pub static mut daylight: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "timezone"]
    pub static mut timezone: ::std::os::raw::c_long;
}
extern "C" {
    pub fn stime(__when: *const time_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timegm(__tp: *mut tm) -> time_t;
}
extern "C" {
    pub fn timelocal(__tp: *mut tm) -> time_t;
}
extern "C" {
    pub fn dysize(__year: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nanosleep(__requested_time: *const timespec,
                     __remaining: *mut timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_getres(__clock_id: clockid_t, __res: *mut timespec)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_gettime(__clock_id: clockid_t, __tp: *mut timespec)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_settime(__clock_id: clockid_t, __tp: *const timespec)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_nanosleep(__clock_id: clockid_t,
                           __flags: ::std::os::raw::c_int,
                           __req: *const timespec, __rem: *mut timespec)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_getcpuclockid(__pid: pid_t, __clock_id: *mut clockid_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_create(__clock_id: clockid_t, __evp: *mut sigevent,
                        __timerid: *mut timer_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_delete(__timerid: timer_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_settime(__timerid: timer_t, __flags: ::std::os::raw::c_int,
                         __value: *const itimerspec,
                         __ovalue: *mut itimerspec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_gettime(__timerid: timer_t, __value: *mut itimerspec)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_getoverrun(__timerid: timer_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timespec_get(__ts: *mut timespec, __base: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "getdate_err"]
    pub static mut getdate_err: ::std::os::raw::c_int;
}
extern "C" {
    pub fn getdate(__string: *const ::std::os::raw::c_char) -> *mut tm;
}
extern "C" {
    pub fn getdate_r(__string: *const ::std::os::raw::c_char,
                     __resbufp: *mut tm) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct tms {
    pub tms_utime: clock_t,
    pub tms_stime: clock_t,
    pub tms_cutime: clock_t,
    pub tms_cstime: clock_t,
}
#[test]
fn bindgen_test_layout_tms() {
    assert_eq!(::std::mem::size_of::<tms>() , 32usize , concat ! (
               "Size of: " , stringify ! ( tms ) ));
    assert_eq! (::std::mem::align_of::<tms>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( tms ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const tms ) ) . tms_utime as * const _ as usize
                } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( tms ) , "::" ,
                stringify ! ( tms_utime ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const tms ) ) . tms_stime as * const _ as usize
                } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( tms ) , "::" ,
                stringify ! ( tms_stime ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const tms ) ) . tms_cutime as * const _ as
                usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( tms ) , "::" ,
                stringify ! ( tms_cutime ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const tms ) ) . tms_cstime as * const _ as
                usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( tms ) , "::" ,
                stringify ! ( tms_cstime ) ));
}
impl Clone for tms {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn times(__buffer: *mut tms) -> clock_t;
}
extern "C" {
    pub fn memcpy(__dest: *mut ::std::os::raw::c_void,
                  __src: *const ::std::os::raw::c_void, __n: usize)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memmove(__dest: *mut ::std::os::raw::c_void,
                   __src: *const ::std::os::raw::c_void, __n: usize)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memccpy(__dest: *mut ::std::os::raw::c_void,
                   __src: *const ::std::os::raw::c_void,
                   __c: ::std::os::raw::c_int, __n: usize)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memset(__s: *mut ::std::os::raw::c_void,
                  __c: ::std::os::raw::c_int, __n: usize)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memcmp(__s1: *const ::std::os::raw::c_void,
                  __s2: *const ::std::os::raw::c_void, __n: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn memchr(__s: *const ::std::os::raw::c_void,
                  __c: ::std::os::raw::c_int, __n: usize)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn rawmemchr(__s: *const ::std::os::raw::c_void,
                     __c: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memrchr(__s: *const ::std::os::raw::c_void,
                   __c: ::std::os::raw::c_int, __n: usize)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn strcpy(__dest: *mut ::std::os::raw::c_char,
                  __src: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncpy(__dest: *mut ::std::os::raw::c_char,
                   __src: *const ::std::os::raw::c_char, __n: usize)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcat(__dest: *mut ::std::os::raw::c_char,
                  __src: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncat(__dest: *mut ::std::os::raw::c_char,
                   __src: *const ::std::os::raw::c_char, __n: usize)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcmp(__s1: *const ::std::os::raw::c_char,
                  __s2: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncmp(__s1: *const ::std::os::raw::c_char,
                   __s2: *const ::std::os::raw::c_char, __n: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcoll(__s1: *const ::std::os::raw::c_char,
                   __s2: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strxfrm(__dest: *mut ::std::os::raw::c_char,
                   __src: *const ::std::os::raw::c_char, __n: usize)
     -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strcoll_l(__s1: *const ::std::os::raw::c_char,
                     __s2: *const ::std::os::raw::c_char, __l: __locale_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strxfrm_l(__dest: *mut ::std::os::raw::c_char,
                     __src: *const ::std::os::raw::c_char, __n: usize,
                     __l: __locale_t) -> usize;
}
extern "C" {
    pub fn strdup(__s: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strndup(__string: *const ::std::os::raw::c_char, __n: usize)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strchr(__s: *const ::std::os::raw::c_char,
                  __c: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strrchr(__s: *const ::std::os::raw::c_char,
                   __c: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strchrnul(__s: *const ::std::os::raw::c_char,
                     __c: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcspn(__s: *const ::std::os::raw::c_char,
                   __reject: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strspn(__s: *const ::std::os::raw::c_char,
                  __accept: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strpbrk(__s: *const ::std::os::raw::c_char,
                   __accept: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strstr(__haystack: *const ::std::os::raw::c_char,
                  __needle: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strtok(__s: *mut ::std::os::raw::c_char,
                  __delim: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __strtok_r(__s: *mut ::std::os::raw::c_char,
                      __delim: *const ::std::os::raw::c_char,
                      __save_ptr: *mut *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strtok_r(__s: *mut ::std::os::raw::c_char,
                    __delim: *const ::std::os::raw::c_char,
                    __save_ptr: *mut *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcasestr(__haystack: *const ::std::os::raw::c_char,
                      __needle: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn memmem(__haystack: *const ::std::os::raw::c_void,
                  __haystacklen: usize,
                  __needle: *const ::std::os::raw::c_void, __needlelen: usize)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn __mempcpy(__dest: *mut ::std::os::raw::c_void,
                     __src: *const ::std::os::raw::c_void, __n: usize)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn mempcpy(__dest: *mut ::std::os::raw::c_void,
                   __src: *const ::std::os::raw::c_void, __n: usize)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn strlen(__s: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strnlen(__string: *const ::std::os::raw::c_char, __maxlen: usize)
     -> usize;
}
extern "C" {
    pub fn strerror(__errnum: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strerror_r(__errnum: ::std::os::raw::c_int,
                      __buf: *mut ::std::os::raw::c_char, __buflen: usize)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strerror_l(__errnum: ::std::os::raw::c_int, __l: __locale_t)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __bzero(__s: *mut ::std::os::raw::c_void, __n: usize);
}
extern "C" {
    pub fn bcopy(__src: *const ::std::os::raw::c_void,
                 __dest: *mut ::std::os::raw::c_void, __n: usize);
}
extern "C" {
    pub fn bzero(__s: *mut ::std::os::raw::c_void, __n: usize);
}
extern "C" {
    pub fn explicit_bzero(__s: *mut ::std::os::raw::c_void, __n: usize);
}
extern "C" {
    pub fn bcmp(__s1: *const ::std::os::raw::c_void,
                __s2: *const ::std::os::raw::c_void, __n: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn index(__s: *const ::std::os::raw::c_char,
                 __c: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rindex(__s: *const ::std::os::raw::c_char,
                  __c: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ffs(__i: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ffsl(__l: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ffsll(__ll: ::std::os::raw::c_longlong) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcasecmp(__s1: *const ::std::os::raw::c_char,
                      __s2: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncasecmp(__s1: *const ::std::os::raw::c_char,
                       __s2: *const ::std::os::raw::c_char, __n: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcasecmp_l(__s1: *const ::std::os::raw::c_char,
                        __s2: *const ::std::os::raw::c_char,
                        __loc: __locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncasecmp_l(__s1: *const ::std::os::raw::c_char,
                         __s2: *const ::std::os::raw::c_char, __n: usize,
                         __loc: __locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strsep(__stringp: *mut *mut ::std::os::raw::c_char,
                  __delim: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strsignal(__sig: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __stpcpy(__dest: *mut ::std::os::raw::c_char,
                    __src: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn stpcpy(__dest: *mut ::std::os::raw::c_char,
                  __src: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __stpncpy(__dest: *mut ::std::os::raw::c_char,
                     __src: *const ::std::os::raw::c_char, __n: usize)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn stpncpy(__dest: *mut ::std::os::raw::c_char,
                   __src: *const ::std::os::raw::c_char, __n: usize)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strverscmp(__s1: *const ::std::os::raw::c_char,
                      __s2: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strfry(__string: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn memfrob(__s: *mut ::std::os::raw::c_void, __n: usize)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn basename(__filename: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct lconv {
    pub decimal_point: *mut ::std::os::raw::c_char,
    pub thousands_sep: *mut ::std::os::raw::c_char,
    pub grouping: *mut ::std::os::raw::c_char,
    pub int_curr_symbol: *mut ::std::os::raw::c_char,
    pub currency_symbol: *mut ::std::os::raw::c_char,
    pub mon_decimal_point: *mut ::std::os::raw::c_char,
    pub mon_thousands_sep: *mut ::std::os::raw::c_char,
    pub mon_grouping: *mut ::std::os::raw::c_char,
    pub positive_sign: *mut ::std::os::raw::c_char,
    pub negative_sign: *mut ::std::os::raw::c_char,
    pub int_frac_digits: ::std::os::raw::c_char,
    pub frac_digits: ::std::os::raw::c_char,
    pub p_cs_precedes: ::std::os::raw::c_char,
    pub p_sep_by_space: ::std::os::raw::c_char,
    pub n_cs_precedes: ::std::os::raw::c_char,
    pub n_sep_by_space: ::std::os::raw::c_char,
    pub p_sign_posn: ::std::os::raw::c_char,
    pub n_sign_posn: ::std::os::raw::c_char,
    pub int_p_cs_precedes: ::std::os::raw::c_char,
    pub int_p_sep_by_space: ::std::os::raw::c_char,
    pub int_n_cs_precedes: ::std::os::raw::c_char,
    pub int_n_sep_by_space: ::std::os::raw::c_char,
    pub int_p_sign_posn: ::std::os::raw::c_char,
    pub int_n_sign_posn: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_lconv() {
    assert_eq!(::std::mem::size_of::<lconv>() , 96usize , concat ! (
               "Size of: " , stringify ! ( lconv ) ));
    assert_eq! (::std::mem::align_of::<lconv>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( lconv ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const lconv ) ) . decimal_point as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( lconv ) , "::" ,
                stringify ! ( decimal_point ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const lconv ) ) . thousands_sep as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( lconv ) , "::" ,
                stringify ! ( thousands_sep ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const lconv ) ) . grouping as * const _ as
                usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( lconv ) , "::" ,
                stringify ! ( grouping ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const lconv ) ) . int_curr_symbol as * const _
                as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( lconv ) , "::" ,
                stringify ! ( int_curr_symbol ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const lconv ) ) . currency_symbol as * const _
                as usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( lconv ) , "::" ,
                stringify ! ( currency_symbol ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const lconv ) ) . mon_decimal_point as * const
                _ as usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! ( lconv ) , "::" ,
                stringify ! ( mon_decimal_point ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const lconv ) ) . mon_thousands_sep as * const
                _ as usize } , 48usize , concat ! (
                "Alignment of field: " , stringify ! ( lconv ) , "::" ,
                stringify ! ( mon_thousands_sep ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const lconv ) ) . mon_grouping as * const _ as
                usize } , 56usize , concat ! (
                "Alignment of field: " , stringify ! ( lconv ) , "::" ,
                stringify ! ( mon_grouping ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const lconv ) ) . positive_sign as * const _ as
                usize } , 64usize , concat ! (
                "Alignment of field: " , stringify ! ( lconv ) , "::" ,
                stringify ! ( positive_sign ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const lconv ) ) . negative_sign as * const _ as
                usize } , 72usize , concat ! (
                "Alignment of field: " , stringify ! ( lconv ) , "::" ,
                stringify ! ( negative_sign ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const lconv ) ) . int_frac_digits as * const _
                as usize } , 80usize , concat ! (
                "Alignment of field: " , stringify ! ( lconv ) , "::" ,
                stringify ! ( int_frac_digits ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const lconv ) ) . frac_digits as * const _ as
                usize } , 81usize , concat ! (
                "Alignment of field: " , stringify ! ( lconv ) , "::" ,
                stringify ! ( frac_digits ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const lconv ) ) . p_cs_precedes as * const _ as
                usize } , 82usize , concat ! (
                "Alignment of field: " , stringify ! ( lconv ) , "::" ,
                stringify ! ( p_cs_precedes ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const lconv ) ) . p_sep_by_space as * const _
                as usize } , 83usize , concat ! (
                "Alignment of field: " , stringify ! ( lconv ) , "::" ,
                stringify ! ( p_sep_by_space ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const lconv ) ) . n_cs_precedes as * const _ as
                usize } , 84usize , concat ! (
                "Alignment of field: " , stringify ! ( lconv ) , "::" ,
                stringify ! ( n_cs_precedes ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const lconv ) ) . n_sep_by_space as * const _
                as usize } , 85usize , concat ! (
                "Alignment of field: " , stringify ! ( lconv ) , "::" ,
                stringify ! ( n_sep_by_space ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const lconv ) ) . p_sign_posn as * const _ as
                usize } , 86usize , concat ! (
                "Alignment of field: " , stringify ! ( lconv ) , "::" ,
                stringify ! ( p_sign_posn ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const lconv ) ) . n_sign_posn as * const _ as
                usize } , 87usize , concat ! (
                "Alignment of field: " , stringify ! ( lconv ) , "::" ,
                stringify ! ( n_sign_posn ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const lconv ) ) . int_p_cs_precedes as * const
                _ as usize } , 88usize , concat ! (
                "Alignment of field: " , stringify ! ( lconv ) , "::" ,
                stringify ! ( int_p_cs_precedes ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const lconv ) ) . int_p_sep_by_space as * const
                _ as usize } , 89usize , concat ! (
                "Alignment of field: " , stringify ! ( lconv ) , "::" ,
                stringify ! ( int_p_sep_by_space ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const lconv ) ) . int_n_cs_precedes as * const
                _ as usize } , 90usize , concat ! (
                "Alignment of field: " , stringify ! ( lconv ) , "::" ,
                stringify ! ( int_n_cs_precedes ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const lconv ) ) . int_n_sep_by_space as * const
                _ as usize } , 91usize , concat ! (
                "Alignment of field: " , stringify ! ( lconv ) , "::" ,
                stringify ! ( int_n_sep_by_space ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const lconv ) ) . int_p_sign_posn as * const _
                as usize } , 92usize , concat ! (
                "Alignment of field: " , stringify ! ( lconv ) , "::" ,
                stringify ! ( int_p_sign_posn ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const lconv ) ) . int_n_sign_posn as * const _
                as usize } , 93usize , concat ! (
                "Alignment of field: " , stringify ! ( lconv ) , "::" ,
                stringify ! ( int_n_sign_posn ) ));
}
impl Clone for lconv {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn setlocale(__category: ::std::os::raw::c_int,
                     __locale: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn localeconv() -> *mut lconv;
}
extern "C" {
    pub fn newlocale(__category_mask: ::std::os::raw::c_int,
                     __locale: *const ::std::os::raw::c_char,
                     __base: __locale_t) -> __locale_t;
}
extern "C" {
    pub fn duplocale(__dataset: __locale_t) -> __locale_t;
}
extern "C" {
    pub fn freelocale(__dataset: __locale_t);
}
extern "C" {
    pub fn uselocale(__dataset: __locale_t) -> __locale_t;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct flock {
    pub l_type: ::std::os::raw::c_short,
    pub l_whence: ::std::os::raw::c_short,
    pub l_start: __off_t,
    pub l_len: __off_t,
    pub l_pid: __pid_t,
}
#[test]
fn bindgen_test_layout_flock() {
    assert_eq!(::std::mem::size_of::<flock>() , 32usize , concat ! (
               "Size of: " , stringify ! ( flock ) ));
    assert_eq! (::std::mem::align_of::<flock>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( flock ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const flock ) ) . l_type as * const _ as usize
                } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( flock ) , "::" ,
                stringify ! ( l_type ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const flock ) ) . l_whence as * const _ as
                usize } , 2usize , concat ! (
                "Alignment of field: " , stringify ! ( flock ) , "::" ,
                stringify ! ( l_whence ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const flock ) ) . l_start as * const _ as usize
                } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( flock ) , "::" ,
                stringify ! ( l_start ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const flock ) ) . l_len as * const _ as usize }
                , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( flock ) , "::" ,
                stringify ! ( l_len ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const flock ) ) . l_pid as * const _ as usize }
                , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( flock ) , "::" ,
                stringify ! ( l_pid ) ));
}
impl Clone for flock {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct flock64 {
    pub l_type: ::std::os::raw::c_short,
    pub l_whence: ::std::os::raw::c_short,
    pub l_start: __off64_t,
    pub l_len: __off64_t,
    pub l_pid: __pid_t,
}
#[test]
fn bindgen_test_layout_flock64() {
    assert_eq!(::std::mem::size_of::<flock64>() , 32usize , concat ! (
               "Size of: " , stringify ! ( flock64 ) ));
    assert_eq! (::std::mem::align_of::<flock64>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( flock64 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const flock64 ) ) . l_type as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( flock64 ) , "::" ,
                stringify ! ( l_type ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const flock64 ) ) . l_whence as * const _ as
                usize } , 2usize , concat ! (
                "Alignment of field: " , stringify ! ( flock64 ) , "::" ,
                stringify ! ( l_whence ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const flock64 ) ) . l_start as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( flock64 ) , "::" ,
                stringify ! ( l_start ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const flock64 ) ) . l_len as * const _ as usize
                } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( flock64 ) , "::" ,
                stringify ! ( l_len ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const flock64 ) ) . l_pid as * const _ as usize
                } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( flock64 ) , "::" ,
                stringify ! ( l_pid ) ));
}
impl Clone for flock64 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct iovec {
    pub iov_base: *mut ::std::os::raw::c_void,
    pub iov_len: usize,
}
#[test]
fn bindgen_test_layout_iovec() {
    assert_eq!(::std::mem::size_of::<iovec>() , 16usize , concat ! (
               "Size of: " , stringify ! ( iovec ) ));
    assert_eq! (::std::mem::align_of::<iovec>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( iovec ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const iovec ) ) . iov_base as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( iovec ) , "::" ,
                stringify ! ( iov_base ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const iovec ) ) . iov_len as * const _ as usize
                } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( iovec ) , "::" ,
                stringify ! ( iov_len ) ));
}
impl Clone for iovec {
    fn clone(&self) -> Self { *self }
}
pub const __pid_type_F_OWNER_GID: __pid_type = __pid_type::F_OWNER_PGRP;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum __pid_type { F_OWNER_TID = 0, F_OWNER_PID = 1, F_OWNER_PGRP = 2, }
#[repr(C)]
#[derive(Debug, Copy)]
pub struct f_owner_ex {
    pub type_: __pid_type,
    pub pid: __pid_t,
}
#[test]
fn bindgen_test_layout_f_owner_ex() {
    assert_eq!(::std::mem::size_of::<f_owner_ex>() , 8usize , concat ! (
               "Size of: " , stringify ! ( f_owner_ex ) ));
    assert_eq! (::std::mem::align_of::<f_owner_ex>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( f_owner_ex ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const f_owner_ex ) ) . type_ as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( f_owner_ex ) , "::" ,
                stringify ! ( type_ ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const f_owner_ex ) ) . pid as * const _ as
                usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( f_owner_ex ) , "::" ,
                stringify ! ( pid ) ));
}
impl Clone for f_owner_ex {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct file_handle {
    pub handle_bytes: ::std::os::raw::c_uint,
    pub handle_type: ::std::os::raw::c_int,
    pub f_handle: __IncompleteArrayField<::std::os::raw::c_uchar>,
}
#[test]
fn bindgen_test_layout_file_handle() {
    assert_eq!(::std::mem::size_of::<file_handle>() , 8usize , concat ! (
               "Size of: " , stringify ! ( file_handle ) ));
    assert_eq! (::std::mem::align_of::<file_handle>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( file_handle ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const file_handle ) ) . handle_bytes as * const
                _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( file_handle ) , "::" ,
                stringify ! ( handle_bytes ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const file_handle ) ) . handle_type as * const
                _ as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( file_handle ) , "::" ,
                stringify ! ( handle_type ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const file_handle ) ) . f_handle as * const _
                as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( file_handle ) , "::" ,
                stringify ! ( f_handle ) ));
}
impl Clone for file_handle {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn readahead(__fd: ::std::os::raw::c_int, __offset: __off64_t,
                     __count: usize) -> isize;
}
extern "C" {
    pub fn sync_file_range(__fd: ::std::os::raw::c_int, __offset: __off64_t,
                           __count: __off64_t,
                           __flags: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vmsplice(__fdout: ::std::os::raw::c_int, __iov: *const iovec,
                    __count: usize, __flags: ::std::os::raw::c_uint) -> isize;
}
extern "C" {
    pub fn splice(__fdin: ::std::os::raw::c_int, __offin: *mut __off64_t,
                  __fdout: ::std::os::raw::c_int, __offout: *mut __off64_t,
                  __len: usize, __flags: ::std::os::raw::c_uint) -> isize;
}
extern "C" {
    pub fn tee(__fdin: ::std::os::raw::c_int, __fdout: ::std::os::raw::c_int,
               __len: usize, __flags: ::std::os::raw::c_uint) -> isize;
}
extern "C" {
    pub fn fallocate(__fd: ::std::os::raw::c_int,
                     __mode: ::std::os::raw::c_int, __offset: __off_t,
                     __len: __off_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fallocate64(__fd: ::std::os::raw::c_int,
                       __mode: ::std::os::raw::c_int, __offset: __off64_t,
                       __len: __off64_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn name_to_handle_at(__dfd: ::std::os::raw::c_int,
                             __name: *const ::std::os::raw::c_char,
                             __handle: *mut file_handle,
                             __mnt_id: *mut ::std::os::raw::c_int,
                             __flags: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn open_by_handle_at(__mountdirfd: ::std::os::raw::c_int,
                             __handle: *mut file_handle,
                             __flags: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fcntl(__fd: ::std::os::raw::c_int,
                 __cmd: ::std::os::raw::c_int, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn open(__file: *const ::std::os::raw::c_char,
                __oflag: ::std::os::raw::c_int, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn open64(__file: *const ::std::os::raw::c_char,
                  __oflag: ::std::os::raw::c_int, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn openat(__fd: ::std::os::raw::c_int,
                  __file: *const ::std::os::raw::c_char,
                  __oflag: ::std::os::raw::c_int, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn openat64(__fd: ::std::os::raw::c_int,
                    __file: *const ::std::os::raw::c_char,
                    __oflag: ::std::os::raw::c_int, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn creat(__file: *const ::std::os::raw::c_char, __mode: mode_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn creat64(__file: *const ::std::os::raw::c_char, __mode: mode_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_fadvise(__fd: ::std::os::raw::c_int, __offset: off_t,
                         __len: off_t, __advise: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_fadvise64(__fd: ::std::os::raw::c_int, __offset: off64_t,
                           __len: off64_t, __advise: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_fallocate(__fd: ::std::os::raw::c_int, __offset: off_t,
                           __len: off_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_fallocate64(__fd: ::std::os::raw::c_int, __offset: off64_t,
                             __len: off64_t) -> ::std::os::raw::c_int;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum idtype_t { P_ALL = 0, P_PID = 1, P_PGID = 2, }
extern "C" {
    pub fn wait(__stat_loc: *mut ::std::os::raw::c_int) -> __pid_t;
}
extern "C" {
    pub fn waitpid(__pid: __pid_t, __stat_loc: *mut ::std::os::raw::c_int,
                   __options: ::std::os::raw::c_int) -> __pid_t;
}
extern "C" {
    pub fn waitid(__idtype: idtype_t, __id: __id_t, __infop: *mut siginfo_t,
                  __options: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct rusage {
    pub ru_utime: timeval,
    pub ru_stime: timeval,
    pub __bindgen_anon_1: rusage__bindgen_ty_1,
    pub __bindgen_anon_2: rusage__bindgen_ty_2,
    pub __bindgen_anon_3: rusage__bindgen_ty_3,
    pub __bindgen_anon_4: rusage__bindgen_ty_4,
    pub __bindgen_anon_5: rusage__bindgen_ty_5,
    pub __bindgen_anon_6: rusage__bindgen_ty_6,
    pub __bindgen_anon_7: rusage__bindgen_ty_7,
    pub __bindgen_anon_8: rusage__bindgen_ty_8,
    pub __bindgen_anon_9: rusage__bindgen_ty_9,
    pub __bindgen_anon_10: rusage__bindgen_ty_10,
    pub __bindgen_anon_11: rusage__bindgen_ty_11,
    pub __bindgen_anon_12: rusage__bindgen_ty_12,
    pub __bindgen_anon_13: rusage__bindgen_ty_13,
    pub __bindgen_anon_14: rusage__bindgen_ty_14,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct rusage__bindgen_ty_1 {
    pub ru_maxrss: __BindgenUnionField<::std::os::raw::c_long>,
    pub __ru_maxrss_word: __BindgenUnionField<__syscall_slong_t>,
    pub bindgen_union_field: u64,
}
#[test]
fn bindgen_test_layout_rusage__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<rusage__bindgen_ty_1>() , 8usize , concat
               ! ( "Size of: " , stringify ! ( rusage__bindgen_ty_1 ) ));
    assert_eq! (::std::mem::align_of::<rusage__bindgen_ty_1>() , 8usize ,
                concat ! (
                "Alignment of " , stringify ! ( rusage__bindgen_ty_1 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rusage__bindgen_ty_1 ) ) . ru_maxrss as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( rusage__bindgen_ty_1 )
                , "::" , stringify ! ( ru_maxrss ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rusage__bindgen_ty_1 ) ) .
                __ru_maxrss_word as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( rusage__bindgen_ty_1 )
                , "::" , stringify ! ( __ru_maxrss_word ) ));
}
impl Clone for rusage__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct rusage__bindgen_ty_2 {
    pub ru_ixrss: __BindgenUnionField<::std::os::raw::c_long>,
    pub __ru_ixrss_word: __BindgenUnionField<__syscall_slong_t>,
    pub bindgen_union_field: u64,
}
#[test]
fn bindgen_test_layout_rusage__bindgen_ty_2() {
    assert_eq!(::std::mem::size_of::<rusage__bindgen_ty_2>() , 8usize , concat
               ! ( "Size of: " , stringify ! ( rusage__bindgen_ty_2 ) ));
    assert_eq! (::std::mem::align_of::<rusage__bindgen_ty_2>() , 8usize ,
                concat ! (
                "Alignment of " , stringify ! ( rusage__bindgen_ty_2 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rusage__bindgen_ty_2 ) ) . ru_ixrss as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( rusage__bindgen_ty_2 )
                , "::" , stringify ! ( ru_ixrss ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rusage__bindgen_ty_2 ) ) .
                __ru_ixrss_word as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( rusage__bindgen_ty_2 )
                , "::" , stringify ! ( __ru_ixrss_word ) ));
}
impl Clone for rusage__bindgen_ty_2 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct rusage__bindgen_ty_3 {
    pub ru_idrss: __BindgenUnionField<::std::os::raw::c_long>,
    pub __ru_idrss_word: __BindgenUnionField<__syscall_slong_t>,
    pub bindgen_union_field: u64,
}
#[test]
fn bindgen_test_layout_rusage__bindgen_ty_3() {
    assert_eq!(::std::mem::size_of::<rusage__bindgen_ty_3>() , 8usize , concat
               ! ( "Size of: " , stringify ! ( rusage__bindgen_ty_3 ) ));
    assert_eq! (::std::mem::align_of::<rusage__bindgen_ty_3>() , 8usize ,
                concat ! (
                "Alignment of " , stringify ! ( rusage__bindgen_ty_3 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rusage__bindgen_ty_3 ) ) . ru_idrss as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( rusage__bindgen_ty_3 )
                , "::" , stringify ! ( ru_idrss ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rusage__bindgen_ty_3 ) ) .
                __ru_idrss_word as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( rusage__bindgen_ty_3 )
                , "::" , stringify ! ( __ru_idrss_word ) ));
}
impl Clone for rusage__bindgen_ty_3 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct rusage__bindgen_ty_4 {
    pub ru_isrss: __BindgenUnionField<::std::os::raw::c_long>,
    pub __ru_isrss_word: __BindgenUnionField<__syscall_slong_t>,
    pub bindgen_union_field: u64,
}
#[test]
fn bindgen_test_layout_rusage__bindgen_ty_4() {
    assert_eq!(::std::mem::size_of::<rusage__bindgen_ty_4>() , 8usize , concat
               ! ( "Size of: " , stringify ! ( rusage__bindgen_ty_4 ) ));
    assert_eq! (::std::mem::align_of::<rusage__bindgen_ty_4>() , 8usize ,
                concat ! (
                "Alignment of " , stringify ! ( rusage__bindgen_ty_4 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rusage__bindgen_ty_4 ) ) . ru_isrss as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( rusage__bindgen_ty_4 )
                , "::" , stringify ! ( ru_isrss ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rusage__bindgen_ty_4 ) ) .
                __ru_isrss_word as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( rusage__bindgen_ty_4 )
                , "::" , stringify ! ( __ru_isrss_word ) ));
}
impl Clone for rusage__bindgen_ty_4 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct rusage__bindgen_ty_5 {
    pub ru_minflt: __BindgenUnionField<::std::os::raw::c_long>,
    pub __ru_minflt_word: __BindgenUnionField<__syscall_slong_t>,
    pub bindgen_union_field: u64,
}
#[test]
fn bindgen_test_layout_rusage__bindgen_ty_5() {
    assert_eq!(::std::mem::size_of::<rusage__bindgen_ty_5>() , 8usize , concat
               ! ( "Size of: " , stringify ! ( rusage__bindgen_ty_5 ) ));
    assert_eq! (::std::mem::align_of::<rusage__bindgen_ty_5>() , 8usize ,
                concat ! (
                "Alignment of " , stringify ! ( rusage__bindgen_ty_5 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rusage__bindgen_ty_5 ) ) . ru_minflt as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( rusage__bindgen_ty_5 )
                , "::" , stringify ! ( ru_minflt ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rusage__bindgen_ty_5 ) ) .
                __ru_minflt_word as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( rusage__bindgen_ty_5 )
                , "::" , stringify ! ( __ru_minflt_word ) ));
}
impl Clone for rusage__bindgen_ty_5 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct rusage__bindgen_ty_6 {
    pub ru_majflt: __BindgenUnionField<::std::os::raw::c_long>,
    pub __ru_majflt_word: __BindgenUnionField<__syscall_slong_t>,
    pub bindgen_union_field: u64,
}
#[test]
fn bindgen_test_layout_rusage__bindgen_ty_6() {
    assert_eq!(::std::mem::size_of::<rusage__bindgen_ty_6>() , 8usize , concat
               ! ( "Size of: " , stringify ! ( rusage__bindgen_ty_6 ) ));
    assert_eq! (::std::mem::align_of::<rusage__bindgen_ty_6>() , 8usize ,
                concat ! (
                "Alignment of " , stringify ! ( rusage__bindgen_ty_6 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rusage__bindgen_ty_6 ) ) . ru_majflt as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( rusage__bindgen_ty_6 )
                , "::" , stringify ! ( ru_majflt ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rusage__bindgen_ty_6 ) ) .
                __ru_majflt_word as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( rusage__bindgen_ty_6 )
                , "::" , stringify ! ( __ru_majflt_word ) ));
}
impl Clone for rusage__bindgen_ty_6 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct rusage__bindgen_ty_7 {
    pub ru_nswap: __BindgenUnionField<::std::os::raw::c_long>,
    pub __ru_nswap_word: __BindgenUnionField<__syscall_slong_t>,
    pub bindgen_union_field: u64,
}
#[test]
fn bindgen_test_layout_rusage__bindgen_ty_7() {
    assert_eq!(::std::mem::size_of::<rusage__bindgen_ty_7>() , 8usize , concat
               ! ( "Size of: " , stringify ! ( rusage__bindgen_ty_7 ) ));
    assert_eq! (::std::mem::align_of::<rusage__bindgen_ty_7>() , 8usize ,
                concat ! (
                "Alignment of " , stringify ! ( rusage__bindgen_ty_7 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rusage__bindgen_ty_7 ) ) . ru_nswap as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( rusage__bindgen_ty_7 )
                , "::" , stringify ! ( ru_nswap ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rusage__bindgen_ty_7 ) ) .
                __ru_nswap_word as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( rusage__bindgen_ty_7 )
                , "::" , stringify ! ( __ru_nswap_word ) ));
}
impl Clone for rusage__bindgen_ty_7 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct rusage__bindgen_ty_8 {
    pub ru_inblock: __BindgenUnionField<::std::os::raw::c_long>,
    pub __ru_inblock_word: __BindgenUnionField<__syscall_slong_t>,
    pub bindgen_union_field: u64,
}
#[test]
fn bindgen_test_layout_rusage__bindgen_ty_8() {
    assert_eq!(::std::mem::size_of::<rusage__bindgen_ty_8>() , 8usize , concat
               ! ( "Size of: " , stringify ! ( rusage__bindgen_ty_8 ) ));
    assert_eq! (::std::mem::align_of::<rusage__bindgen_ty_8>() , 8usize ,
                concat ! (
                "Alignment of " , stringify ! ( rusage__bindgen_ty_8 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rusage__bindgen_ty_8 ) ) . ru_inblock as
                * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( rusage__bindgen_ty_8 )
                , "::" , stringify ! ( ru_inblock ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rusage__bindgen_ty_8 ) ) .
                __ru_inblock_word as * const _ as usize } , 0usize , concat !
                (
                "Alignment of field: " , stringify ! ( rusage__bindgen_ty_8 )
                , "::" , stringify ! ( __ru_inblock_word ) ));
}
impl Clone for rusage__bindgen_ty_8 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct rusage__bindgen_ty_9 {
    pub ru_oublock: __BindgenUnionField<::std::os::raw::c_long>,
    pub __ru_oublock_word: __BindgenUnionField<__syscall_slong_t>,
    pub bindgen_union_field: u64,
}
#[test]
fn bindgen_test_layout_rusage__bindgen_ty_9() {
    assert_eq!(::std::mem::size_of::<rusage__bindgen_ty_9>() , 8usize , concat
               ! ( "Size of: " , stringify ! ( rusage__bindgen_ty_9 ) ));
    assert_eq! (::std::mem::align_of::<rusage__bindgen_ty_9>() , 8usize ,
                concat ! (
                "Alignment of " , stringify ! ( rusage__bindgen_ty_9 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rusage__bindgen_ty_9 ) ) . ru_oublock as
                * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( rusage__bindgen_ty_9 )
                , "::" , stringify ! ( ru_oublock ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rusage__bindgen_ty_9 ) ) .
                __ru_oublock_word as * const _ as usize } , 0usize , concat !
                (
                "Alignment of field: " , stringify ! ( rusage__bindgen_ty_9 )
                , "::" , stringify ! ( __ru_oublock_word ) ));
}
impl Clone for rusage__bindgen_ty_9 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct rusage__bindgen_ty_10 {
    pub ru_msgsnd: __BindgenUnionField<::std::os::raw::c_long>,
    pub __ru_msgsnd_word: __BindgenUnionField<__syscall_slong_t>,
    pub bindgen_union_field: u64,
}
#[test]
fn bindgen_test_layout_rusage__bindgen_ty_10() {
    assert_eq!(::std::mem::size_of::<rusage__bindgen_ty_10>() , 8usize ,
               concat ! ( "Size of: " , stringify ! ( rusage__bindgen_ty_10 )
               ));
    assert_eq! (::std::mem::align_of::<rusage__bindgen_ty_10>() , 8usize ,
                concat ! (
                "Alignment of " , stringify ! ( rusage__bindgen_ty_10 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rusage__bindgen_ty_10 ) ) . ru_msgsnd as
                * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( rusage__bindgen_ty_10 )
                , "::" , stringify ! ( ru_msgsnd ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rusage__bindgen_ty_10 ) ) .
                __ru_msgsnd_word as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( rusage__bindgen_ty_10 )
                , "::" , stringify ! ( __ru_msgsnd_word ) ));
}
impl Clone for rusage__bindgen_ty_10 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct rusage__bindgen_ty_11 {
    pub ru_msgrcv: __BindgenUnionField<::std::os::raw::c_long>,
    pub __ru_msgrcv_word: __BindgenUnionField<__syscall_slong_t>,
    pub bindgen_union_field: u64,
}
#[test]
fn bindgen_test_layout_rusage__bindgen_ty_11() {
    assert_eq!(::std::mem::size_of::<rusage__bindgen_ty_11>() , 8usize ,
               concat ! ( "Size of: " , stringify ! ( rusage__bindgen_ty_11 )
               ));
    assert_eq! (::std::mem::align_of::<rusage__bindgen_ty_11>() , 8usize ,
                concat ! (
                "Alignment of " , stringify ! ( rusage__bindgen_ty_11 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rusage__bindgen_ty_11 ) ) . ru_msgrcv as
                * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( rusage__bindgen_ty_11 )
                , "::" , stringify ! ( ru_msgrcv ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rusage__bindgen_ty_11 ) ) .
                __ru_msgrcv_word as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( rusage__bindgen_ty_11 )
                , "::" , stringify ! ( __ru_msgrcv_word ) ));
}
impl Clone for rusage__bindgen_ty_11 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct rusage__bindgen_ty_12 {
    pub ru_nsignals: __BindgenUnionField<::std::os::raw::c_long>,
    pub __ru_nsignals_word: __BindgenUnionField<__syscall_slong_t>,
    pub bindgen_union_field: u64,
}
#[test]
fn bindgen_test_layout_rusage__bindgen_ty_12() {
    assert_eq!(::std::mem::size_of::<rusage__bindgen_ty_12>() , 8usize ,
               concat ! ( "Size of: " , stringify ! ( rusage__bindgen_ty_12 )
               ));
    assert_eq! (::std::mem::align_of::<rusage__bindgen_ty_12>() , 8usize ,
                concat ! (
                "Alignment of " , stringify ! ( rusage__bindgen_ty_12 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rusage__bindgen_ty_12 ) ) . ru_nsignals
                as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( rusage__bindgen_ty_12 )
                , "::" , stringify ! ( ru_nsignals ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rusage__bindgen_ty_12 ) ) .
                __ru_nsignals_word as * const _ as usize } , 0usize , concat !
                (
                "Alignment of field: " , stringify ! ( rusage__bindgen_ty_12 )
                , "::" , stringify ! ( __ru_nsignals_word ) ));
}
impl Clone for rusage__bindgen_ty_12 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct rusage__bindgen_ty_13 {
    pub ru_nvcsw: __BindgenUnionField<::std::os::raw::c_long>,
    pub __ru_nvcsw_word: __BindgenUnionField<__syscall_slong_t>,
    pub bindgen_union_field: u64,
}
#[test]
fn bindgen_test_layout_rusage__bindgen_ty_13() {
    assert_eq!(::std::mem::size_of::<rusage__bindgen_ty_13>() , 8usize ,
               concat ! ( "Size of: " , stringify ! ( rusage__bindgen_ty_13 )
               ));
    assert_eq! (::std::mem::align_of::<rusage__bindgen_ty_13>() , 8usize ,
                concat ! (
                "Alignment of " , stringify ! ( rusage__bindgen_ty_13 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rusage__bindgen_ty_13 ) ) . ru_nvcsw as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( rusage__bindgen_ty_13 )
                , "::" , stringify ! ( ru_nvcsw ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rusage__bindgen_ty_13 ) ) .
                __ru_nvcsw_word as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( rusage__bindgen_ty_13 )
                , "::" , stringify ! ( __ru_nvcsw_word ) ));
}
impl Clone for rusage__bindgen_ty_13 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct rusage__bindgen_ty_14 {
    pub ru_nivcsw: __BindgenUnionField<::std::os::raw::c_long>,
    pub __ru_nivcsw_word: __BindgenUnionField<__syscall_slong_t>,
    pub bindgen_union_field: u64,
}
#[test]
fn bindgen_test_layout_rusage__bindgen_ty_14() {
    assert_eq!(::std::mem::size_of::<rusage__bindgen_ty_14>() , 8usize ,
               concat ! ( "Size of: " , stringify ! ( rusage__bindgen_ty_14 )
               ));
    assert_eq! (::std::mem::align_of::<rusage__bindgen_ty_14>() , 8usize ,
                concat ! (
                "Alignment of " , stringify ! ( rusage__bindgen_ty_14 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rusage__bindgen_ty_14 ) ) . ru_nivcsw as
                * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( rusage__bindgen_ty_14 )
                , "::" , stringify ! ( ru_nivcsw ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rusage__bindgen_ty_14 ) ) .
                __ru_nivcsw_word as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( rusage__bindgen_ty_14 )
                , "::" , stringify ! ( __ru_nivcsw_word ) ));
}
impl Clone for rusage__bindgen_ty_14 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_rusage() {
    assert_eq!(::std::mem::size_of::<rusage>() , 144usize , concat ! (
               "Size of: " , stringify ! ( rusage ) ));
    assert_eq! (::std::mem::align_of::<rusage>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( rusage ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rusage ) ) . ru_utime as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( rusage ) , "::" ,
                stringify ! ( ru_utime ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rusage ) ) . ru_stime as * const _ as
                usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( rusage ) , "::" ,
                stringify ! ( ru_stime ) ));
}
impl Clone for rusage {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn wait3(__stat_loc: *mut ::std::os::raw::c_int,
                 __options: ::std::os::raw::c_int, __usage: *mut rusage)
     -> __pid_t;
}
extern "C" {
    pub fn wait4(__pid: __pid_t, __stat_loc: *mut ::std::os::raw::c_int,
                 __options: ::std::os::raw::c_int, __usage: *mut rusage)
     -> __pid_t;
}
pub type cc_t = ::std::os::raw::c_uchar;
pub type speed_t = ::std::os::raw::c_uint;
pub type tcflag_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct termios {
    pub c_iflag: tcflag_t,
    pub c_oflag: tcflag_t,
    pub c_cflag: tcflag_t,
    pub c_lflag: tcflag_t,
    pub c_line: cc_t,
    pub c_cc: [cc_t; 32usize],
    pub c_ispeed: speed_t,
    pub c_ospeed: speed_t,
}
#[test]
fn bindgen_test_layout_termios() {
    assert_eq!(::std::mem::size_of::<termios>() , 60usize , concat ! (
               "Size of: " , stringify ! ( termios ) ));
    assert_eq! (::std::mem::align_of::<termios>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( termios ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const termios ) ) . c_iflag as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( termios ) , "::" ,
                stringify ! ( c_iflag ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const termios ) ) . c_oflag as * const _ as
                usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( termios ) , "::" ,
                stringify ! ( c_oflag ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const termios ) ) . c_cflag as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( termios ) , "::" ,
                stringify ! ( c_cflag ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const termios ) ) . c_lflag as * const _ as
                usize } , 12usize , concat ! (
                "Alignment of field: " , stringify ! ( termios ) , "::" ,
                stringify ! ( c_lflag ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const termios ) ) . c_line as * const _ as
                usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( termios ) , "::" ,
                stringify ! ( c_line ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const termios ) ) . c_cc as * const _ as usize
                } , 17usize , concat ! (
                "Alignment of field: " , stringify ! ( termios ) , "::" ,
                stringify ! ( c_cc ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const termios ) ) . c_ispeed as * const _ as
                usize } , 52usize , concat ! (
                "Alignment of field: " , stringify ! ( termios ) , "::" ,
                stringify ! ( c_ispeed ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const termios ) ) . c_ospeed as * const _ as
                usize } , 56usize , concat ! (
                "Alignment of field: " , stringify ! ( termios ) , "::" ,
                stringify ! ( c_ospeed ) ));
}
impl Clone for termios {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn cfgetospeed(__termios_p: *const termios) -> speed_t;
}
extern "C" {
    pub fn cfgetispeed(__termios_p: *const termios) -> speed_t;
}
extern "C" {
    pub fn cfsetospeed(__termios_p: *mut termios, __speed: speed_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cfsetispeed(__termios_p: *mut termios, __speed: speed_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cfsetspeed(__termios_p: *mut termios, __speed: speed_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tcgetattr(__fd: ::std::os::raw::c_int, __termios_p: *mut termios)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tcsetattr(__fd: ::std::os::raw::c_int,
                     __optional_actions: ::std::os::raw::c_int,
                     __termios_p: *const termios) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cfmakeraw(__termios_p: *mut termios);
}
extern "C" {
    pub fn tcsendbreak(__fd: ::std::os::raw::c_int,
                       __duration: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tcdrain(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tcflush(__fd: ::std::os::raw::c_int,
                   __queue_selector: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tcflow(__fd: ::std::os::raw::c_int,
                  __action: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tcgetsid(__fd: ::std::os::raw::c_int) -> __pid_t;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct winsize {
    pub ws_row: ::std::os::raw::c_ushort,
    pub ws_col: ::std::os::raw::c_ushort,
    pub ws_xpixel: ::std::os::raw::c_ushort,
    pub ws_ypixel: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout_winsize() {
    assert_eq!(::std::mem::size_of::<winsize>() , 8usize , concat ! (
               "Size of: " , stringify ! ( winsize ) ));
    assert_eq! (::std::mem::align_of::<winsize>() , 2usize , concat ! (
                "Alignment of " , stringify ! ( winsize ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const winsize ) ) . ws_row as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( winsize ) , "::" ,
                stringify ! ( ws_row ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const winsize ) ) . ws_col as * const _ as
                usize } , 2usize , concat ! (
                "Alignment of field: " , stringify ! ( winsize ) , "::" ,
                stringify ! ( ws_col ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const winsize ) ) . ws_xpixel as * const _ as
                usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( winsize ) , "::" ,
                stringify ! ( ws_xpixel ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const winsize ) ) . ws_ypixel as * const _ as
                usize } , 6usize , concat ! (
                "Alignment of field: " , stringify ! ( winsize ) , "::" ,
                stringify ! ( ws_ypixel ) ));
}
impl Clone for winsize {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct termio {
    pub c_iflag: ::std::os::raw::c_ushort,
    pub c_oflag: ::std::os::raw::c_ushort,
    pub c_cflag: ::std::os::raw::c_ushort,
    pub c_lflag: ::std::os::raw::c_ushort,
    pub c_line: ::std::os::raw::c_uchar,
    pub c_cc: [::std::os::raw::c_uchar; 8usize],
}
#[test]
fn bindgen_test_layout_termio() {
    assert_eq!(::std::mem::size_of::<termio>() , 18usize , concat ! (
               "Size of: " , stringify ! ( termio ) ));
    assert_eq! (::std::mem::align_of::<termio>() , 2usize , concat ! (
                "Alignment of " , stringify ! ( termio ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const termio ) ) . c_iflag as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( termio ) , "::" ,
                stringify ! ( c_iflag ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const termio ) ) . c_oflag as * const _ as
                usize } , 2usize , concat ! (
                "Alignment of field: " , stringify ! ( termio ) , "::" ,
                stringify ! ( c_oflag ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const termio ) ) . c_cflag as * const _ as
                usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( termio ) , "::" ,
                stringify ! ( c_cflag ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const termio ) ) . c_lflag as * const _ as
                usize } , 6usize , concat ! (
                "Alignment of field: " , stringify ! ( termio ) , "::" ,
                stringify ! ( c_lflag ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const termio ) ) . c_line as * const _ as usize
                } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( termio ) , "::" ,
                stringify ! ( c_line ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const termio ) ) . c_cc as * const _ as usize }
                , 9usize , concat ! (
                "Alignment of field: " , stringify ! ( termio ) , "::" ,
                stringify ! ( c_cc ) ));
}
impl Clone for termio {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn ioctl(__fd: ::std::os::raw::c_int,
                 __request: ::std::os::raw::c_ulong, ...)
     -> ::std::os::raw::c_int;
}
#[repr(C)]
pub struct utsname {
    pub sysname: [::std::os::raw::c_char; 65usize],
    pub nodename: [::std::os::raw::c_char; 65usize],
    pub release: [::std::os::raw::c_char; 65usize],
    pub version: [::std::os::raw::c_char; 65usize],
    pub machine: [::std::os::raw::c_char; 65usize],
    pub domainname: [::std::os::raw::c_char; 65usize],
}
#[test]
fn bindgen_test_layout_utsname() {
    assert_eq!(::std::mem::size_of::<utsname>() , 390usize , concat ! (
               "Size of: " , stringify ! ( utsname ) ));
    assert_eq! (::std::mem::align_of::<utsname>() , 1usize , concat ! (
                "Alignment of " , stringify ! ( utsname ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const utsname ) ) . sysname as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( utsname ) , "::" ,
                stringify ! ( sysname ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const utsname ) ) . nodename as * const _ as
                usize } , 65usize , concat ! (
                "Alignment of field: " , stringify ! ( utsname ) , "::" ,
                stringify ! ( nodename ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const utsname ) ) . release as * const _ as
                usize } , 130usize , concat ! (
                "Alignment of field: " , stringify ! ( utsname ) , "::" ,
                stringify ! ( release ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const utsname ) ) . version as * const _ as
                usize } , 195usize , concat ! (
                "Alignment of field: " , stringify ! ( utsname ) , "::" ,
                stringify ! ( version ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const utsname ) ) . machine as * const _ as
                usize } , 260usize , concat ! (
                "Alignment of field: " , stringify ! ( utsname ) , "::" ,
                stringify ! ( machine ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const utsname ) ) . domainname as * const _ as
                usize } , 325usize , concat ! (
                "Alignment of field: " , stringify ! ( utsname ) , "::" ,
                stringify ! ( domainname ) ));
}
extern "C" {
    pub fn uname(__name: *mut utsname) -> ::std::os::raw::c_int;
}
pub const __rlimit_resource___RLIMIT_OFILE: __rlimit_resource =
    __rlimit_resource::RLIMIT_NOFILE;
pub const __rlimit_resource___RLIM_NLIMITS: __rlimit_resource =
    __rlimit_resource::__RLIMIT_NLIMITS;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum __rlimit_resource {
    RLIMIT_CPU = 0,
    RLIMIT_FSIZE = 1,
    RLIMIT_DATA = 2,
    RLIMIT_STACK = 3,
    RLIMIT_CORE = 4,
    __RLIMIT_RSS = 5,
    RLIMIT_NOFILE = 7,
    RLIMIT_AS = 9,
    __RLIMIT_NPROC = 6,
    __RLIMIT_MEMLOCK = 8,
    __RLIMIT_LOCKS = 10,
    __RLIMIT_SIGPENDING = 11,
    __RLIMIT_MSGQUEUE = 12,
    __RLIMIT_NICE = 13,
    __RLIMIT_RTPRIO = 14,
    __RLIMIT_RTTIME = 15,
    __RLIMIT_NLIMITS = 16,
}
pub type rlim_t = __rlim_t;
pub type rlim64_t = __rlim64_t;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct rlimit {
    pub rlim_cur: rlim_t,
    pub rlim_max: rlim_t,
}
#[test]
fn bindgen_test_layout_rlimit() {
    assert_eq!(::std::mem::size_of::<rlimit>() , 16usize , concat ! (
               "Size of: " , stringify ! ( rlimit ) ));
    assert_eq! (::std::mem::align_of::<rlimit>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( rlimit ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rlimit ) ) . rlim_cur as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( rlimit ) , "::" ,
                stringify ! ( rlim_cur ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rlimit ) ) . rlim_max as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( rlimit ) , "::" ,
                stringify ! ( rlim_max ) ));
}
impl Clone for rlimit {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct rlimit64 {
    pub rlim_cur: rlim64_t,
    pub rlim_max: rlim64_t,
}
#[test]
fn bindgen_test_layout_rlimit64() {
    assert_eq!(::std::mem::size_of::<rlimit64>() , 16usize , concat ! (
               "Size of: " , stringify ! ( rlimit64 ) ));
    assert_eq! (::std::mem::align_of::<rlimit64>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( rlimit64 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rlimit64 ) ) . rlim_cur as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( rlimit64 ) , "::" ,
                stringify ! ( rlim_cur ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rlimit64 ) ) . rlim_max as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( rlimit64 ) , "::" ,
                stringify ! ( rlim_max ) ));
}
impl Clone for rlimit64 {
    fn clone(&self) -> Self { *self }
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum __rusage_who {
    RUSAGE_SELF = 0,
    RUSAGE_CHILDREN = -1,
    RUSAGE_THREAD = 1,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum __priority_which { PRIO_PROCESS = 0, PRIO_PGRP = 1, PRIO_USER = 2, }
extern "C" {
    pub fn prlimit(__pid: __pid_t, __resource: __rlimit_resource,
                   __new_limit: *const rlimit, __old_limit: *mut rlimit)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn prlimit64(__pid: __pid_t, __resource: __rlimit_resource,
                     __new_limit: *const rlimit64, __old_limit: *mut rlimit64)
     -> ::std::os::raw::c_int;
}
pub use self::__rlimit_resource as __rlimit_resource_t;
pub use self::__rusage_who as __rusage_who_t;
pub use self::__priority_which as __priority_which_t;
extern "C" {
    pub fn getrlimit(__resource: __rlimit_resource_t, __rlimits: *mut rlimit)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getrlimit64(__resource: __rlimit_resource_t,
                       __rlimits: *mut rlimit64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setrlimit(__resource: __rlimit_resource_t,
                     __rlimits: *const rlimit) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setrlimit64(__resource: __rlimit_resource_t,
                       __rlimits: *const rlimit64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getrusage(__who: __rusage_who_t, __usage: *mut rusage)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpriority(__which: __priority_which_t, __who: id_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setpriority(__which: __priority_which_t, __who: id_t,
                       __prio: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
pub type int_least8_t = ::std::os::raw::c_schar;
pub type int_least16_t = ::std::os::raw::c_short;
pub type int_least32_t = ::std::os::raw::c_int;
pub type int_least64_t = ::std::os::raw::c_long;
pub type uint_least8_t = ::std::os::raw::c_uchar;
pub type uint_least16_t = ::std::os::raw::c_ushort;
pub type uint_least32_t = ::std::os::raw::c_uint;
pub type uint_least64_t = ::std::os::raw::c_ulong;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type __s8 = ::std::os::raw::c_schar;
pub type __u8 = ::std::os::raw::c_uchar;
pub type __s16 = ::std::os::raw::c_short;
pub type __u16 = ::std::os::raw::c_ushort;
pub type __s32 = ::std::os::raw::c_int;
pub type __u32 = ::std::os::raw::c_uint;
pub type __s64 = ::std::os::raw::c_longlong;
pub type __u64 = ::std::os::raw::c_ulonglong;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __kernel_fd_set {
    pub fds_bits: [::std::os::raw::c_ulong; 16usize],
}
#[test]
fn bindgen_test_layout___kernel_fd_set() {
    assert_eq!(::std::mem::size_of::<__kernel_fd_set>() , 128usize , concat !
               ( "Size of: " , stringify ! ( __kernel_fd_set ) ));
    assert_eq! (::std::mem::align_of::<__kernel_fd_set>() , 8usize , concat !
                ( "Alignment of " , stringify ! ( __kernel_fd_set ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __kernel_fd_set ) ) . fds_bits as * const
                _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( __kernel_fd_set ) ,
                "::" , stringify ! ( fds_bits ) ));
}
impl Clone for __kernel_fd_set {
    fn clone(&self) -> Self { *self }
}
pub type __kernel_sighandler_t =
    ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>;
pub type __kernel_key_t = ::std::os::raw::c_int;
pub type __kernel_mqd_t = ::std::os::raw::c_int;
pub type __kernel_old_uid_t = ::std::os::raw::c_ushort;
pub type __kernel_old_gid_t = ::std::os::raw::c_ushort;
pub type __kernel_old_dev_t = ::std::os::raw::c_ulong;
pub type __kernel_long_t = ::std::os::raw::c_long;
pub type __kernel_ulong_t = ::std::os::raw::c_ulong;
pub type __kernel_ino_t = __kernel_ulong_t;
pub type __kernel_mode_t = ::std::os::raw::c_uint;
pub type __kernel_pid_t = ::std::os::raw::c_int;
pub type __kernel_ipc_pid_t = ::std::os::raw::c_int;
pub type __kernel_uid_t = ::std::os::raw::c_uint;
pub type __kernel_gid_t = ::std::os::raw::c_uint;
pub type __kernel_suseconds_t = __kernel_long_t;
pub type __kernel_daddr_t = ::std::os::raw::c_int;
pub type __kernel_uid32_t = ::std::os::raw::c_uint;
pub type __kernel_gid32_t = ::std::os::raw::c_uint;
pub type __kernel_size_t = __kernel_ulong_t;
pub type __kernel_ssize_t = __kernel_long_t;
pub type __kernel_ptrdiff_t = __kernel_long_t;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __kernel_fsid_t {
    pub val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___kernel_fsid_t() {
    assert_eq!(::std::mem::size_of::<__kernel_fsid_t>() , 8usize , concat ! (
               "Size of: " , stringify ! ( __kernel_fsid_t ) ));
    assert_eq! (::std::mem::align_of::<__kernel_fsid_t>() , 4usize , concat !
                ( "Alignment of " , stringify ! ( __kernel_fsid_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __kernel_fsid_t ) ) . val as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( __kernel_fsid_t ) ,
                "::" , stringify ! ( val ) ));
}
impl Clone for __kernel_fsid_t {
    fn clone(&self) -> Self { *self }
}
pub type __kernel_off_t = __kernel_long_t;
pub type __kernel_loff_t = ::std::os::raw::c_longlong;
pub type __kernel_time_t = __kernel_long_t;
pub type __kernel_clock_t = __kernel_long_t;
pub type __kernel_timer_t = ::std::os::raw::c_int;
pub type __kernel_clockid_t = ::std::os::raw::c_int;
pub type __kernel_caddr_t = *mut ::std::os::raw::c_char;
pub type __kernel_uid16_t = ::std::os::raw::c_ushort;
pub type __kernel_gid16_t = ::std::os::raw::c_ushort;
pub type __le16 = __u16;
pub type __be16 = __u16;
pub type __le32 = __u32;
pub type __be32 = __u32;
pub type __le64 = __u64;
pub type __be64 = __u64;
pub type __sum16 = __u16;
pub type __wsum = __u32;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __user_cap_header_struct {
    pub version: __u32,
    pub pid: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___user_cap_header_struct() {
    assert_eq!(::std::mem::size_of::<__user_cap_header_struct>() , 8usize ,
               concat ! (
               "Size of: " , stringify ! ( __user_cap_header_struct ) ));
    assert_eq! (::std::mem::align_of::<__user_cap_header_struct>() , 4usize ,
                concat ! (
                "Alignment of " , stringify ! ( __user_cap_header_struct ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __user_cap_header_struct ) ) . version as
                * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                __user_cap_header_struct ) , "::" , stringify ! ( version )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __user_cap_header_struct ) ) . pid as *
                const _ as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! (
                __user_cap_header_struct ) , "::" , stringify ! ( pid ) ));
}
impl Clone for __user_cap_header_struct {
    fn clone(&self) -> Self { *self }
}
pub type cap_user_header_t = *mut __user_cap_header_struct;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __user_cap_data_struct {
    pub effective: __u32,
    pub permitted: __u32,
    pub inheritable: __u32,
}
#[test]
fn bindgen_test_layout___user_cap_data_struct() {
    assert_eq!(::std::mem::size_of::<__user_cap_data_struct>() , 12usize ,
               concat ! ( "Size of: " , stringify ! ( __user_cap_data_struct )
               ));
    assert_eq! (::std::mem::align_of::<__user_cap_data_struct>() , 4usize ,
                concat ! (
                "Alignment of " , stringify ! ( __user_cap_data_struct ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __user_cap_data_struct ) ) . effective as
                * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( __user_cap_data_struct
                ) , "::" , stringify ! ( effective ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __user_cap_data_struct ) ) . permitted as
                * const _ as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( __user_cap_data_struct
                ) , "::" , stringify ! ( permitted ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __user_cap_data_struct ) ) . inheritable
                as * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( __user_cap_data_struct
                ) , "::" , stringify ! ( inheritable ) ));
}
impl Clone for __user_cap_data_struct {
    fn clone(&self) -> Self { *self }
}
pub type cap_user_data_t = *mut __user_cap_data_struct;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct vfs_cap_data {
    pub magic_etc: __le32,
    pub data: [vfs_cap_data__bindgen_ty_1; 2usize],
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct vfs_cap_data__bindgen_ty_1 {
    pub permitted: __le32,
    pub inheritable: __le32,
}
#[test]
fn bindgen_test_layout_vfs_cap_data__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<vfs_cap_data__bindgen_ty_1>() , 8usize ,
               concat ! (
               "Size of: " , stringify ! ( vfs_cap_data__bindgen_ty_1 ) ));
    assert_eq! (::std::mem::align_of::<vfs_cap_data__bindgen_ty_1>() , 4usize
                , concat ! (
                "Alignment of " , stringify ! ( vfs_cap_data__bindgen_ty_1 )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const vfs_cap_data__bindgen_ty_1 ) ) .
                permitted as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                vfs_cap_data__bindgen_ty_1 ) , "::" , stringify ! ( permitted
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const vfs_cap_data__bindgen_ty_1 ) ) .
                inheritable as * const _ as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! (
                vfs_cap_data__bindgen_ty_1 ) , "::" , stringify ! (
                inheritable ) ));
}
impl Clone for vfs_cap_data__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_vfs_cap_data() {
    assert_eq!(::std::mem::size_of::<vfs_cap_data>() , 20usize , concat ! (
               "Size of: " , stringify ! ( vfs_cap_data ) ));
    assert_eq! (::std::mem::align_of::<vfs_cap_data>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( vfs_cap_data ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const vfs_cap_data ) ) . magic_etc as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( vfs_cap_data ) , "::" ,
                stringify ! ( magic_etc ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const vfs_cap_data ) ) . data as * const _ as
                usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( vfs_cap_data ) , "::" ,
                stringify ! ( data ) ));
}
impl Clone for vfs_cap_data {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cap_struct {
    _unused: [u8; 0],
}
pub type cap_t = *mut _cap_struct;
pub type cap_value_t = ::std::os::raw::c_int;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum cap_flag_t {
    CAP_EFFECTIVE = 0,
    CAP_PERMITTED = 1,
    CAP_INHERITABLE = 2,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum cap_flag_value_t { CAP_CLEAR = 0, CAP_SET = 1, }
extern "C" {
    pub fn cap_dup(arg1: cap_t) -> cap_t;
}
extern "C" {
    pub fn cap_free(arg1: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cap_init() -> cap_t;
}
extern "C" {
    pub fn cap_get_flag(arg1: cap_t, arg2: cap_value_t, arg3: cap_flag_t,
                        arg4: *mut cap_flag_value_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cap_set_flag(arg1: cap_t, arg2: cap_flag_t,
                        arg3: ::std::os::raw::c_int, arg4: *const cap_value_t,
                        arg5: cap_flag_value_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cap_clear(arg1: cap_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cap_clear_flag(arg1: cap_t, arg2: cap_flag_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cap_get_fd(arg1: ::std::os::raw::c_int) -> cap_t;
}
extern "C" {
    pub fn cap_get_file(arg1: *const ::std::os::raw::c_char) -> cap_t;
}
extern "C" {
    pub fn cap_set_fd(arg1: ::std::os::raw::c_int, arg2: cap_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cap_set_file(arg1: *const ::std::os::raw::c_char, arg2: cap_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cap_get_proc() -> cap_t;
}
extern "C" {
    pub fn cap_get_pid(arg1: pid_t) -> cap_t;
}
extern "C" {
    pub fn cap_set_proc(arg1: cap_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cap_get_bound(arg1: cap_value_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cap_drop_bound(arg1: cap_value_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cap_size(arg1: cap_t) -> isize;
}
extern "C" {
    pub fn cap_copy_ext(arg1: *mut ::std::os::raw::c_void, arg2: cap_t,
                        arg3: isize) -> isize;
}
extern "C" {
    pub fn cap_copy_int(arg1: *const ::std::os::raw::c_void) -> cap_t;
}
extern "C" {
    pub fn cap_from_text(arg1: *const ::std::os::raw::c_char) -> cap_t;
}
extern "C" {
    pub fn cap_to_text(arg1: cap_t, arg2: *mut isize)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn cap_from_name(arg1: *const ::std::os::raw::c_char,
                         arg2: *mut cap_value_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cap_to_name(arg1: cap_value_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn cap_compare(arg1: cap_t, arg2: cap_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn capset(header: cap_user_header_t, data: cap_user_data_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn capget(header: cap_user_header_t, data: cap_user_data_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn capgetp(pid: pid_t, cap_d: cap_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn capsetp(pid: pid_t, cap_d: cap_t) -> ::std::os::raw::c_int;
}
pub type wint_t = ::std::os::raw::c_uint;
pub type mbstate_t = __mbstate_t;
extern "C" {
    pub fn wcscpy(__dest: *mut wchar_t, __src: *const wchar_t)
     -> *mut wchar_t;
}
extern "C" {
    pub fn wcsncpy(__dest: *mut wchar_t, __src: *const wchar_t, __n: usize)
     -> *mut wchar_t;
}
extern "C" {
    pub fn wcscat(__dest: *mut wchar_t, __src: *const wchar_t)
     -> *mut wchar_t;
}
extern "C" {
    pub fn wcsncat(__dest: *mut wchar_t, __src: *const wchar_t, __n: usize)
     -> *mut wchar_t;
}
extern "C" {
    pub fn wcscmp(__s1: *const wchar_t, __s2: *const wchar_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsncmp(__s1: *const wchar_t, __s2: *const wchar_t, __n: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcscasecmp(__s1: *const wchar_t, __s2: *const wchar_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsncasecmp(__s1: *const wchar_t, __s2: *const wchar_t, __n: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcscasecmp_l(__s1: *const wchar_t, __s2: *const wchar_t,
                        __loc: __locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsncasecmp_l(__s1: *const wchar_t, __s2: *const wchar_t,
                         __n: usize, __loc: __locale_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcscoll(__s1: *const wchar_t, __s2: *const wchar_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsxfrm(__s1: *mut wchar_t, __s2: *const wchar_t, __n: usize)
     -> usize;
}
extern "C" {
    pub fn wcscoll_l(__s1: *const wchar_t, __s2: *const wchar_t,
                     __loc: __locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsxfrm_l(__s1: *mut wchar_t, __s2: *const wchar_t, __n: usize,
                     __loc: __locale_t) -> usize;
}
extern "C" {
    pub fn wcsdup(__s: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcschr(__wcs: *const wchar_t, __wc: wchar_t)
     -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsrchr(__wcs: *const wchar_t, __wc: wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcschrnul(__s: *const wchar_t, __wc: wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcscspn(__wcs: *const wchar_t, __reject: *const wchar_t) -> usize;
}
extern "C" {
    pub fn wcsspn(__wcs: *const wchar_t, __accept: *const wchar_t) -> usize;
}
extern "C" {
    pub fn wcspbrk(__wcs: *const wchar_t, __accept: *const wchar_t)
     -> *mut wchar_t;
}
extern "C" {
    pub fn wcsstr(__haystack: *const wchar_t, __needle: *const wchar_t)
     -> *mut wchar_t;
}
extern "C" {
    pub fn wcstok(__s: *mut wchar_t, __delim: *const wchar_t,
                  __ptr: *mut *mut wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcslen(__s: *const wchar_t) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn wcswcs(__haystack: *const wchar_t, __needle: *const wchar_t)
     -> *mut wchar_t;
}
extern "C" {
    pub fn wcsnlen(__s: *const wchar_t, __maxlen: usize) -> usize;
}
extern "C" {
    pub fn wmemchr(__s: *const wchar_t, __c: wchar_t, __n: usize)
     -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn wmemcmp(__s1: *const wchar_t, __s2: *const wchar_t, __n: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wmemcpy(__s1: *mut wchar_t, __s2: *const wchar_t, __n: usize)
     -> *mut wchar_t;
}
extern "C" {
    pub fn wmemmove(__s1: *mut wchar_t, __s2: *const wchar_t, __n: usize)
     -> *mut wchar_t;
}
extern "C" {
    pub fn wmemset(__s: *mut wchar_t, __c: wchar_t, __n: usize)
     -> *mut wchar_t;
}
extern "C" {
    pub fn wmempcpy(__s1: *mut wchar_t, __s2: *const wchar_t, __n: usize)
     -> *mut wchar_t;
}
extern "C" {
    pub fn btowc(__c: ::std::os::raw::c_int) -> wint_t;
}
extern "C" {
    pub fn wctob(__c: wint_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbsinit(__ps: *const mbstate_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbrtowc(__pwc: *mut wchar_t, __s: *const ::std::os::raw::c_char,
                   __n: usize, __p: *mut mbstate_t) -> usize;
}
extern "C" {
    pub fn wcrtomb(__s: *mut ::std::os::raw::c_char, __wc: wchar_t,
                   __ps: *mut mbstate_t) -> usize;
}
extern "C" {
    pub fn __mbrlen(__s: *const ::std::os::raw::c_char, __n: usize,
                    __ps: *mut mbstate_t) -> usize;
}
extern "C" {
    pub fn mbrlen(__s: *const ::std::os::raw::c_char, __n: usize,
                  __ps: *mut mbstate_t) -> usize;
}
extern "C" {
    pub fn mbsrtowcs(__dst: *mut wchar_t,
                     __src: *mut *const ::std::os::raw::c_char, __len: usize,
                     __ps: *mut mbstate_t) -> usize;
}
extern "C" {
    pub fn wcsrtombs(__dst: *mut ::std::os::raw::c_char,
                     __src: *mut *const wchar_t, __len: usize,
                     __ps: *mut mbstate_t) -> usize;
}
extern "C" {
    pub fn mbsnrtowcs(__dst: *mut wchar_t,
                      __src: *mut *const ::std::os::raw::c_char, __nmc: usize,
                      __len: usize, __ps: *mut mbstate_t) -> usize;
}
extern "C" {
    pub fn wcsnrtombs(__dst: *mut ::std::os::raw::c_char,
                      __src: *mut *const wchar_t, __nwc: usize, __len: usize,
                      __ps: *mut mbstate_t) -> usize;
}
extern "C" {
    pub fn wcwidth(__c: wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcswidth(__s: *const wchar_t, __n: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcstod(__nptr: *const wchar_t, __endptr: *mut *mut wchar_t) -> f64;
}
extern "C" {
    pub fn wcstof(__nptr: *const wchar_t, __endptr: *mut *mut wchar_t) -> f32;
}
extern "C" {
    pub fn wcstold(__nptr: *const wchar_t, __endptr: *mut *mut wchar_t)
     -> f64;
}
extern "C" {
    pub fn wcstol(__nptr: *const wchar_t, __endptr: *mut *mut wchar_t,
                  __base: ::std::os::raw::c_int) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn wcstoul(__nptr: *const wchar_t, __endptr: *mut *mut wchar_t,
                   __base: ::std::os::raw::c_int) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn wcstoll(__nptr: *const wchar_t, __endptr: *mut *mut wchar_t,
                   __base: ::std::os::raw::c_int)
     -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn wcstoull(__nptr: *const wchar_t, __endptr: *mut *mut wchar_t,
                    __base: ::std::os::raw::c_int)
     -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn wcstoq(__nptr: *const wchar_t, __endptr: *mut *mut wchar_t,
                  __base: ::std::os::raw::c_int)
     -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn wcstouq(__nptr: *const wchar_t, __endptr: *mut *mut wchar_t,
                   __base: ::std::os::raw::c_int)
     -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn wcstol_l(__nptr: *const wchar_t, __endptr: *mut *mut wchar_t,
                    __base: ::std::os::raw::c_int, __loc: __locale_t)
     -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn wcstoul_l(__nptr: *const wchar_t, __endptr: *mut *mut wchar_t,
                     __base: ::std::os::raw::c_int, __loc: __locale_t)
     -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn wcstoll_l(__nptr: *const wchar_t, __endptr: *mut *mut wchar_t,
                     __base: ::std::os::raw::c_int, __loc: __locale_t)
     -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn wcstoull_l(__nptr: *const wchar_t, __endptr: *mut *mut wchar_t,
                      __base: ::std::os::raw::c_int, __loc: __locale_t)
     -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn wcstod_l(__nptr: *const wchar_t, __endptr: *mut *mut wchar_t,
                    __loc: __locale_t) -> f64;
}
extern "C" {
    pub fn wcstof_l(__nptr: *const wchar_t, __endptr: *mut *mut wchar_t,
                    __loc: __locale_t) -> f32;
}
extern "C" {
    pub fn wcstold_l(__nptr: *const wchar_t, __endptr: *mut *mut wchar_t,
                     __loc: __locale_t) -> f64;
}
extern "C" {
    pub fn wcpcpy(__dest: *mut wchar_t, __src: *const wchar_t)
     -> *mut wchar_t;
}
extern "C" {
    pub fn wcpncpy(__dest: *mut wchar_t, __src: *const wchar_t, __n: usize)
     -> *mut wchar_t;
}
extern "C" {
    pub fn open_wmemstream(__bufloc: *mut *mut wchar_t, __sizeloc: *mut usize)
     -> *mut __FILE;
}
extern "C" {
    pub fn fwide(__fp: *mut __FILE, __mode: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fwprintf(__stream: *mut __FILE, __format: *const wchar_t, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wprintf(__format: *const wchar_t, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn swprintf(__s: *mut wchar_t, __n: usize,
                    __format: *const wchar_t, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfwprintf(__s: *mut __FILE, __format: *const wchar_t,
                     __arg: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vwprintf(__format: *const wchar_t, __arg: *mut __va_list_tag)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vswprintf(__s: *mut wchar_t, __n: usize, __format: *const wchar_t,
                     __arg: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fwscanf(__stream: *mut __FILE, __format: *const wchar_t, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wscanf(__format: *const wchar_t, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn swscanf(__s: *const wchar_t, __format: *const wchar_t, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfwscanf(__s: *mut __FILE, __format: *const wchar_t,
                    __arg: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vwscanf(__format: *const wchar_t, __arg: *mut __va_list_tag)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vswscanf(__s: *const wchar_t, __format: *const wchar_t,
                    __arg: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetwc(__stream: *mut __FILE) -> wint_t;
}
extern "C" {
    pub fn getwc(__stream: *mut __FILE) -> wint_t;
}
extern "C" {
    pub fn getwchar() -> wint_t;
}
extern "C" {
    pub fn fputwc(__wc: wchar_t, __stream: *mut __FILE) -> wint_t;
}
extern "C" {
    pub fn putwc(__wc: wchar_t, __stream: *mut __FILE) -> wint_t;
}
extern "C" {
    pub fn putwchar(__wc: wchar_t) -> wint_t;
}
extern "C" {
    pub fn fgetws(__ws: *mut wchar_t, __n: ::std::os::raw::c_int,
                  __stream: *mut __FILE) -> *mut wchar_t;
}
extern "C" {
    pub fn fputws(__ws: *const wchar_t, __stream: *mut __FILE)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ungetwc(__wc: wint_t, __stream: *mut __FILE) -> wint_t;
}
extern "C" {
    pub fn getwc_unlocked(__stream: *mut __FILE) -> wint_t;
}
extern "C" {
    pub fn getwchar_unlocked() -> wint_t;
}
extern "C" {
    pub fn fgetwc_unlocked(__stream: *mut __FILE) -> wint_t;
}
extern "C" {
    pub fn fputwc_unlocked(__wc: wchar_t, __stream: *mut __FILE) -> wint_t;
}
extern "C" {
    pub fn putwc_unlocked(__wc: wchar_t, __stream: *mut __FILE) -> wint_t;
}
extern "C" {
    pub fn putwchar_unlocked(__wc: wchar_t) -> wint_t;
}
extern "C" {
    pub fn fgetws_unlocked(__ws: *mut wchar_t, __n: ::std::os::raw::c_int,
                           __stream: *mut __FILE) -> *mut wchar_t;
}
extern "C" {
    pub fn fputws_unlocked(__ws: *const wchar_t, __stream: *mut __FILE)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsftime(__s: *mut wchar_t, __maxsize: usize,
                    __format: *const wchar_t, __tp: *const tm) -> usize;
}
extern "C" {
    pub fn wcsftime_l(__s: *mut wchar_t, __maxsize: usize,
                      __format: *const wchar_t, __tp: *const tm,
                      __loc: __locale_t) -> usize;
}
pub type wctype_t = ::std::os::raw::c_ulong;
pub const __ISwupper: _bindgen_ty_17 = _bindgen_ty_17::__ISwupper;
pub const __ISwlower: _bindgen_ty_17 = _bindgen_ty_17::__ISwlower;
pub const __ISwalpha: _bindgen_ty_17 = _bindgen_ty_17::__ISwalpha;
pub const __ISwdigit: _bindgen_ty_17 = _bindgen_ty_17::__ISwdigit;
pub const __ISwxdigit: _bindgen_ty_17 = _bindgen_ty_17::__ISwxdigit;
pub const __ISwspace: _bindgen_ty_17 = _bindgen_ty_17::__ISwspace;
pub const __ISwprint: _bindgen_ty_17 = _bindgen_ty_17::__ISwprint;
pub const __ISwgraph: _bindgen_ty_17 = _bindgen_ty_17::__ISwgraph;
pub const __ISwblank: _bindgen_ty_17 = _bindgen_ty_17::__ISwblank;
pub const __ISwcntrl: _bindgen_ty_17 = _bindgen_ty_17::__ISwcntrl;
pub const __ISwpunct: _bindgen_ty_17 = _bindgen_ty_17::__ISwpunct;
pub const __ISwalnum: _bindgen_ty_17 = _bindgen_ty_17::__ISwalnum;
pub const _ISwupper: _bindgen_ty_17 = _bindgen_ty_17::_ISwupper;
pub const _ISwlower: _bindgen_ty_17 = _bindgen_ty_17::_ISwlower;
pub const _ISwalpha: _bindgen_ty_17 = _bindgen_ty_17::_ISwalpha;
pub const _ISwdigit: _bindgen_ty_17 = _bindgen_ty_17::_ISwdigit;
pub const _ISwxdigit: _bindgen_ty_17 = _bindgen_ty_17::_ISwxdigit;
pub const _ISwspace: _bindgen_ty_17 = _bindgen_ty_17::_ISwspace;
pub const _ISwprint: _bindgen_ty_17 = _bindgen_ty_17::_ISwprint;
pub const _ISwgraph: _bindgen_ty_17 = _bindgen_ty_17::_ISwgraph;
pub const _ISwblank: _bindgen_ty_17 = _bindgen_ty_17::_ISwblank;
pub const _ISwcntrl: _bindgen_ty_17 = _bindgen_ty_17::_ISwcntrl;
pub const _ISwpunct: _bindgen_ty_17 = _bindgen_ty_17::_ISwpunct;
pub const _ISwalnum: _bindgen_ty_17 = _bindgen_ty_17::_ISwalnum;
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_17 {
    __ISwupper = 0,
    __ISwlower = 1,
    __ISwalpha = 2,
    __ISwdigit = 3,
    __ISwxdigit = 4,
    __ISwspace = 5,
    __ISwprint = 6,
    __ISwgraph = 7,
    __ISwblank = 8,
    __ISwcntrl = 9,
    __ISwpunct = 10,
    __ISwalnum = 11,
    _ISwupper = 16777216,
    _ISwlower = 33554432,
    _ISwalpha = 67108864,
    _ISwdigit = 134217728,
    _ISwxdigit = 268435456,
    _ISwspace = 536870912,
    _ISwprint = 1073741824,
    _ISwgraph = -2147483648,
    _ISwblank = 65536,
    _ISwcntrl = 131072,
    _ISwpunct = 262144,
    _ISwalnum = 524288,
}
extern "C" {
    pub fn iswalnum(__wc: wint_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iswalpha(__wc: wint_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iswcntrl(__wc: wint_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iswdigit(__wc: wint_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iswgraph(__wc: wint_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iswlower(__wc: wint_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iswprint(__wc: wint_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iswpunct(__wc: wint_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iswspace(__wc: wint_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iswupper(__wc: wint_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iswxdigit(__wc: wint_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iswblank(__wc: wint_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wctype(__property: *const ::std::os::raw::c_char) -> wctype_t;
}
extern "C" {
    pub fn iswctype(__wc: wint_t, __desc: wctype_t) -> ::std::os::raw::c_int;
}
pub type wctrans_t = *const __int32_t;
extern "C" {
    pub fn towlower(__wc: wint_t) -> wint_t;
}
extern "C" {
    pub fn towupper(__wc: wint_t) -> wint_t;
}
extern "C" {
    pub fn wctrans(__property: *const ::std::os::raw::c_char) -> wctrans_t;
}
extern "C" {
    pub fn towctrans(__wc: wint_t, __desc: wctrans_t) -> wint_t;
}
extern "C" {
    pub fn iswalnum_l(__wc: wint_t, __locale: __locale_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iswalpha_l(__wc: wint_t, __locale: __locale_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iswcntrl_l(__wc: wint_t, __locale: __locale_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iswdigit_l(__wc: wint_t, __locale: __locale_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iswgraph_l(__wc: wint_t, __locale: __locale_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iswlower_l(__wc: wint_t, __locale: __locale_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iswprint_l(__wc: wint_t, __locale: __locale_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iswpunct_l(__wc: wint_t, __locale: __locale_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iswspace_l(__wc: wint_t, __locale: __locale_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iswupper_l(__wc: wint_t, __locale: __locale_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iswxdigit_l(__wc: wint_t, __locale: __locale_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iswblank_l(__wc: wint_t, __locale: __locale_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wctype_l(__property: *const ::std::os::raw::c_char,
                    __locale: __locale_t) -> wctype_t;
}
extern "C" {
    pub fn iswctype_l(__wc: wint_t, __desc: wctype_t, __locale: __locale_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn towlower_l(__wc: wint_t, __locale: __locale_t) -> wint_t;
}
extern "C" {
    pub fn towupper_l(__wc: wint_t, __locale: __locale_t) -> wint_t;
}
extern "C" {
    pub fn wctrans_l(__property: *const ::std::os::raw::c_char,
                     __locale: __locale_t) -> wctrans_t;
}
extern "C" {
    pub fn towctrans_l(__wc: wint_t, __desc: wctrans_t, __locale: __locale_t)
     -> wint_t;
}
pub type nl_catd = *mut ::std::os::raw::c_void;
pub type nl_item = ::std::os::raw::c_int;
extern "C" {
    pub fn catopen(__cat_name: *const ::std::os::raw::c_char,
                   __flag: ::std::os::raw::c_int) -> nl_catd;
}
extern "C" {
    pub fn catgets(__catalog: nl_catd, __set: ::std::os::raw::c_int,
                   __number: ::std::os::raw::c_int,
                   __string: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn catclose(__catalog: nl_catd) -> ::std::os::raw::c_int;
}
pub const ABDAY_1: _bindgen_ty_18 = _bindgen_ty_18::ABDAY_1;
pub const ABDAY_2: _bindgen_ty_18 = _bindgen_ty_18::ABDAY_2;
pub const ABDAY_3: _bindgen_ty_18 = _bindgen_ty_18::ABDAY_3;
pub const ABDAY_4: _bindgen_ty_18 = _bindgen_ty_18::ABDAY_4;
pub const ABDAY_5: _bindgen_ty_18 = _bindgen_ty_18::ABDAY_5;
pub const ABDAY_6: _bindgen_ty_18 = _bindgen_ty_18::ABDAY_6;
pub const ABDAY_7: _bindgen_ty_18 = _bindgen_ty_18::ABDAY_7;
pub const DAY_1: _bindgen_ty_18 = _bindgen_ty_18::DAY_1;
pub const DAY_2: _bindgen_ty_18 = _bindgen_ty_18::DAY_2;
pub const DAY_3: _bindgen_ty_18 = _bindgen_ty_18::DAY_3;
pub const DAY_4: _bindgen_ty_18 = _bindgen_ty_18::DAY_4;
pub const DAY_5: _bindgen_ty_18 = _bindgen_ty_18::DAY_5;
pub const DAY_6: _bindgen_ty_18 = _bindgen_ty_18::DAY_6;
pub const DAY_7: _bindgen_ty_18 = _bindgen_ty_18::DAY_7;
pub const ABMON_1: _bindgen_ty_18 = _bindgen_ty_18::ABMON_1;
pub const ABMON_2: _bindgen_ty_18 = _bindgen_ty_18::ABMON_2;
pub const ABMON_3: _bindgen_ty_18 = _bindgen_ty_18::ABMON_3;
pub const ABMON_4: _bindgen_ty_18 = _bindgen_ty_18::ABMON_4;
pub const ABMON_5: _bindgen_ty_18 = _bindgen_ty_18::ABMON_5;
pub const ABMON_6: _bindgen_ty_18 = _bindgen_ty_18::ABMON_6;
pub const ABMON_7: _bindgen_ty_18 = _bindgen_ty_18::ABMON_7;
pub const ABMON_8: _bindgen_ty_18 = _bindgen_ty_18::ABMON_8;
pub const ABMON_9: _bindgen_ty_18 = _bindgen_ty_18::ABMON_9;
pub const ABMON_10: _bindgen_ty_18 = _bindgen_ty_18::ABMON_10;
pub const ABMON_11: _bindgen_ty_18 = _bindgen_ty_18::ABMON_11;
pub const ABMON_12: _bindgen_ty_18 = _bindgen_ty_18::ABMON_12;
pub const MON_1: _bindgen_ty_18 = _bindgen_ty_18::MON_1;
pub const MON_2: _bindgen_ty_18 = _bindgen_ty_18::MON_2;
pub const MON_3: _bindgen_ty_18 = _bindgen_ty_18::MON_3;
pub const MON_4: _bindgen_ty_18 = _bindgen_ty_18::MON_4;
pub const MON_5: _bindgen_ty_18 = _bindgen_ty_18::MON_5;
pub const MON_6: _bindgen_ty_18 = _bindgen_ty_18::MON_6;
pub const MON_7: _bindgen_ty_18 = _bindgen_ty_18::MON_7;
pub const MON_8: _bindgen_ty_18 = _bindgen_ty_18::MON_8;
pub const MON_9: _bindgen_ty_18 = _bindgen_ty_18::MON_9;
pub const MON_10: _bindgen_ty_18 = _bindgen_ty_18::MON_10;
pub const MON_11: _bindgen_ty_18 = _bindgen_ty_18::MON_11;
pub const MON_12: _bindgen_ty_18 = _bindgen_ty_18::MON_12;
pub const AM_STR: _bindgen_ty_18 = _bindgen_ty_18::AM_STR;
pub const PM_STR: _bindgen_ty_18 = _bindgen_ty_18::PM_STR;
pub const D_T_FMT: _bindgen_ty_18 = _bindgen_ty_18::D_T_FMT;
pub const D_FMT: _bindgen_ty_18 = _bindgen_ty_18::D_FMT;
pub const T_FMT: _bindgen_ty_18 = _bindgen_ty_18::T_FMT;
pub const T_FMT_AMPM: _bindgen_ty_18 = _bindgen_ty_18::T_FMT_AMPM;
pub const ERA: _bindgen_ty_18 = _bindgen_ty_18::ERA;
pub const __ERA_YEAR: _bindgen_ty_18 = _bindgen_ty_18::__ERA_YEAR;
pub const ERA_D_FMT: _bindgen_ty_18 = _bindgen_ty_18::ERA_D_FMT;
pub const ALT_DIGITS: _bindgen_ty_18 = _bindgen_ty_18::ALT_DIGITS;
pub const ERA_D_T_FMT: _bindgen_ty_18 = _bindgen_ty_18::ERA_D_T_FMT;
pub const ERA_T_FMT: _bindgen_ty_18 = _bindgen_ty_18::ERA_T_FMT;
pub const _NL_TIME_ERA_NUM_ENTRIES: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_TIME_ERA_NUM_ENTRIES;
pub const _NL_TIME_ERA_ENTRIES: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_TIME_ERA_ENTRIES;
pub const _NL_WABDAY_1: _bindgen_ty_18 = _bindgen_ty_18::_NL_WABDAY_1;
pub const _NL_WABDAY_2: _bindgen_ty_18 = _bindgen_ty_18::_NL_WABDAY_2;
pub const _NL_WABDAY_3: _bindgen_ty_18 = _bindgen_ty_18::_NL_WABDAY_3;
pub const _NL_WABDAY_4: _bindgen_ty_18 = _bindgen_ty_18::_NL_WABDAY_4;
pub const _NL_WABDAY_5: _bindgen_ty_18 = _bindgen_ty_18::_NL_WABDAY_5;
pub const _NL_WABDAY_6: _bindgen_ty_18 = _bindgen_ty_18::_NL_WABDAY_6;
pub const _NL_WABDAY_7: _bindgen_ty_18 = _bindgen_ty_18::_NL_WABDAY_7;
pub const _NL_WDAY_1: _bindgen_ty_18 = _bindgen_ty_18::_NL_WDAY_1;
pub const _NL_WDAY_2: _bindgen_ty_18 = _bindgen_ty_18::_NL_WDAY_2;
pub const _NL_WDAY_3: _bindgen_ty_18 = _bindgen_ty_18::_NL_WDAY_3;
pub const _NL_WDAY_4: _bindgen_ty_18 = _bindgen_ty_18::_NL_WDAY_4;
pub const _NL_WDAY_5: _bindgen_ty_18 = _bindgen_ty_18::_NL_WDAY_5;
pub const _NL_WDAY_6: _bindgen_ty_18 = _bindgen_ty_18::_NL_WDAY_6;
pub const _NL_WDAY_7: _bindgen_ty_18 = _bindgen_ty_18::_NL_WDAY_7;
pub const _NL_WABMON_1: _bindgen_ty_18 = _bindgen_ty_18::_NL_WABMON_1;
pub const _NL_WABMON_2: _bindgen_ty_18 = _bindgen_ty_18::_NL_WABMON_2;
pub const _NL_WABMON_3: _bindgen_ty_18 = _bindgen_ty_18::_NL_WABMON_3;
pub const _NL_WABMON_4: _bindgen_ty_18 = _bindgen_ty_18::_NL_WABMON_4;
pub const _NL_WABMON_5: _bindgen_ty_18 = _bindgen_ty_18::_NL_WABMON_5;
pub const _NL_WABMON_6: _bindgen_ty_18 = _bindgen_ty_18::_NL_WABMON_6;
pub const _NL_WABMON_7: _bindgen_ty_18 = _bindgen_ty_18::_NL_WABMON_7;
pub const _NL_WABMON_8: _bindgen_ty_18 = _bindgen_ty_18::_NL_WABMON_8;
pub const _NL_WABMON_9: _bindgen_ty_18 = _bindgen_ty_18::_NL_WABMON_9;
pub const _NL_WABMON_10: _bindgen_ty_18 = _bindgen_ty_18::_NL_WABMON_10;
pub const _NL_WABMON_11: _bindgen_ty_18 = _bindgen_ty_18::_NL_WABMON_11;
pub const _NL_WABMON_12: _bindgen_ty_18 = _bindgen_ty_18::_NL_WABMON_12;
pub const _NL_WMON_1: _bindgen_ty_18 = _bindgen_ty_18::_NL_WMON_1;
pub const _NL_WMON_2: _bindgen_ty_18 = _bindgen_ty_18::_NL_WMON_2;
pub const _NL_WMON_3: _bindgen_ty_18 = _bindgen_ty_18::_NL_WMON_3;
pub const _NL_WMON_4: _bindgen_ty_18 = _bindgen_ty_18::_NL_WMON_4;
pub const _NL_WMON_5: _bindgen_ty_18 = _bindgen_ty_18::_NL_WMON_5;
pub const _NL_WMON_6: _bindgen_ty_18 = _bindgen_ty_18::_NL_WMON_6;
pub const _NL_WMON_7: _bindgen_ty_18 = _bindgen_ty_18::_NL_WMON_7;
pub const _NL_WMON_8: _bindgen_ty_18 = _bindgen_ty_18::_NL_WMON_8;
pub const _NL_WMON_9: _bindgen_ty_18 = _bindgen_ty_18::_NL_WMON_9;
pub const _NL_WMON_10: _bindgen_ty_18 = _bindgen_ty_18::_NL_WMON_10;
pub const _NL_WMON_11: _bindgen_ty_18 = _bindgen_ty_18::_NL_WMON_11;
pub const _NL_WMON_12: _bindgen_ty_18 = _bindgen_ty_18::_NL_WMON_12;
pub const _NL_WAM_STR: _bindgen_ty_18 = _bindgen_ty_18::_NL_WAM_STR;
pub const _NL_WPM_STR: _bindgen_ty_18 = _bindgen_ty_18::_NL_WPM_STR;
pub const _NL_WD_T_FMT: _bindgen_ty_18 = _bindgen_ty_18::_NL_WD_T_FMT;
pub const _NL_WD_FMT: _bindgen_ty_18 = _bindgen_ty_18::_NL_WD_FMT;
pub const _NL_WT_FMT: _bindgen_ty_18 = _bindgen_ty_18::_NL_WT_FMT;
pub const _NL_WT_FMT_AMPM: _bindgen_ty_18 = _bindgen_ty_18::_NL_WT_FMT_AMPM;
pub const _NL_WERA_YEAR: _bindgen_ty_18 = _bindgen_ty_18::_NL_WERA_YEAR;
pub const _NL_WERA_D_FMT: _bindgen_ty_18 = _bindgen_ty_18::_NL_WERA_D_FMT;
pub const _NL_WALT_DIGITS: _bindgen_ty_18 = _bindgen_ty_18::_NL_WALT_DIGITS;
pub const _NL_WERA_D_T_FMT: _bindgen_ty_18 = _bindgen_ty_18::_NL_WERA_D_T_FMT;
pub const _NL_WERA_T_FMT: _bindgen_ty_18 = _bindgen_ty_18::_NL_WERA_T_FMT;
pub const _NL_TIME_WEEK_NDAYS: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_TIME_WEEK_NDAYS;
pub const _NL_TIME_WEEK_1STDAY: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_TIME_WEEK_1STDAY;
pub const _NL_TIME_WEEK_1STWEEK: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_TIME_WEEK_1STWEEK;
pub const _NL_TIME_FIRST_WEEKDAY: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_TIME_FIRST_WEEKDAY;
pub const _NL_TIME_FIRST_WORKDAY: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_TIME_FIRST_WORKDAY;
pub const _NL_TIME_CAL_DIRECTION: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_TIME_CAL_DIRECTION;
pub const _NL_TIME_TIMEZONE: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_TIME_TIMEZONE;
pub const _DATE_FMT: _bindgen_ty_18 = _bindgen_ty_18::_DATE_FMT;
pub const _NL_W_DATE_FMT: _bindgen_ty_18 = _bindgen_ty_18::_NL_W_DATE_FMT;
pub const _NL_TIME_CODESET: _bindgen_ty_18 = _bindgen_ty_18::_NL_TIME_CODESET;
pub const _NL_NUM_LC_TIME: _bindgen_ty_18 = _bindgen_ty_18::_NL_NUM_LC_TIME;
pub const _NL_COLLATE_NRULES: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_COLLATE_NRULES;
pub const _NL_COLLATE_RULESETS: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_COLLATE_RULESETS;
pub const _NL_COLLATE_TABLEMB: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_COLLATE_TABLEMB;
pub const _NL_COLLATE_WEIGHTMB: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_COLLATE_WEIGHTMB;
pub const _NL_COLLATE_EXTRAMB: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_COLLATE_EXTRAMB;
pub const _NL_COLLATE_INDIRECTMB: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_COLLATE_INDIRECTMB;
pub const _NL_COLLATE_GAP1: _bindgen_ty_18 = _bindgen_ty_18::_NL_COLLATE_GAP1;
pub const _NL_COLLATE_GAP2: _bindgen_ty_18 = _bindgen_ty_18::_NL_COLLATE_GAP2;
pub const _NL_COLLATE_GAP3: _bindgen_ty_18 = _bindgen_ty_18::_NL_COLLATE_GAP3;
pub const _NL_COLLATE_TABLEWC: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_COLLATE_TABLEWC;
pub const _NL_COLLATE_WEIGHTWC: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_COLLATE_WEIGHTWC;
pub const _NL_COLLATE_EXTRAWC: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_COLLATE_EXTRAWC;
pub const _NL_COLLATE_INDIRECTWC: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_COLLATE_INDIRECTWC;
pub const _NL_COLLATE_SYMB_HASH_SIZEMB: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_COLLATE_SYMB_HASH_SIZEMB;
pub const _NL_COLLATE_SYMB_TABLEMB: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_COLLATE_SYMB_TABLEMB;
pub const _NL_COLLATE_SYMB_EXTRAMB: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_COLLATE_SYMB_EXTRAMB;
pub const _NL_COLLATE_COLLSEQMB: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_COLLATE_COLLSEQMB;
pub const _NL_COLLATE_COLLSEQWC: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_COLLATE_COLLSEQWC;
pub const _NL_COLLATE_CODESET: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_COLLATE_CODESET;
pub const _NL_NUM_LC_COLLATE: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_NUM_LC_COLLATE;
pub const _NL_CTYPE_CLASS: _bindgen_ty_18 = _bindgen_ty_18::_NL_CTYPE_CLASS;
pub const _NL_CTYPE_TOUPPER: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_CTYPE_TOUPPER;
pub const _NL_CTYPE_GAP1: _bindgen_ty_18 = _bindgen_ty_18::_NL_CTYPE_GAP1;
pub const _NL_CTYPE_TOLOWER: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_CTYPE_TOLOWER;
pub const _NL_CTYPE_GAP2: _bindgen_ty_18 = _bindgen_ty_18::_NL_CTYPE_GAP2;
pub const _NL_CTYPE_CLASS32: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_CTYPE_CLASS32;
pub const _NL_CTYPE_GAP3: _bindgen_ty_18 = _bindgen_ty_18::_NL_CTYPE_GAP3;
pub const _NL_CTYPE_GAP4: _bindgen_ty_18 = _bindgen_ty_18::_NL_CTYPE_GAP4;
pub const _NL_CTYPE_GAP5: _bindgen_ty_18 = _bindgen_ty_18::_NL_CTYPE_GAP5;
pub const _NL_CTYPE_GAP6: _bindgen_ty_18 = _bindgen_ty_18::_NL_CTYPE_GAP6;
pub const _NL_CTYPE_CLASS_NAMES: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_CTYPE_CLASS_NAMES;
pub const _NL_CTYPE_MAP_NAMES: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_CTYPE_MAP_NAMES;
pub const _NL_CTYPE_WIDTH: _bindgen_ty_18 = _bindgen_ty_18::_NL_CTYPE_WIDTH;
pub const _NL_CTYPE_MB_CUR_MAX: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_CTYPE_MB_CUR_MAX;
pub const _NL_CTYPE_CODESET_NAME: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_CTYPE_CODESET_NAME;
pub const CODESET: _bindgen_ty_18 = _bindgen_ty_18::_NL_CTYPE_CODESET_NAME;
pub const _NL_CTYPE_TOUPPER32: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_CTYPE_TOUPPER32;
pub const _NL_CTYPE_TOLOWER32: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_CTYPE_TOLOWER32;
pub const _NL_CTYPE_CLASS_OFFSET: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_CTYPE_CLASS_OFFSET;
pub const _NL_CTYPE_MAP_OFFSET: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_CTYPE_MAP_OFFSET;
pub const _NL_CTYPE_INDIGITS_MB_LEN: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_CTYPE_INDIGITS_MB_LEN;
pub const _NL_CTYPE_INDIGITS0_MB: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_CTYPE_INDIGITS0_MB;
pub const _NL_CTYPE_INDIGITS1_MB: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_CTYPE_INDIGITS1_MB;
pub const _NL_CTYPE_INDIGITS2_MB: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_CTYPE_INDIGITS2_MB;
pub const _NL_CTYPE_INDIGITS3_MB: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_CTYPE_INDIGITS3_MB;
pub const _NL_CTYPE_INDIGITS4_MB: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_CTYPE_INDIGITS4_MB;
pub const _NL_CTYPE_INDIGITS5_MB: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_CTYPE_INDIGITS5_MB;
pub const _NL_CTYPE_INDIGITS6_MB: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_CTYPE_INDIGITS6_MB;
pub const _NL_CTYPE_INDIGITS7_MB: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_CTYPE_INDIGITS7_MB;
pub const _NL_CTYPE_INDIGITS8_MB: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_CTYPE_INDIGITS8_MB;
pub const _NL_CTYPE_INDIGITS9_MB: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_CTYPE_INDIGITS9_MB;
pub const _NL_CTYPE_INDIGITS_WC_LEN: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_CTYPE_INDIGITS_WC_LEN;
pub const _NL_CTYPE_INDIGITS0_WC: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_CTYPE_INDIGITS0_WC;
pub const _NL_CTYPE_INDIGITS1_WC: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_CTYPE_INDIGITS1_WC;
pub const _NL_CTYPE_INDIGITS2_WC: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_CTYPE_INDIGITS2_WC;
pub const _NL_CTYPE_INDIGITS3_WC: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_CTYPE_INDIGITS3_WC;
pub const _NL_CTYPE_INDIGITS4_WC: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_CTYPE_INDIGITS4_WC;
pub const _NL_CTYPE_INDIGITS5_WC: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_CTYPE_INDIGITS5_WC;
pub const _NL_CTYPE_INDIGITS6_WC: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_CTYPE_INDIGITS6_WC;
pub const _NL_CTYPE_INDIGITS7_WC: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_CTYPE_INDIGITS7_WC;
pub const _NL_CTYPE_INDIGITS8_WC: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_CTYPE_INDIGITS8_WC;
pub const _NL_CTYPE_INDIGITS9_WC: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_CTYPE_INDIGITS9_WC;
pub const _NL_CTYPE_OUTDIGIT0_MB: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_CTYPE_OUTDIGIT0_MB;
pub const _NL_CTYPE_OUTDIGIT1_MB: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_CTYPE_OUTDIGIT1_MB;
pub const _NL_CTYPE_OUTDIGIT2_MB: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_CTYPE_OUTDIGIT2_MB;
pub const _NL_CTYPE_OUTDIGIT3_MB: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_CTYPE_OUTDIGIT3_MB;
pub const _NL_CTYPE_OUTDIGIT4_MB: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_CTYPE_OUTDIGIT4_MB;
pub const _NL_CTYPE_OUTDIGIT5_MB: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_CTYPE_OUTDIGIT5_MB;
pub const _NL_CTYPE_OUTDIGIT6_MB: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_CTYPE_OUTDIGIT6_MB;
pub const _NL_CTYPE_OUTDIGIT7_MB: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_CTYPE_OUTDIGIT7_MB;
pub const _NL_CTYPE_OUTDIGIT8_MB: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_CTYPE_OUTDIGIT8_MB;
pub const _NL_CTYPE_OUTDIGIT9_MB: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_CTYPE_OUTDIGIT9_MB;
pub const _NL_CTYPE_OUTDIGIT0_WC: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_CTYPE_OUTDIGIT0_WC;
pub const _NL_CTYPE_OUTDIGIT1_WC: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_CTYPE_OUTDIGIT1_WC;
pub const _NL_CTYPE_OUTDIGIT2_WC: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_CTYPE_OUTDIGIT2_WC;
pub const _NL_CTYPE_OUTDIGIT3_WC: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_CTYPE_OUTDIGIT3_WC;
pub const _NL_CTYPE_OUTDIGIT4_WC: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_CTYPE_OUTDIGIT4_WC;
pub const _NL_CTYPE_OUTDIGIT5_WC: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_CTYPE_OUTDIGIT5_WC;
pub const _NL_CTYPE_OUTDIGIT6_WC: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_CTYPE_OUTDIGIT6_WC;
pub const _NL_CTYPE_OUTDIGIT7_WC: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_CTYPE_OUTDIGIT7_WC;
pub const _NL_CTYPE_OUTDIGIT8_WC: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_CTYPE_OUTDIGIT8_WC;
pub const _NL_CTYPE_OUTDIGIT9_WC: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_CTYPE_OUTDIGIT9_WC;
pub const _NL_CTYPE_TRANSLIT_TAB_SIZE: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_CTYPE_TRANSLIT_TAB_SIZE;
pub const _NL_CTYPE_TRANSLIT_FROM_IDX: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_CTYPE_TRANSLIT_FROM_IDX;
pub const _NL_CTYPE_TRANSLIT_FROM_TBL: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_CTYPE_TRANSLIT_FROM_TBL;
pub const _NL_CTYPE_TRANSLIT_TO_IDX: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_CTYPE_TRANSLIT_TO_IDX;
pub const _NL_CTYPE_TRANSLIT_TO_TBL: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_CTYPE_TRANSLIT_TO_TBL;
pub const _NL_CTYPE_TRANSLIT_DEFAULT_MISSING_LEN: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_CTYPE_TRANSLIT_DEFAULT_MISSING_LEN;
pub const _NL_CTYPE_TRANSLIT_DEFAULT_MISSING: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_CTYPE_TRANSLIT_DEFAULT_MISSING;
pub const _NL_CTYPE_TRANSLIT_IGNORE_LEN: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_CTYPE_TRANSLIT_IGNORE_LEN;
pub const _NL_CTYPE_TRANSLIT_IGNORE: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_CTYPE_TRANSLIT_IGNORE;
pub const _NL_CTYPE_MAP_TO_NONASCII: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_CTYPE_MAP_TO_NONASCII;
pub const _NL_CTYPE_NONASCII_CASE: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_CTYPE_NONASCII_CASE;
pub const _NL_CTYPE_EXTRA_MAP_1: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_CTYPE_EXTRA_MAP_1;
pub const _NL_CTYPE_EXTRA_MAP_2: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_CTYPE_EXTRA_MAP_2;
pub const _NL_CTYPE_EXTRA_MAP_3: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_CTYPE_EXTRA_MAP_3;
pub const _NL_CTYPE_EXTRA_MAP_4: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_CTYPE_EXTRA_MAP_4;
pub const _NL_CTYPE_EXTRA_MAP_5: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_CTYPE_EXTRA_MAP_5;
pub const _NL_CTYPE_EXTRA_MAP_6: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_CTYPE_EXTRA_MAP_6;
pub const _NL_CTYPE_EXTRA_MAP_7: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_CTYPE_EXTRA_MAP_7;
pub const _NL_CTYPE_EXTRA_MAP_8: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_CTYPE_EXTRA_MAP_8;
pub const _NL_CTYPE_EXTRA_MAP_9: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_CTYPE_EXTRA_MAP_9;
pub const _NL_CTYPE_EXTRA_MAP_10: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_CTYPE_EXTRA_MAP_10;
pub const _NL_CTYPE_EXTRA_MAP_11: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_CTYPE_EXTRA_MAP_11;
pub const _NL_CTYPE_EXTRA_MAP_12: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_CTYPE_EXTRA_MAP_12;
pub const _NL_CTYPE_EXTRA_MAP_13: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_CTYPE_EXTRA_MAP_13;
pub const _NL_CTYPE_EXTRA_MAP_14: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_CTYPE_EXTRA_MAP_14;
pub const _NL_NUM_LC_CTYPE: _bindgen_ty_18 = _bindgen_ty_18::_NL_NUM_LC_CTYPE;
pub const __INT_CURR_SYMBOL: _bindgen_ty_18 =
    _bindgen_ty_18::__INT_CURR_SYMBOL;
pub const __CURRENCY_SYMBOL: _bindgen_ty_18 =
    _bindgen_ty_18::__CURRENCY_SYMBOL;
pub const __MON_DECIMAL_POINT: _bindgen_ty_18 =
    _bindgen_ty_18::__MON_DECIMAL_POINT;
pub const __MON_THOUSANDS_SEP: _bindgen_ty_18 =
    _bindgen_ty_18::__MON_THOUSANDS_SEP;
pub const __MON_GROUPING: _bindgen_ty_18 = _bindgen_ty_18::__MON_GROUPING;
pub const __POSITIVE_SIGN: _bindgen_ty_18 = _bindgen_ty_18::__POSITIVE_SIGN;
pub const __NEGATIVE_SIGN: _bindgen_ty_18 = _bindgen_ty_18::__NEGATIVE_SIGN;
pub const __INT_FRAC_DIGITS: _bindgen_ty_18 =
    _bindgen_ty_18::__INT_FRAC_DIGITS;
pub const __FRAC_DIGITS: _bindgen_ty_18 = _bindgen_ty_18::__FRAC_DIGITS;
pub const __P_CS_PRECEDES: _bindgen_ty_18 = _bindgen_ty_18::__P_CS_PRECEDES;
pub const __P_SEP_BY_SPACE: _bindgen_ty_18 = _bindgen_ty_18::__P_SEP_BY_SPACE;
pub const __N_CS_PRECEDES: _bindgen_ty_18 = _bindgen_ty_18::__N_CS_PRECEDES;
pub const __N_SEP_BY_SPACE: _bindgen_ty_18 = _bindgen_ty_18::__N_SEP_BY_SPACE;
pub const __P_SIGN_POSN: _bindgen_ty_18 = _bindgen_ty_18::__P_SIGN_POSN;
pub const __N_SIGN_POSN: _bindgen_ty_18 = _bindgen_ty_18::__N_SIGN_POSN;
pub const _NL_MONETARY_CRNCYSTR: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_MONETARY_CRNCYSTR;
pub const __INT_P_CS_PRECEDES: _bindgen_ty_18 =
    _bindgen_ty_18::__INT_P_CS_PRECEDES;
pub const __INT_P_SEP_BY_SPACE: _bindgen_ty_18 =
    _bindgen_ty_18::__INT_P_SEP_BY_SPACE;
pub const __INT_N_CS_PRECEDES: _bindgen_ty_18 =
    _bindgen_ty_18::__INT_N_CS_PRECEDES;
pub const __INT_N_SEP_BY_SPACE: _bindgen_ty_18 =
    _bindgen_ty_18::__INT_N_SEP_BY_SPACE;
pub const __INT_P_SIGN_POSN: _bindgen_ty_18 =
    _bindgen_ty_18::__INT_P_SIGN_POSN;
pub const __INT_N_SIGN_POSN: _bindgen_ty_18 =
    _bindgen_ty_18::__INT_N_SIGN_POSN;
pub const _NL_MONETARY_DUO_INT_CURR_SYMBOL: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_MONETARY_DUO_INT_CURR_SYMBOL;
pub const _NL_MONETARY_DUO_CURRENCY_SYMBOL: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_MONETARY_DUO_CURRENCY_SYMBOL;
pub const _NL_MONETARY_DUO_INT_FRAC_DIGITS: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_MONETARY_DUO_INT_FRAC_DIGITS;
pub const _NL_MONETARY_DUO_FRAC_DIGITS: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_MONETARY_DUO_FRAC_DIGITS;
pub const _NL_MONETARY_DUO_P_CS_PRECEDES: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_MONETARY_DUO_P_CS_PRECEDES;
pub const _NL_MONETARY_DUO_P_SEP_BY_SPACE: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_MONETARY_DUO_P_SEP_BY_SPACE;
pub const _NL_MONETARY_DUO_N_CS_PRECEDES: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_MONETARY_DUO_N_CS_PRECEDES;
pub const _NL_MONETARY_DUO_N_SEP_BY_SPACE: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_MONETARY_DUO_N_SEP_BY_SPACE;
pub const _NL_MONETARY_DUO_INT_P_CS_PRECEDES: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_MONETARY_DUO_INT_P_CS_PRECEDES;
pub const _NL_MONETARY_DUO_INT_P_SEP_BY_SPACE: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_MONETARY_DUO_INT_P_SEP_BY_SPACE;
pub const _NL_MONETARY_DUO_INT_N_CS_PRECEDES: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_MONETARY_DUO_INT_N_CS_PRECEDES;
pub const _NL_MONETARY_DUO_INT_N_SEP_BY_SPACE: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_MONETARY_DUO_INT_N_SEP_BY_SPACE;
pub const _NL_MONETARY_DUO_P_SIGN_POSN: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_MONETARY_DUO_P_SIGN_POSN;
pub const _NL_MONETARY_DUO_N_SIGN_POSN: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_MONETARY_DUO_N_SIGN_POSN;
pub const _NL_MONETARY_DUO_INT_P_SIGN_POSN: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_MONETARY_DUO_INT_P_SIGN_POSN;
pub const _NL_MONETARY_DUO_INT_N_SIGN_POSN: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_MONETARY_DUO_INT_N_SIGN_POSN;
pub const _NL_MONETARY_UNO_VALID_FROM: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_MONETARY_UNO_VALID_FROM;
pub const _NL_MONETARY_UNO_VALID_TO: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_MONETARY_UNO_VALID_TO;
pub const _NL_MONETARY_DUO_VALID_FROM: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_MONETARY_DUO_VALID_FROM;
pub const _NL_MONETARY_DUO_VALID_TO: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_MONETARY_DUO_VALID_TO;
pub const _NL_MONETARY_CONVERSION_RATE: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_MONETARY_CONVERSION_RATE;
pub const _NL_MONETARY_DECIMAL_POINT_WC: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_MONETARY_DECIMAL_POINT_WC;
pub const _NL_MONETARY_THOUSANDS_SEP_WC: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_MONETARY_THOUSANDS_SEP_WC;
pub const _NL_MONETARY_CODESET: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_MONETARY_CODESET;
pub const _NL_NUM_LC_MONETARY: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_NUM_LC_MONETARY;
pub const __DECIMAL_POINT: _bindgen_ty_18 = _bindgen_ty_18::__DECIMAL_POINT;
pub const RADIXCHAR: _bindgen_ty_18 = _bindgen_ty_18::__DECIMAL_POINT;
pub const __THOUSANDS_SEP: _bindgen_ty_18 = _bindgen_ty_18::__THOUSANDS_SEP;
pub const THOUSEP: _bindgen_ty_18 = _bindgen_ty_18::__THOUSANDS_SEP;
pub const __GROUPING: _bindgen_ty_18 = _bindgen_ty_18::__GROUPING;
pub const _NL_NUMERIC_DECIMAL_POINT_WC: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_NUMERIC_DECIMAL_POINT_WC;
pub const _NL_NUMERIC_THOUSANDS_SEP_WC: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_NUMERIC_THOUSANDS_SEP_WC;
pub const _NL_NUMERIC_CODESET: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_NUMERIC_CODESET;
pub const _NL_NUM_LC_NUMERIC: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_NUM_LC_NUMERIC;
pub const __YESEXPR: _bindgen_ty_18 = _bindgen_ty_18::__YESEXPR;
pub const __NOEXPR: _bindgen_ty_18 = _bindgen_ty_18::__NOEXPR;
pub const __YESSTR: _bindgen_ty_18 = _bindgen_ty_18::__YESSTR;
pub const __NOSTR: _bindgen_ty_18 = _bindgen_ty_18::__NOSTR;
pub const _NL_MESSAGES_CODESET: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_MESSAGES_CODESET;
pub const _NL_NUM_LC_MESSAGES: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_NUM_LC_MESSAGES;
pub const _NL_PAPER_HEIGHT: _bindgen_ty_18 = _bindgen_ty_18::_NL_PAPER_HEIGHT;
pub const _NL_PAPER_WIDTH: _bindgen_ty_18 = _bindgen_ty_18::_NL_PAPER_WIDTH;
pub const _NL_PAPER_CODESET: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_PAPER_CODESET;
pub const _NL_NUM_LC_PAPER: _bindgen_ty_18 = _bindgen_ty_18::_NL_NUM_LC_PAPER;
pub const _NL_NAME_NAME_FMT: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_NAME_NAME_FMT;
pub const _NL_NAME_NAME_GEN: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_NAME_NAME_GEN;
pub const _NL_NAME_NAME_MR: _bindgen_ty_18 = _bindgen_ty_18::_NL_NAME_NAME_MR;
pub const _NL_NAME_NAME_MRS: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_NAME_NAME_MRS;
pub const _NL_NAME_NAME_MISS: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_NAME_NAME_MISS;
pub const _NL_NAME_NAME_MS: _bindgen_ty_18 = _bindgen_ty_18::_NL_NAME_NAME_MS;
pub const _NL_NAME_CODESET: _bindgen_ty_18 = _bindgen_ty_18::_NL_NAME_CODESET;
pub const _NL_NUM_LC_NAME: _bindgen_ty_18 = _bindgen_ty_18::_NL_NUM_LC_NAME;
pub const _NL_ADDRESS_POSTAL_FMT: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_ADDRESS_POSTAL_FMT;
pub const _NL_ADDRESS_COUNTRY_NAME: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_ADDRESS_COUNTRY_NAME;
pub const _NL_ADDRESS_COUNTRY_POST: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_ADDRESS_COUNTRY_POST;
pub const _NL_ADDRESS_COUNTRY_AB2: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_ADDRESS_COUNTRY_AB2;
pub const _NL_ADDRESS_COUNTRY_AB3: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_ADDRESS_COUNTRY_AB3;
pub const _NL_ADDRESS_COUNTRY_CAR: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_ADDRESS_COUNTRY_CAR;
pub const _NL_ADDRESS_COUNTRY_NUM: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_ADDRESS_COUNTRY_NUM;
pub const _NL_ADDRESS_COUNTRY_ISBN: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_ADDRESS_COUNTRY_ISBN;
pub const _NL_ADDRESS_LANG_NAME: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_ADDRESS_LANG_NAME;
pub const _NL_ADDRESS_LANG_AB: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_ADDRESS_LANG_AB;
pub const _NL_ADDRESS_LANG_TERM: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_ADDRESS_LANG_TERM;
pub const _NL_ADDRESS_LANG_LIB: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_ADDRESS_LANG_LIB;
pub const _NL_ADDRESS_CODESET: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_ADDRESS_CODESET;
pub const _NL_NUM_LC_ADDRESS: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_NUM_LC_ADDRESS;
pub const _NL_TELEPHONE_TEL_INT_FMT: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_TELEPHONE_TEL_INT_FMT;
pub const _NL_TELEPHONE_TEL_DOM_FMT: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_TELEPHONE_TEL_DOM_FMT;
pub const _NL_TELEPHONE_INT_SELECT: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_TELEPHONE_INT_SELECT;
pub const _NL_TELEPHONE_INT_PREFIX: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_TELEPHONE_INT_PREFIX;
pub const _NL_TELEPHONE_CODESET: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_TELEPHONE_CODESET;
pub const _NL_NUM_LC_TELEPHONE: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_NUM_LC_TELEPHONE;
pub const _NL_MEASUREMENT_MEASUREMENT: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_MEASUREMENT_MEASUREMENT;
pub const _NL_MEASUREMENT_CODESET: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_MEASUREMENT_CODESET;
pub const _NL_NUM_LC_MEASUREMENT: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_NUM_LC_MEASUREMENT;
pub const _NL_IDENTIFICATION_TITLE: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_IDENTIFICATION_TITLE;
pub const _NL_IDENTIFICATION_SOURCE: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_IDENTIFICATION_SOURCE;
pub const _NL_IDENTIFICATION_ADDRESS: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_IDENTIFICATION_ADDRESS;
pub const _NL_IDENTIFICATION_CONTACT: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_IDENTIFICATION_CONTACT;
pub const _NL_IDENTIFICATION_EMAIL: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_IDENTIFICATION_EMAIL;
pub const _NL_IDENTIFICATION_TEL: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_IDENTIFICATION_TEL;
pub const _NL_IDENTIFICATION_FAX: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_IDENTIFICATION_FAX;
pub const _NL_IDENTIFICATION_LANGUAGE: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_IDENTIFICATION_LANGUAGE;
pub const _NL_IDENTIFICATION_TERRITORY: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_IDENTIFICATION_TERRITORY;
pub const _NL_IDENTIFICATION_AUDIENCE: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_IDENTIFICATION_AUDIENCE;
pub const _NL_IDENTIFICATION_APPLICATION: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_IDENTIFICATION_APPLICATION;
pub const _NL_IDENTIFICATION_ABBREVIATION: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_IDENTIFICATION_ABBREVIATION;
pub const _NL_IDENTIFICATION_REVISION: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_IDENTIFICATION_REVISION;
pub const _NL_IDENTIFICATION_DATE: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_IDENTIFICATION_DATE;
pub const _NL_IDENTIFICATION_CATEGORY: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_IDENTIFICATION_CATEGORY;
pub const _NL_IDENTIFICATION_CODESET: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_IDENTIFICATION_CODESET;
pub const _NL_NUM_LC_IDENTIFICATION: _bindgen_ty_18 =
    _bindgen_ty_18::_NL_NUM_LC_IDENTIFICATION;
pub const _NL_NUM: _bindgen_ty_18 = _bindgen_ty_18::_NL_NUM;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_18 {
    ABDAY_1 = 131072,
    ABDAY_2 = 131073,
    ABDAY_3 = 131074,
    ABDAY_4 = 131075,
    ABDAY_5 = 131076,
    ABDAY_6 = 131077,
    ABDAY_7 = 131078,
    DAY_1 = 131079,
    DAY_2 = 131080,
    DAY_3 = 131081,
    DAY_4 = 131082,
    DAY_5 = 131083,
    DAY_6 = 131084,
    DAY_7 = 131085,
    ABMON_1 = 131086,
    ABMON_2 = 131087,
    ABMON_3 = 131088,
    ABMON_4 = 131089,
    ABMON_5 = 131090,
    ABMON_6 = 131091,
    ABMON_7 = 131092,
    ABMON_8 = 131093,
    ABMON_9 = 131094,
    ABMON_10 = 131095,
    ABMON_11 = 131096,
    ABMON_12 = 131097,
    MON_1 = 131098,
    MON_2 = 131099,
    MON_3 = 131100,
    MON_4 = 131101,
    MON_5 = 131102,
    MON_6 = 131103,
    MON_7 = 131104,
    MON_8 = 131105,
    MON_9 = 131106,
    MON_10 = 131107,
    MON_11 = 131108,
    MON_12 = 131109,
    AM_STR = 131110,
    PM_STR = 131111,
    D_T_FMT = 131112,
    D_FMT = 131113,
    T_FMT = 131114,
    T_FMT_AMPM = 131115,
    ERA = 131116,
    __ERA_YEAR = 131117,
    ERA_D_FMT = 131118,
    ALT_DIGITS = 131119,
    ERA_D_T_FMT = 131120,
    ERA_T_FMT = 131121,
    _NL_TIME_ERA_NUM_ENTRIES = 131122,
    _NL_TIME_ERA_ENTRIES = 131123,
    _NL_WABDAY_1 = 131124,
    _NL_WABDAY_2 = 131125,
    _NL_WABDAY_3 = 131126,
    _NL_WABDAY_4 = 131127,
    _NL_WABDAY_5 = 131128,
    _NL_WABDAY_6 = 131129,
    _NL_WABDAY_7 = 131130,
    _NL_WDAY_1 = 131131,
    _NL_WDAY_2 = 131132,
    _NL_WDAY_3 = 131133,
    _NL_WDAY_4 = 131134,
    _NL_WDAY_5 = 131135,
    _NL_WDAY_6 = 131136,
    _NL_WDAY_7 = 131137,
    _NL_WABMON_1 = 131138,
    _NL_WABMON_2 = 131139,
    _NL_WABMON_3 = 131140,
    _NL_WABMON_4 = 131141,
    _NL_WABMON_5 = 131142,
    _NL_WABMON_6 = 131143,
    _NL_WABMON_7 = 131144,
    _NL_WABMON_8 = 131145,
    _NL_WABMON_9 = 131146,
    _NL_WABMON_10 = 131147,
    _NL_WABMON_11 = 131148,
    _NL_WABMON_12 = 131149,
    _NL_WMON_1 = 131150,
    _NL_WMON_2 = 131151,
    _NL_WMON_3 = 131152,
    _NL_WMON_4 = 131153,
    _NL_WMON_5 = 131154,
    _NL_WMON_6 = 131155,
    _NL_WMON_7 = 131156,
    _NL_WMON_8 = 131157,
    _NL_WMON_9 = 131158,
    _NL_WMON_10 = 131159,
    _NL_WMON_11 = 131160,
    _NL_WMON_12 = 131161,
    _NL_WAM_STR = 131162,
    _NL_WPM_STR = 131163,
    _NL_WD_T_FMT = 131164,
    _NL_WD_FMT = 131165,
    _NL_WT_FMT = 131166,
    _NL_WT_FMT_AMPM = 131167,
    _NL_WERA_YEAR = 131168,
    _NL_WERA_D_FMT = 131169,
    _NL_WALT_DIGITS = 131170,
    _NL_WERA_D_T_FMT = 131171,
    _NL_WERA_T_FMT = 131172,
    _NL_TIME_WEEK_NDAYS = 131173,
    _NL_TIME_WEEK_1STDAY = 131174,
    _NL_TIME_WEEK_1STWEEK = 131175,
    _NL_TIME_FIRST_WEEKDAY = 131176,
    _NL_TIME_FIRST_WORKDAY = 131177,
    _NL_TIME_CAL_DIRECTION = 131178,
    _NL_TIME_TIMEZONE = 131179,
    _DATE_FMT = 131180,
    _NL_W_DATE_FMT = 131181,
    _NL_TIME_CODESET = 131182,
    _NL_NUM_LC_TIME = 131183,
    _NL_COLLATE_NRULES = 196608,
    _NL_COLLATE_RULESETS = 196609,
    _NL_COLLATE_TABLEMB = 196610,
    _NL_COLLATE_WEIGHTMB = 196611,
    _NL_COLLATE_EXTRAMB = 196612,
    _NL_COLLATE_INDIRECTMB = 196613,
    _NL_COLLATE_GAP1 = 196614,
    _NL_COLLATE_GAP2 = 196615,
    _NL_COLLATE_GAP3 = 196616,
    _NL_COLLATE_TABLEWC = 196617,
    _NL_COLLATE_WEIGHTWC = 196618,
    _NL_COLLATE_EXTRAWC = 196619,
    _NL_COLLATE_INDIRECTWC = 196620,
    _NL_COLLATE_SYMB_HASH_SIZEMB = 196621,
    _NL_COLLATE_SYMB_TABLEMB = 196622,
    _NL_COLLATE_SYMB_EXTRAMB = 196623,
    _NL_COLLATE_COLLSEQMB = 196624,
    _NL_COLLATE_COLLSEQWC = 196625,
    _NL_COLLATE_CODESET = 196626,
    _NL_NUM_LC_COLLATE = 196627,
    _NL_CTYPE_CLASS = 0,
    _NL_CTYPE_TOUPPER = 1,
    _NL_CTYPE_GAP1 = 2,
    _NL_CTYPE_TOLOWER = 3,
    _NL_CTYPE_GAP2 = 4,
    _NL_CTYPE_CLASS32 = 5,
    _NL_CTYPE_GAP3 = 6,
    _NL_CTYPE_GAP4 = 7,
    _NL_CTYPE_GAP5 = 8,
    _NL_CTYPE_GAP6 = 9,
    _NL_CTYPE_CLASS_NAMES = 10,
    _NL_CTYPE_MAP_NAMES = 11,
    _NL_CTYPE_WIDTH = 12,
    _NL_CTYPE_MB_CUR_MAX = 13,
    _NL_CTYPE_CODESET_NAME = 14,
    _NL_CTYPE_TOUPPER32 = 15,
    _NL_CTYPE_TOLOWER32 = 16,
    _NL_CTYPE_CLASS_OFFSET = 17,
    _NL_CTYPE_MAP_OFFSET = 18,
    _NL_CTYPE_INDIGITS_MB_LEN = 19,
    _NL_CTYPE_INDIGITS0_MB = 20,
    _NL_CTYPE_INDIGITS1_MB = 21,
    _NL_CTYPE_INDIGITS2_MB = 22,
    _NL_CTYPE_INDIGITS3_MB = 23,
    _NL_CTYPE_INDIGITS4_MB = 24,
    _NL_CTYPE_INDIGITS5_MB = 25,
    _NL_CTYPE_INDIGITS6_MB = 26,
    _NL_CTYPE_INDIGITS7_MB = 27,
    _NL_CTYPE_INDIGITS8_MB = 28,
    _NL_CTYPE_INDIGITS9_MB = 29,
    _NL_CTYPE_INDIGITS_WC_LEN = 30,
    _NL_CTYPE_INDIGITS0_WC = 31,
    _NL_CTYPE_INDIGITS1_WC = 32,
    _NL_CTYPE_INDIGITS2_WC = 33,
    _NL_CTYPE_INDIGITS3_WC = 34,
    _NL_CTYPE_INDIGITS4_WC = 35,
    _NL_CTYPE_INDIGITS5_WC = 36,
    _NL_CTYPE_INDIGITS6_WC = 37,
    _NL_CTYPE_INDIGITS7_WC = 38,
    _NL_CTYPE_INDIGITS8_WC = 39,
    _NL_CTYPE_INDIGITS9_WC = 40,
    _NL_CTYPE_OUTDIGIT0_MB = 41,
    _NL_CTYPE_OUTDIGIT1_MB = 42,
    _NL_CTYPE_OUTDIGIT2_MB = 43,
    _NL_CTYPE_OUTDIGIT3_MB = 44,
    _NL_CTYPE_OUTDIGIT4_MB = 45,
    _NL_CTYPE_OUTDIGIT5_MB = 46,
    _NL_CTYPE_OUTDIGIT6_MB = 47,
    _NL_CTYPE_OUTDIGIT7_MB = 48,
    _NL_CTYPE_OUTDIGIT8_MB = 49,
    _NL_CTYPE_OUTDIGIT9_MB = 50,
    _NL_CTYPE_OUTDIGIT0_WC = 51,
    _NL_CTYPE_OUTDIGIT1_WC = 52,
    _NL_CTYPE_OUTDIGIT2_WC = 53,
    _NL_CTYPE_OUTDIGIT3_WC = 54,
    _NL_CTYPE_OUTDIGIT4_WC = 55,
    _NL_CTYPE_OUTDIGIT5_WC = 56,
    _NL_CTYPE_OUTDIGIT6_WC = 57,
    _NL_CTYPE_OUTDIGIT7_WC = 58,
    _NL_CTYPE_OUTDIGIT8_WC = 59,
    _NL_CTYPE_OUTDIGIT9_WC = 60,
    _NL_CTYPE_TRANSLIT_TAB_SIZE = 61,
    _NL_CTYPE_TRANSLIT_FROM_IDX = 62,
    _NL_CTYPE_TRANSLIT_FROM_TBL = 63,
    _NL_CTYPE_TRANSLIT_TO_IDX = 64,
    _NL_CTYPE_TRANSLIT_TO_TBL = 65,
    _NL_CTYPE_TRANSLIT_DEFAULT_MISSING_LEN = 66,
    _NL_CTYPE_TRANSLIT_DEFAULT_MISSING = 67,
    _NL_CTYPE_TRANSLIT_IGNORE_LEN = 68,
    _NL_CTYPE_TRANSLIT_IGNORE = 69,
    _NL_CTYPE_MAP_TO_NONASCII = 70,
    _NL_CTYPE_NONASCII_CASE = 71,
    _NL_CTYPE_EXTRA_MAP_1 = 72,
    _NL_CTYPE_EXTRA_MAP_2 = 73,
    _NL_CTYPE_EXTRA_MAP_3 = 74,
    _NL_CTYPE_EXTRA_MAP_4 = 75,
    _NL_CTYPE_EXTRA_MAP_5 = 76,
    _NL_CTYPE_EXTRA_MAP_6 = 77,
    _NL_CTYPE_EXTRA_MAP_7 = 78,
    _NL_CTYPE_EXTRA_MAP_8 = 79,
    _NL_CTYPE_EXTRA_MAP_9 = 80,
    _NL_CTYPE_EXTRA_MAP_10 = 81,
    _NL_CTYPE_EXTRA_MAP_11 = 82,
    _NL_CTYPE_EXTRA_MAP_12 = 83,
    _NL_CTYPE_EXTRA_MAP_13 = 84,
    _NL_CTYPE_EXTRA_MAP_14 = 85,
    _NL_NUM_LC_CTYPE = 86,
    __INT_CURR_SYMBOL = 262144,
    __CURRENCY_SYMBOL = 262145,
    __MON_DECIMAL_POINT = 262146,
    __MON_THOUSANDS_SEP = 262147,
    __MON_GROUPING = 262148,
    __POSITIVE_SIGN = 262149,
    __NEGATIVE_SIGN = 262150,
    __INT_FRAC_DIGITS = 262151,
    __FRAC_DIGITS = 262152,
    __P_CS_PRECEDES = 262153,
    __P_SEP_BY_SPACE = 262154,
    __N_CS_PRECEDES = 262155,
    __N_SEP_BY_SPACE = 262156,
    __P_SIGN_POSN = 262157,
    __N_SIGN_POSN = 262158,
    _NL_MONETARY_CRNCYSTR = 262159,
    __INT_P_CS_PRECEDES = 262160,
    __INT_P_SEP_BY_SPACE = 262161,
    __INT_N_CS_PRECEDES = 262162,
    __INT_N_SEP_BY_SPACE = 262163,
    __INT_P_SIGN_POSN = 262164,
    __INT_N_SIGN_POSN = 262165,
    _NL_MONETARY_DUO_INT_CURR_SYMBOL = 262166,
    _NL_MONETARY_DUO_CURRENCY_SYMBOL = 262167,
    _NL_MONETARY_DUO_INT_FRAC_DIGITS = 262168,
    _NL_MONETARY_DUO_FRAC_DIGITS = 262169,
    _NL_MONETARY_DUO_P_CS_PRECEDES = 262170,
    _NL_MONETARY_DUO_P_SEP_BY_SPACE = 262171,
    _NL_MONETARY_DUO_N_CS_PRECEDES = 262172,
    _NL_MONETARY_DUO_N_SEP_BY_SPACE = 262173,
    _NL_MONETARY_DUO_INT_P_CS_PRECEDES = 262174,
    _NL_MONETARY_DUO_INT_P_SEP_BY_SPACE = 262175,
    _NL_MONETARY_DUO_INT_N_CS_PRECEDES = 262176,
    _NL_MONETARY_DUO_INT_N_SEP_BY_SPACE = 262177,
    _NL_MONETARY_DUO_P_SIGN_POSN = 262178,
    _NL_MONETARY_DUO_N_SIGN_POSN = 262179,
    _NL_MONETARY_DUO_INT_P_SIGN_POSN = 262180,
    _NL_MONETARY_DUO_INT_N_SIGN_POSN = 262181,
    _NL_MONETARY_UNO_VALID_FROM = 262182,
    _NL_MONETARY_UNO_VALID_TO = 262183,
    _NL_MONETARY_DUO_VALID_FROM = 262184,
    _NL_MONETARY_DUO_VALID_TO = 262185,
    _NL_MONETARY_CONVERSION_RATE = 262186,
    _NL_MONETARY_DECIMAL_POINT_WC = 262187,
    _NL_MONETARY_THOUSANDS_SEP_WC = 262188,
    _NL_MONETARY_CODESET = 262189,
    _NL_NUM_LC_MONETARY = 262190,
    __DECIMAL_POINT = 65536,
    __THOUSANDS_SEP = 65537,
    __GROUPING = 65538,
    _NL_NUMERIC_DECIMAL_POINT_WC = 65539,
    _NL_NUMERIC_THOUSANDS_SEP_WC = 65540,
    _NL_NUMERIC_CODESET = 65541,
    _NL_NUM_LC_NUMERIC = 65542,
    __YESEXPR = 327680,
    __NOEXPR = 327681,
    __YESSTR = 327682,
    __NOSTR = 327683,
    _NL_MESSAGES_CODESET = 327684,
    _NL_NUM_LC_MESSAGES = 327685,
    _NL_PAPER_HEIGHT = 458752,
    _NL_PAPER_WIDTH = 458753,
    _NL_PAPER_CODESET = 458754,
    _NL_NUM_LC_PAPER = 458755,
    _NL_NAME_NAME_FMT = 524288,
    _NL_NAME_NAME_GEN = 524289,
    _NL_NAME_NAME_MR = 524290,
    _NL_NAME_NAME_MRS = 524291,
    _NL_NAME_NAME_MISS = 524292,
    _NL_NAME_NAME_MS = 524293,
    _NL_NAME_CODESET = 524294,
    _NL_NUM_LC_NAME = 524295,
    _NL_ADDRESS_POSTAL_FMT = 589824,
    _NL_ADDRESS_COUNTRY_NAME = 589825,
    _NL_ADDRESS_COUNTRY_POST = 589826,
    _NL_ADDRESS_COUNTRY_AB2 = 589827,
    _NL_ADDRESS_COUNTRY_AB3 = 589828,
    _NL_ADDRESS_COUNTRY_CAR = 589829,
    _NL_ADDRESS_COUNTRY_NUM = 589830,
    _NL_ADDRESS_COUNTRY_ISBN = 589831,
    _NL_ADDRESS_LANG_NAME = 589832,
    _NL_ADDRESS_LANG_AB = 589833,
    _NL_ADDRESS_LANG_TERM = 589834,
    _NL_ADDRESS_LANG_LIB = 589835,
    _NL_ADDRESS_CODESET = 589836,
    _NL_NUM_LC_ADDRESS = 589837,
    _NL_TELEPHONE_TEL_INT_FMT = 655360,
    _NL_TELEPHONE_TEL_DOM_FMT = 655361,
    _NL_TELEPHONE_INT_SELECT = 655362,
    _NL_TELEPHONE_INT_PREFIX = 655363,
    _NL_TELEPHONE_CODESET = 655364,
    _NL_NUM_LC_TELEPHONE = 655365,
    _NL_MEASUREMENT_MEASUREMENT = 720896,
    _NL_MEASUREMENT_CODESET = 720897,
    _NL_NUM_LC_MEASUREMENT = 720898,
    _NL_IDENTIFICATION_TITLE = 786432,
    _NL_IDENTIFICATION_SOURCE = 786433,
    _NL_IDENTIFICATION_ADDRESS = 786434,
    _NL_IDENTIFICATION_CONTACT = 786435,
    _NL_IDENTIFICATION_EMAIL = 786436,
    _NL_IDENTIFICATION_TEL = 786437,
    _NL_IDENTIFICATION_FAX = 786438,
    _NL_IDENTIFICATION_LANGUAGE = 786439,
    _NL_IDENTIFICATION_TERRITORY = 786440,
    _NL_IDENTIFICATION_AUDIENCE = 786441,
    _NL_IDENTIFICATION_APPLICATION = 786442,
    _NL_IDENTIFICATION_ABBREVIATION = 786443,
    _NL_IDENTIFICATION_REVISION = 786444,
    _NL_IDENTIFICATION_DATE = 786445,
    _NL_IDENTIFICATION_CATEGORY = 786446,
    _NL_IDENTIFICATION_CODESET = 786447,
    _NL_NUM_LC_IDENTIFICATION = 786448,
    _NL_NUM = 786449,
}
extern "C" {
    pub fn nl_langinfo(__item: nl_item) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn nl_langinfo_l(__item: nl_item, __l: __locale_t)
     -> *mut ::std::os::raw::c_char;
}
pub type iconv_t = *mut ::std::os::raw::c_void;
extern "C" {
    pub fn iconv_open(__tocode: *const ::std::os::raw::c_char,
                      __fromcode: *const ::std::os::raw::c_char) -> iconv_t;
}
extern "C" {
    pub fn iconv(__cd: iconv_t, __inbuf: *mut *mut ::std::os::raw::c_char,
                 __inbytesleft: *mut usize,
                 __outbuf: *mut *mut ::std::os::raw::c_char,
                 __outbytesleft: *mut usize) -> usize;
}
extern "C" {
    pub fn iconv_close(__cd: iconv_t) -> ::std::os::raw::c_int;
}
pub type chtype = ::std::os::raw::c_uint;
pub type mmask_t = ::std::os::raw::c_uint;
pub type NCURSES_BOOL = ::std::os::raw::c_uchar;
extern "C" {
    #[link_name = "acs_map"]
    pub static mut acs_map: [chtype; 0usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct screen {
    _unused: [u8; 0],
}
pub type SCREEN = screen;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _win_st {
    pub _cury: ::std::os::raw::c_short,
    pub _curx: ::std::os::raw::c_short,
    pub _maxy: ::std::os::raw::c_short,
    pub _maxx: ::std::os::raw::c_short,
    pub _begy: ::std::os::raw::c_short,
    pub _begx: ::std::os::raw::c_short,
    pub _flags: ::std::os::raw::c_short,
    pub _attrs: attr_t,
    pub _bkgd: chtype,
    pub _notimeout: bool,
    pub _clear: bool,
    pub _leaveok: bool,
    pub _scroll: bool,
    pub _idlok: bool,
    pub _idcok: bool,
    pub _immed: bool,
    pub _sync: bool,
    pub _use_keypad: bool,
    pub _delay: ::std::os::raw::c_int,
    pub _line: *mut ldat,
    pub _regtop: ::std::os::raw::c_short,
    pub _regbottom: ::std::os::raw::c_short,
    pub _parx: ::std::os::raw::c_int,
    pub _pary: ::std::os::raw::c_int,
    pub _parent: *mut WINDOW,
    pub _pad: _win_st_pdat,
    pub _yoffset: ::std::os::raw::c_short,
    pub _bkgrnd: cchar_t,
    pub _color: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _win_st_pdat {
    pub _pad_y: ::std::os::raw::c_short,
    pub _pad_x: ::std::os::raw::c_short,
    pub _pad_top: ::std::os::raw::c_short,
    pub _pad_left: ::std::os::raw::c_short,
    pub _pad_bottom: ::std::os::raw::c_short,
    pub _pad_right: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout__win_st_pdat() {
    assert_eq!(::std::mem::size_of::<_win_st_pdat>() , 12usize , concat ! (
               "Size of: " , stringify ! ( _win_st_pdat ) ));
    assert_eq! (::std::mem::align_of::<_win_st_pdat>() , 2usize , concat ! (
                "Alignment of " , stringify ! ( _win_st_pdat ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _win_st_pdat ) ) . _pad_y as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( _win_st_pdat ) , "::" ,
                stringify ! ( _pad_y ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _win_st_pdat ) ) . _pad_x as * const _ as
                usize } , 2usize , concat ! (
                "Alignment of field: " , stringify ! ( _win_st_pdat ) , "::" ,
                stringify ! ( _pad_x ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _win_st_pdat ) ) . _pad_top as * const _
                as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( _win_st_pdat ) , "::" ,
                stringify ! ( _pad_top ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _win_st_pdat ) ) . _pad_left as * const _
                as usize } , 6usize , concat ! (
                "Alignment of field: " , stringify ! ( _win_st_pdat ) , "::" ,
                stringify ! ( _pad_left ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _win_st_pdat ) ) . _pad_bottom as * const
                _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( _win_st_pdat ) , "::" ,
                stringify ! ( _pad_bottom ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _win_st_pdat ) ) . _pad_right as * const
                _ as usize } , 10usize , concat ! (
                "Alignment of field: " , stringify ! ( _win_st_pdat ) , "::" ,
                stringify ! ( _pad_right ) ));
}
impl Clone for _win_st_pdat {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout__win_st() {
    assert_eq!(::std::mem::size_of::<_win_st>() , 120usize , concat ! (
               "Size of: " , stringify ! ( _win_st ) ));
    assert_eq! (::std::mem::align_of::<_win_st>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( _win_st ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _win_st ) ) . _cury as * const _ as usize
                } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( _win_st ) , "::" ,
                stringify ! ( _cury ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _win_st ) ) . _curx as * const _ as usize
                } , 2usize , concat ! (
                "Alignment of field: " , stringify ! ( _win_st ) , "::" ,
                stringify ! ( _curx ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _win_st ) ) . _maxy as * const _ as usize
                } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( _win_st ) , "::" ,
                stringify ! ( _maxy ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _win_st ) ) . _maxx as * const _ as usize
                } , 6usize , concat ! (
                "Alignment of field: " , stringify ! ( _win_st ) , "::" ,
                stringify ! ( _maxx ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _win_st ) ) . _begy as * const _ as usize
                } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( _win_st ) , "::" ,
                stringify ! ( _begy ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _win_st ) ) . _begx as * const _ as usize
                } , 10usize , concat ! (
                "Alignment of field: " , stringify ! ( _win_st ) , "::" ,
                stringify ! ( _begx ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _win_st ) ) . _flags as * const _ as
                usize } , 12usize , concat ! (
                "Alignment of field: " , stringify ! ( _win_st ) , "::" ,
                stringify ! ( _flags ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _win_st ) ) . _attrs as * const _ as
                usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( _win_st ) , "::" ,
                stringify ! ( _attrs ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _win_st ) ) . _bkgd as * const _ as usize
                } , 20usize , concat ! (
                "Alignment of field: " , stringify ! ( _win_st ) , "::" ,
                stringify ! ( _bkgd ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _win_st ) ) . _notimeout as * const _ as
                usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( _win_st ) , "::" ,
                stringify ! ( _notimeout ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _win_st ) ) . _clear as * const _ as
                usize } , 25usize , concat ! (
                "Alignment of field: " , stringify ! ( _win_st ) , "::" ,
                stringify ! ( _clear ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _win_st ) ) . _leaveok as * const _ as
                usize } , 26usize , concat ! (
                "Alignment of field: " , stringify ! ( _win_st ) , "::" ,
                stringify ! ( _leaveok ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _win_st ) ) . _scroll as * const _ as
                usize } , 27usize , concat ! (
                "Alignment of field: " , stringify ! ( _win_st ) , "::" ,
                stringify ! ( _scroll ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _win_st ) ) . _idlok as * const _ as
                usize } , 28usize , concat ! (
                "Alignment of field: " , stringify ! ( _win_st ) , "::" ,
                stringify ! ( _idlok ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _win_st ) ) . _idcok as * const _ as
                usize } , 29usize , concat ! (
                "Alignment of field: " , stringify ! ( _win_st ) , "::" ,
                stringify ! ( _idcok ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _win_st ) ) . _immed as * const _ as
                usize } , 30usize , concat ! (
                "Alignment of field: " , stringify ! ( _win_st ) , "::" ,
                stringify ! ( _immed ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _win_st ) ) . _sync as * const _ as usize
                } , 31usize , concat ! (
                "Alignment of field: " , stringify ! ( _win_st ) , "::" ,
                stringify ! ( _sync ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _win_st ) ) . _use_keypad as * const _ as
                usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( _win_st ) , "::" ,
                stringify ! ( _use_keypad ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _win_st ) ) . _delay as * const _ as
                usize } , 36usize , concat ! (
                "Alignment of field: " , stringify ! ( _win_st ) , "::" ,
                stringify ! ( _delay ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _win_st ) ) . _line as * const _ as usize
                } , 40usize , concat ! (
                "Alignment of field: " , stringify ! ( _win_st ) , "::" ,
                stringify ! ( _line ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _win_st ) ) . _regtop as * const _ as
                usize } , 48usize , concat ! (
                "Alignment of field: " , stringify ! ( _win_st ) , "::" ,
                stringify ! ( _regtop ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _win_st ) ) . _regbottom as * const _ as
                usize } , 50usize , concat ! (
                "Alignment of field: " , stringify ! ( _win_st ) , "::" ,
                stringify ! ( _regbottom ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _win_st ) ) . _parx as * const _ as usize
                } , 52usize , concat ! (
                "Alignment of field: " , stringify ! ( _win_st ) , "::" ,
                stringify ! ( _parx ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _win_st ) ) . _pary as * const _ as usize
                } , 56usize , concat ! (
                "Alignment of field: " , stringify ! ( _win_st ) , "::" ,
                stringify ! ( _pary ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _win_st ) ) . _parent as * const _ as
                usize } , 64usize , concat ! (
                "Alignment of field: " , stringify ! ( _win_st ) , "::" ,
                stringify ! ( _parent ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _win_st ) ) . _pad as * const _ as usize
                } , 72usize , concat ! (
                "Alignment of field: " , stringify ! ( _win_st ) , "::" ,
                stringify ! ( _pad ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _win_st ) ) . _yoffset as * const _ as
                usize } , 84usize , concat ! (
                "Alignment of field: " , stringify ! ( _win_st ) , "::" ,
                stringify ! ( _yoffset ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _win_st ) ) . _bkgrnd as * const _ as
                usize } , 88usize , concat ! (
                "Alignment of field: " , stringify ! ( _win_st ) , "::" ,
                stringify ! ( _bkgrnd ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _win_st ) ) . _color as * const _ as
                usize } , 116usize , concat ! (
                "Alignment of field: " , stringify ! ( _win_st ) , "::" ,
                stringify ! ( _color ) ));
}
impl Clone for _win_st {
    fn clone(&self) -> Self { *self }
}
pub type WINDOW = _win_st;
pub type attr_t = chtype;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct cchar_t {
    pub attr: attr_t,
    pub chars: [wchar_t; 5usize],
    pub ext_color: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_cchar_t() {
    assert_eq!(::std::mem::size_of::<cchar_t>() , 28usize , concat ! (
               "Size of: " , stringify ! ( cchar_t ) ));
    assert_eq! (::std::mem::align_of::<cchar_t>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( cchar_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const cchar_t ) ) . attr as * const _ as usize
                } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( cchar_t ) , "::" ,
                stringify ! ( attr ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const cchar_t ) ) . chars as * const _ as usize
                } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( cchar_t ) , "::" ,
                stringify ! ( chars ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const cchar_t ) ) . ext_color as * const _ as
                usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( cchar_t ) , "::" ,
                stringify ! ( ext_color ) ));
}
impl Clone for cchar_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ldat {
    _unused: [u8; 0],
}
pub type NCURSES_OUTC =
    ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)
                              -> ::std::os::raw::c_int>;
extern "C" {
    pub fn addch(arg1: chtype) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn addchnstr(arg1: *const chtype, arg2: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn addchstr(arg1: *const chtype) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn addnstr(arg1: *const ::std::os::raw::c_char,
                   arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn addstr(arg1: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn attroff(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn attron(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn attrset(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn attr_get(arg1: *mut attr_t, arg2: *mut ::std::os::raw::c_short,
                    arg3: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn attr_off(arg1: attr_t, arg2: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn attr_on(arg1: attr_t, arg2: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn attr_set(arg1: attr_t, arg2: ::std::os::raw::c_short,
                    arg3: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn baudrate() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn beep() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bkgd(arg1: chtype) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bkgdset(arg1: chtype);
}
extern "C" {
    pub fn border(arg1: chtype, arg2: chtype, arg3: chtype, arg4: chtype,
                  arg5: chtype, arg6: chtype, arg7: chtype, arg8: chtype)
     -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "box"]
    pub fn box_(arg1: *mut WINDOW, arg2: chtype, arg3: chtype)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn can_change_color() -> bool;
}
extern "C" {
    pub fn cbreak() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chgat(arg1: ::std::os::raw::c_int, arg2: attr_t,
                 arg3: ::std::os::raw::c_short,
                 arg4: *const ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clear() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearok(arg1: *mut WINDOW, arg2: bool) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clrtobot() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clrtoeol() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn color_content(arg1: ::std::os::raw::c_short,
                         arg2: *mut ::std::os::raw::c_short,
                         arg3: *mut ::std::os::raw::c_short,
                         arg4: *mut ::std::os::raw::c_short)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn color_set(arg1: ::std::os::raw::c_short,
                     arg2: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn COLOR_PAIR(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn copywin(arg1: *const WINDOW, arg2: *mut WINDOW,
                   arg3: ::std::os::raw::c_int, arg4: ::std::os::raw::c_int,
                   arg5: ::std::os::raw::c_int, arg6: ::std::os::raw::c_int,
                   arg7: ::std::os::raw::c_int, arg8: ::std::os::raw::c_int,
                   arg9: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn curs_set(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn def_prog_mode() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn def_shell_mode() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn delay_output(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn delch() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn delscreen(arg1: *mut SCREEN);
}
extern "C" {
    pub fn delwin(arg1: *mut WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn deleteln() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn derwin(arg1: *mut WINDOW, arg2: ::std::os::raw::c_int,
                  arg3: ::std::os::raw::c_int, arg4: ::std::os::raw::c_int,
                  arg5: ::std::os::raw::c_int) -> *mut WINDOW;
}
extern "C" {
    pub fn doupdate() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dupwin(arg1: *mut WINDOW) -> *mut WINDOW;
}
extern "C" {
    pub fn echo() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn echochar(arg1: chtype) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn erase() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn endwin() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn erasechar() -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn filter();
}
extern "C" {
    pub fn flash() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flushinp() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getbkgd(arg1: *mut WINDOW) -> chtype;
}
extern "C" {
    pub fn getch() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getnstr(arg1: *mut ::std::os::raw::c_char,
                   arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getstr(arg1: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getwin(arg1: *mut FILE) -> *mut WINDOW;
}
extern "C" {
    pub fn halfdelay(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn has_colors() -> bool;
}
extern "C" {
    pub fn has_ic() -> bool;
}
extern "C" {
    pub fn has_il() -> bool;
}
extern "C" {
    pub fn hline(arg1: chtype, arg2: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn idcok(arg1: *mut WINDOW, arg2: bool);
}
extern "C" {
    pub fn idlok(arg1: *mut WINDOW, arg2: bool) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn immedok(arg1: *mut WINDOW, arg2: bool);
}
extern "C" {
    pub fn inch() -> chtype;
}
extern "C" {
    pub fn inchnstr(arg1: *mut chtype, arg2: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inchstr(arg1: *mut chtype) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn initscr() -> *mut WINDOW;
}
extern "C" {
    pub fn init_color(arg1: ::std::os::raw::c_short,
                      arg2: ::std::os::raw::c_short,
                      arg3: ::std::os::raw::c_short,
                      arg4: ::std::os::raw::c_short) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn init_pair(arg1: ::std::os::raw::c_short,
                     arg2: ::std::os::raw::c_short,
                     arg3: ::std::os::raw::c_short) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn innstr(arg1: *mut ::std::os::raw::c_char,
                  arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn insch(arg1: chtype) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn insdelln(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn insertln() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn insnstr(arg1: *const ::std::os::raw::c_char,
                   arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn insstr(arg1: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn instr(arg1: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn intrflush(arg1: *mut WINDOW, arg2: bool) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isendwin() -> bool;
}
extern "C" {
    pub fn is_linetouched(arg1: *mut WINDOW, arg2: ::std::os::raw::c_int)
     -> bool;
}
extern "C" {
    pub fn is_wintouched(arg1: *mut WINDOW) -> bool;
}
extern "C" {
    pub fn keyname(arg1: ::std::os::raw::c_int)
     -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn keypad(arg1: *mut WINDOW, arg2: bool) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn killchar() -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn leaveok(arg1: *mut WINDOW, arg2: bool) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn longname() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn meta(arg1: *mut WINDOW, arg2: bool) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "move"]
    pub fn move_(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvaddch(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int,
                   arg3: chtype) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvaddchnstr(arg1: ::std::os::raw::c_int,
                       arg2: ::std::os::raw::c_int, arg3: *const chtype,
                       arg4: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvaddchstr(arg1: ::std::os::raw::c_int,
                      arg2: ::std::os::raw::c_int, arg3: *const chtype)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvaddnstr(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int,
                     arg3: *const ::std::os::raw::c_char,
                     arg4: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvaddstr(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int,
                    arg3: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvchgat(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int,
                   arg3: ::std::os::raw::c_int, arg4: attr_t,
                   arg5: ::std::os::raw::c_short,
                   arg6: *const ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvcur(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int,
                 arg3: ::std::os::raw::c_int, arg4: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvdelch(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvderwin(arg1: *mut WINDOW, arg2: ::std::os::raw::c_int,
                    arg3: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvgetch(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvgetnstr(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int,
                     arg3: *mut ::std::os::raw::c_char,
                     arg4: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvgetstr(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int,
                    arg3: *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvhline(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int,
                   arg3: chtype, arg4: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvinch(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int)
     -> chtype;
}
extern "C" {
    pub fn mvinchnstr(arg1: ::std::os::raw::c_int,
                      arg2: ::std::os::raw::c_int, arg3: *mut chtype,
                      arg4: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvinchstr(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int,
                     arg3: *mut chtype) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvinnstr(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int,
                    arg3: *mut ::std::os::raw::c_char,
                    arg4: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvinsch(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int,
                   arg3: chtype) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvinsnstr(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int,
                     arg3: *const ::std::os::raw::c_char,
                     arg4: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvinsstr(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int,
                    arg3: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvinstr(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int,
                   arg3: *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvprintw(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int,
                    arg3: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvscanw(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int,
                   arg3: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvvline(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int,
                   arg3: chtype, arg4: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwaddch(arg1: *mut WINDOW, arg2: ::std::os::raw::c_int,
                    arg3: ::std::os::raw::c_int, arg4: chtype)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwaddchnstr(arg1: *mut WINDOW, arg2: ::std::os::raw::c_int,
                        arg3: ::std::os::raw::c_int, arg4: *const chtype,
                        arg5: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwaddchstr(arg1: *mut WINDOW, arg2: ::std::os::raw::c_int,
                       arg3: ::std::os::raw::c_int, arg4: *const chtype)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwaddnstr(arg1: *mut WINDOW, arg2: ::std::os::raw::c_int,
                      arg3: ::std::os::raw::c_int,
                      arg4: *const ::std::os::raw::c_char,
                      arg5: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwaddstr(arg1: *mut WINDOW, arg2: ::std::os::raw::c_int,
                     arg3: ::std::os::raw::c_int,
                     arg4: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwchgat(arg1: *mut WINDOW, arg2: ::std::os::raw::c_int,
                    arg3: ::std::os::raw::c_int, arg4: ::std::os::raw::c_int,
                    arg5: attr_t, arg6: ::std::os::raw::c_short,
                    arg7: *const ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwdelch(arg1: *mut WINDOW, arg2: ::std::os::raw::c_int,
                    arg3: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwgetch(arg1: *mut WINDOW, arg2: ::std::os::raw::c_int,
                    arg3: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwgetnstr(arg1: *mut WINDOW, arg2: ::std::os::raw::c_int,
                      arg3: ::std::os::raw::c_int,
                      arg4: *mut ::std::os::raw::c_char,
                      arg5: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwgetstr(arg1: *mut WINDOW, arg2: ::std::os::raw::c_int,
                     arg3: ::std::os::raw::c_int,
                     arg4: *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwhline(arg1: *mut WINDOW, arg2: ::std::os::raw::c_int,
                    arg3: ::std::os::raw::c_int, arg4: chtype,
                    arg5: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwin(arg1: *mut WINDOW, arg2: ::std::os::raw::c_int,
                 arg3: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwinch(arg1: *mut WINDOW, arg2: ::std::os::raw::c_int,
                   arg3: ::std::os::raw::c_int) -> chtype;
}
extern "C" {
    pub fn mvwinchnstr(arg1: *mut WINDOW, arg2: ::std::os::raw::c_int,
                       arg3: ::std::os::raw::c_int, arg4: *mut chtype,
                       arg5: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwinchstr(arg1: *mut WINDOW, arg2: ::std::os::raw::c_int,
                      arg3: ::std::os::raw::c_int, arg4: *mut chtype)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwinnstr(arg1: *mut WINDOW, arg2: ::std::os::raw::c_int,
                     arg3: ::std::os::raw::c_int,
                     arg4: *mut ::std::os::raw::c_char,
                     arg5: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwinsch(arg1: *mut WINDOW, arg2: ::std::os::raw::c_int,
                    arg3: ::std::os::raw::c_int, arg4: chtype)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwinsnstr(arg1: *mut WINDOW, arg2: ::std::os::raw::c_int,
                      arg3: ::std::os::raw::c_int,
                      arg4: *const ::std::os::raw::c_char,
                      arg5: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwinsstr(arg1: *mut WINDOW, arg2: ::std::os::raw::c_int,
                     arg3: ::std::os::raw::c_int,
                     arg4: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwinstr(arg1: *mut WINDOW, arg2: ::std::os::raw::c_int,
                    arg3: ::std::os::raw::c_int,
                    arg4: *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwprintw(arg1: *mut WINDOW, arg2: ::std::os::raw::c_int,
                     arg3: ::std::os::raw::c_int,
                     arg4: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwscanw(arg1: *mut WINDOW, arg2: ::std::os::raw::c_int,
                    arg3: ::std::os::raw::c_int,
                    arg4: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwvline(arg1: *mut WINDOW, arg2: ::std::os::raw::c_int,
                    arg3: ::std::os::raw::c_int, arg4: chtype,
                    arg5: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn napms(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn newpad(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int)
     -> *mut WINDOW;
}
extern "C" {
    pub fn newterm(arg1: *const ::std::os::raw::c_char, arg2: *mut FILE,
                   arg3: *mut FILE) -> *mut SCREEN;
}
extern "C" {
    pub fn newwin(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int,
                  arg3: ::std::os::raw::c_int, arg4: ::std::os::raw::c_int)
     -> *mut WINDOW;
}
extern "C" {
    pub fn nl() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nocbreak() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nodelay(arg1: *mut WINDOW, arg2: bool) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn noecho() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nonl() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn noqiflush();
}
extern "C" {
    pub fn noraw() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn notimeout(arg1: *mut WINDOW, arg2: bool) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn overlay(arg1: *const WINDOW, arg2: *mut WINDOW)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn overwrite(arg1: *const WINDOW, arg2: *mut WINDOW)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pair_content(arg1: ::std::os::raw::c_short,
                        arg2: *mut ::std::os::raw::c_short,
                        arg3: *mut ::std::os::raw::c_short)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PAIR_NUMBER(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pechochar(arg1: *mut WINDOW, arg2: chtype)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pnoutrefresh(arg1: *mut WINDOW, arg2: ::std::os::raw::c_int,
                        arg3: ::std::os::raw::c_int,
                        arg4: ::std::os::raw::c_int,
                        arg5: ::std::os::raw::c_int,
                        arg6: ::std::os::raw::c_int,
                        arg7: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn prefresh(arg1: *mut WINDOW, arg2: ::std::os::raw::c_int,
                    arg3: ::std::os::raw::c_int, arg4: ::std::os::raw::c_int,
                    arg5: ::std::os::raw::c_int, arg6: ::std::os::raw::c_int,
                    arg7: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn printw(arg1: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putwin(arg1: *mut WINDOW, arg2: *mut FILE)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qiflush();
}
extern "C" {
    pub fn raw() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn redrawwin(arg1: *mut WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn refresh() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn resetty() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn reset_prog_mode() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn reset_shell_mode() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ripoffline(arg1: ::std::os::raw::c_int,
                      arg2:
                          ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                         *mut WINDOW,
                                                                     arg2:
                                                                         ::std::os::raw::c_int)
                                                    -> ::std::os::raw::c_int>)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn savetty() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scanw(arg1: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scr_dump(arg1: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scr_init(arg1: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scrl(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scroll(arg1: *mut WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scrollok(arg1: *mut WINDOW, arg2: bool) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scr_restore(arg1: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scr_set(arg1: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setscrreg(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_term(arg1: *mut SCREEN) -> *mut SCREEN;
}
extern "C" {
    pub fn slk_attroff(arg1: chtype) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn slk_attr_off(arg1: attr_t, arg2: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn slk_attron(arg1: chtype) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn slk_attr_on(arg1: attr_t, arg2: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn slk_attrset(arg1: chtype) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn slk_attr() -> attr_t;
}
extern "C" {
    pub fn slk_attr_set(arg1: attr_t, arg2: ::std::os::raw::c_short,
                        arg3: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn slk_clear() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn slk_color(arg1: ::std::os::raw::c_short) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn slk_init(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn slk_label(arg1: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn slk_noutrefresh() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn slk_refresh() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn slk_restore() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn slk_set(arg1: ::std::os::raw::c_int,
                   arg2: *const ::std::os::raw::c_char,
                   arg3: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn slk_touch() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn standout() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn standend() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn start_color() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn subpad(arg1: *mut WINDOW, arg2: ::std::os::raw::c_int,
                  arg3: ::std::os::raw::c_int, arg4: ::std::os::raw::c_int,
                  arg5: ::std::os::raw::c_int) -> *mut WINDOW;
}
extern "C" {
    pub fn subwin(arg1: *mut WINDOW, arg2: ::std::os::raw::c_int,
                  arg3: ::std::os::raw::c_int, arg4: ::std::os::raw::c_int,
                  arg5: ::std::os::raw::c_int) -> *mut WINDOW;
}
extern "C" {
    pub fn syncok(arg1: *mut WINDOW, arg2: bool) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn termattrs() -> chtype;
}
extern "C" {
    pub fn termname() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn timeout(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn touchline(arg1: *mut WINDOW, arg2: ::std::os::raw::c_int,
                     arg3: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn touchwin(arg1: *mut WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn typeahead(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ungetch(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn untouchwin(arg1: *mut WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn use_env(arg1: bool);
}
extern "C" {
    pub fn use_tioctl(arg1: bool);
}
extern "C" {
    pub fn vidattr(arg1: chtype) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vidputs(arg1: chtype, arg2: NCURSES_OUTC) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vline(arg1: chtype, arg2: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vwprintw(arg1: *mut WINDOW, arg2: *const ::std::os::raw::c_char,
                    arg3: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vw_printw(arg1: *mut WINDOW, arg2: *const ::std::os::raw::c_char,
                     arg3: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vwscanw(arg1: *mut WINDOW, arg2: *const ::std::os::raw::c_char,
                   arg3: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vw_scanw(arg1: *mut WINDOW, arg2: *const ::std::os::raw::c_char,
                    arg3: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn waddch(arg1: *mut WINDOW, arg2: chtype) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn waddchnstr(arg1: *mut WINDOW, arg2: *const chtype,
                      arg3: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn waddchstr(arg1: *mut WINDOW, arg2: *const chtype)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn waddnstr(arg1: *mut WINDOW, arg2: *const ::std::os::raw::c_char,
                    arg3: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn waddstr(arg1: *mut WINDOW, arg2: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wattron(arg1: *mut WINDOW, arg2: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wattroff(arg1: *mut WINDOW, arg2: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wattrset(arg1: *mut WINDOW, arg2: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wattr_get(arg1: *mut WINDOW, arg2: *mut attr_t,
                     arg3: *mut ::std::os::raw::c_short,
                     arg4: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wattr_on(arg1: *mut WINDOW, arg2: attr_t,
                    arg3: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wattr_off(arg1: *mut WINDOW, arg2: attr_t,
                     arg3: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wattr_set(arg1: *mut WINDOW, arg2: attr_t,
                     arg3: ::std::os::raw::c_short,
                     arg4: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wbkgd(arg1: *mut WINDOW, arg2: chtype) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wbkgdset(arg1: *mut WINDOW, arg2: chtype);
}
extern "C" {
    pub fn wborder(arg1: *mut WINDOW, arg2: chtype, arg3: chtype,
                   arg4: chtype, arg5: chtype, arg6: chtype, arg7: chtype,
                   arg8: chtype, arg9: chtype) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wchgat(arg1: *mut WINDOW, arg2: ::std::os::raw::c_int,
                  arg3: attr_t, arg4: ::std::os::raw::c_short,
                  arg5: *const ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wclear(arg1: *mut WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wclrtobot(arg1: *mut WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wclrtoeol(arg1: *mut WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcolor_set(arg1: *mut WINDOW, arg2: ::std::os::raw::c_short,
                      arg3: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcursyncup(arg1: *mut WINDOW);
}
extern "C" {
    pub fn wdelch(arg1: *mut WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wdeleteln(arg1: *mut WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wechochar(arg1: *mut WINDOW, arg2: chtype)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn werase(arg1: *mut WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wgetch(arg1: *mut WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wgetnstr(arg1: *mut WINDOW, arg2: *mut ::std::os::raw::c_char,
                    arg3: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wgetstr(arg1: *mut WINDOW, arg2: *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn whline(arg1: *mut WINDOW, arg2: chtype,
                  arg3: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn winch(arg1: *mut WINDOW) -> chtype;
}
extern "C" {
    pub fn winchnstr(arg1: *mut WINDOW, arg2: *mut chtype,
                     arg3: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn winchstr(arg1: *mut WINDOW, arg2: *mut chtype)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn winnstr(arg1: *mut WINDOW, arg2: *mut ::std::os::raw::c_char,
                   arg3: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn winsch(arg1: *mut WINDOW, arg2: chtype) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn winsdelln(arg1: *mut WINDOW, arg2: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn winsertln(arg1: *mut WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn winsnstr(arg1: *mut WINDOW, arg2: *const ::std::os::raw::c_char,
                    arg3: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn winsstr(arg1: *mut WINDOW, arg2: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn winstr(arg1: *mut WINDOW, arg2: *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wmove(arg1: *mut WINDOW, arg2: ::std::os::raw::c_int,
                 arg3: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wnoutrefresh(arg1: *mut WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wprintw(arg1: *mut WINDOW,
                   arg2: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wredrawln(arg1: *mut WINDOW, arg2: ::std::os::raw::c_int,
                     arg3: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wrefresh(arg1: *mut WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wscanw(arg1: *mut WINDOW, arg2: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wscrl(arg1: *mut WINDOW, arg2: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wsetscrreg(arg1: *mut WINDOW, arg2: ::std::os::raw::c_int,
                      arg3: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wstandout(arg1: *mut WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wstandend(arg1: *mut WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wsyncdown(arg1: *mut WINDOW);
}
extern "C" {
    pub fn wsyncup(arg1: *mut WINDOW);
}
extern "C" {
    pub fn wtimeout(arg1: *mut WINDOW, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn wtouchln(arg1: *mut WINDOW, arg2: ::std::os::raw::c_int,
                    arg3: ::std::os::raw::c_int, arg4: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wvline(arg1: *mut WINDOW, arg2: chtype,
                  arg3: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tigetflag(arg1: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tigetnum(arg1: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tigetstr(arg1: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn putp(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tparm(arg1: *const ::std::os::raw::c_char, ...)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tiparm(arg1: *const ::std::os::raw::c_char, ...)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getattrs(arg1: *const WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getcurx(arg1: *const WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getcury(arg1: *const WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getbegx(arg1: *const WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getbegy(arg1: *const WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getmaxx(arg1: *const WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getmaxy(arg1: *const WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getparx(arg1: *const WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpary(arg1: *const WINDOW) -> ::std::os::raw::c_int;
}
pub type NCURSES_WINDOW_CB =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut WINDOW,
                                               arg2:
                                                   *mut ::std::os::raw::c_void)
                              -> ::std::os::raw::c_int>;
pub type NCURSES_SCREEN_CB =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut SCREEN,
                                               arg2:
                                                   *mut ::std::os::raw::c_void)
                              -> ::std::os::raw::c_int>;
extern "C" {
    pub fn is_term_resized(arg1: ::std::os::raw::c_int,
                           arg2: ::std::os::raw::c_int) -> bool;
}
extern "C" {
    pub fn keybound(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn curses_version() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn alloc_pair(arg1: ::std::os::raw::c_int,
                      arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn assume_default_colors(arg1: ::std::os::raw::c_int,
                                 arg2: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn define_key(arg1: *const ::std::os::raw::c_char,
                      arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn extended_color_content(arg1: ::std::os::raw::c_int,
                                  arg2: *mut ::std::os::raw::c_int,
                                  arg3: *mut ::std::os::raw::c_int,
                                  arg4: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn extended_pair_content(arg1: ::std::os::raw::c_int,
                                 arg2: *mut ::std::os::raw::c_int,
                                 arg3: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn extended_slk_color(arg1: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn find_pair(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn free_pair(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_escdelay() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn init_extended_color(arg1: ::std::os::raw::c_int,
                               arg2: ::std::os::raw::c_int,
                               arg3: ::std::os::raw::c_int,
                               arg4: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn init_extended_pair(arg1: ::std::os::raw::c_int,
                              arg2: ::std::os::raw::c_int,
                              arg3: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn key_defined(arg1: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn keyok(arg1: ::std::os::raw::c_int, arg2: bool)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn resize_term(arg1: ::std::os::raw::c_int,
                       arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn resizeterm(arg1: ::std::os::raw::c_int,
                      arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_escdelay(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_tabsize(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn use_default_colors() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn use_extended_names(arg1: bool) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn use_legacy_coding(arg1: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn use_screen(arg1: *mut SCREEN, arg2: NCURSES_SCREEN_CB,
                      arg3: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn use_window(arg1: *mut WINDOW, arg2: NCURSES_WINDOW_CB,
                      arg3: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wresize(arg1: *mut WINDOW, arg2: ::std::os::raw::c_int,
                   arg3: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nofilter();
}
extern "C" {
    pub fn wgetparent(arg1: *const WINDOW) -> *mut WINDOW;
}
extern "C" {
    pub fn is_cleared(arg1: *const WINDOW) -> bool;
}
extern "C" {
    pub fn is_idcok(arg1: *const WINDOW) -> bool;
}
extern "C" {
    pub fn is_idlok(arg1: *const WINDOW) -> bool;
}
extern "C" {
    pub fn is_immedok(arg1: *const WINDOW) -> bool;
}
extern "C" {
    pub fn is_keypad(arg1: *const WINDOW) -> bool;
}
extern "C" {
    pub fn is_leaveok(arg1: *const WINDOW) -> bool;
}
extern "C" {
    pub fn is_nodelay(arg1: *const WINDOW) -> bool;
}
extern "C" {
    pub fn is_notimeout(arg1: *const WINDOW) -> bool;
}
extern "C" {
    pub fn is_pad(arg1: *const WINDOW) -> bool;
}
extern "C" {
    pub fn is_scrollok(arg1: *const WINDOW) -> bool;
}
extern "C" {
    pub fn is_subwin(arg1: *const WINDOW) -> bool;
}
extern "C" {
    pub fn is_syncok(arg1: *const WINDOW) -> bool;
}
extern "C" {
    pub fn wgetdelay(arg1: *const WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wgetscrreg(arg1: *const WINDOW, arg2: *mut ::std::os::raw::c_int,
                      arg3: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
pub type NCURSES_OUTC_sp =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut SCREEN,
                                               arg2: ::std::os::raw::c_int)
                              -> ::std::os::raw::c_int>;
extern "C" {
    pub fn new_prescr() -> *mut SCREEN;
}
extern "C" {
    pub fn baudrate_sp(arg1: *mut SCREEN) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn beep_sp(arg1: *mut SCREEN) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn can_change_color_sp(arg1: *mut SCREEN) -> bool;
}
extern "C" {
    pub fn cbreak_sp(arg1: *mut SCREEN) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn curs_set_sp(arg1: *mut SCREEN, arg2: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn color_content_sp(arg1: *mut SCREEN, arg2: ::std::os::raw::c_short,
                            arg3: *mut ::std::os::raw::c_short,
                            arg4: *mut ::std::os::raw::c_short,
                            arg5: *mut ::std::os::raw::c_short)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn def_prog_mode_sp(arg1: *mut SCREEN) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn def_shell_mode_sp(arg1: *mut SCREEN) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn delay_output_sp(arg1: *mut SCREEN, arg2: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn doupdate_sp(arg1: *mut SCREEN) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn echo_sp(arg1: *mut SCREEN) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn endwin_sp(arg1: *mut SCREEN) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn erasechar_sp(arg1: *mut SCREEN) -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn filter_sp(arg1: *mut SCREEN);
}
extern "C" {
    pub fn flash_sp(arg1: *mut SCREEN) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flushinp_sp(arg1: *mut SCREEN) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getwin_sp(arg1: *mut SCREEN, arg2: *mut FILE) -> *mut WINDOW;
}
extern "C" {
    pub fn halfdelay_sp(arg1: *mut SCREEN, arg2: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn has_colors_sp(arg1: *mut SCREEN) -> bool;
}
extern "C" {
    pub fn has_ic_sp(arg1: *mut SCREEN) -> bool;
}
extern "C" {
    pub fn has_il_sp(arg1: *mut SCREEN) -> bool;
}
extern "C" {
    pub fn init_color_sp(arg1: *mut SCREEN, arg2: ::std::os::raw::c_short,
                         arg3: ::std::os::raw::c_short,
                         arg4: ::std::os::raw::c_short,
                         arg5: ::std::os::raw::c_short)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn init_pair_sp(arg1: *mut SCREEN, arg2: ::std::os::raw::c_short,
                        arg3: ::std::os::raw::c_short,
                        arg4: ::std::os::raw::c_short)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn intrflush_sp(arg1: *mut SCREEN, arg2: *mut WINDOW, arg3: bool)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isendwin_sp(arg1: *mut SCREEN) -> bool;
}
extern "C" {
    pub fn keyname_sp(arg1: *mut SCREEN, arg2: ::std::os::raw::c_int)
     -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn killchar_sp(arg1: *mut SCREEN) -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn longname_sp(arg1: *mut SCREEN) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mvcur_sp(arg1: *mut SCREEN, arg2: ::std::os::raw::c_int,
                    arg3: ::std::os::raw::c_int, arg4: ::std::os::raw::c_int,
                    arg5: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn napms_sp(arg1: *mut SCREEN, arg2: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn newpad_sp(arg1: *mut SCREEN, arg2: ::std::os::raw::c_int,
                     arg3: ::std::os::raw::c_int) -> *mut WINDOW;
}
extern "C" {
    pub fn newterm_sp(arg1: *mut SCREEN, arg2: *const ::std::os::raw::c_char,
                      arg3: *mut FILE, arg4: *mut FILE) -> *mut SCREEN;
}
extern "C" {
    pub fn newwin_sp(arg1: *mut SCREEN, arg2: ::std::os::raw::c_int,
                     arg3: ::std::os::raw::c_int, arg4: ::std::os::raw::c_int,
                     arg5: ::std::os::raw::c_int) -> *mut WINDOW;
}
extern "C" {
    pub fn nl_sp(arg1: *mut SCREEN) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nocbreak_sp(arg1: *mut SCREEN) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn noecho_sp(arg1: *mut SCREEN) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nonl_sp(arg1: *mut SCREEN) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn noqiflush_sp(arg1: *mut SCREEN);
}
extern "C" {
    pub fn noraw_sp(arg1: *mut SCREEN) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pair_content_sp(arg1: *mut SCREEN, arg2: ::std::os::raw::c_short,
                           arg3: *mut ::std::os::raw::c_short,
                           arg4: *mut ::std::os::raw::c_short)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qiflush_sp(arg1: *mut SCREEN);
}
extern "C" {
    pub fn raw_sp(arg1: *mut SCREEN) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn reset_prog_mode_sp(arg1: *mut SCREEN) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn reset_shell_mode_sp(arg1: *mut SCREEN) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn resetty_sp(arg1: *mut SCREEN) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ripoffline_sp(arg1: *mut SCREEN, arg2: ::std::os::raw::c_int,
                         arg3:
                             ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                            *mut WINDOW,
                                                                        arg2:
                                                                            ::std::os::raw::c_int)
                                                       ->
                                                           ::std::os::raw::c_int>)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn savetty_sp(arg1: *mut SCREEN) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scr_init_sp(arg1: *mut SCREEN, arg2: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scr_restore_sp(arg1: *mut SCREEN,
                          arg2: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scr_set_sp(arg1: *mut SCREEN, arg2: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn slk_attroff_sp(arg1: *mut SCREEN, arg2: chtype)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn slk_attron_sp(arg1: *mut SCREEN, arg2: chtype)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn slk_attrset_sp(arg1: *mut SCREEN, arg2: chtype)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn slk_attr_sp(arg1: *mut SCREEN) -> attr_t;
}
extern "C" {
    pub fn slk_attr_set_sp(arg1: *mut SCREEN, arg2: attr_t,
                           arg3: ::std::os::raw::c_short,
                           arg4: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn slk_clear_sp(arg1: *mut SCREEN) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn slk_color_sp(arg1: *mut SCREEN, arg2: ::std::os::raw::c_short)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn slk_init_sp(arg1: *mut SCREEN, arg2: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn slk_label_sp(arg1: *mut SCREEN, arg2: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn slk_noutrefresh_sp(arg1: *mut SCREEN) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn slk_refresh_sp(arg1: *mut SCREEN) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn slk_restore_sp(arg1: *mut SCREEN) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn slk_set_sp(arg1: *mut SCREEN, arg2: ::std::os::raw::c_int,
                      arg3: *const ::std::os::raw::c_char,
                      arg4: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn slk_touch_sp(arg1: *mut SCREEN) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn start_color_sp(arg1: *mut SCREEN) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn termattrs_sp(arg1: *mut SCREEN) -> chtype;
}
extern "C" {
    pub fn termname_sp(arg1: *mut SCREEN) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn typeahead_sp(arg1: *mut SCREEN, arg2: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ungetch_sp(arg1: *mut SCREEN, arg2: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn use_env_sp(arg1: *mut SCREEN, arg2: bool);
}
extern "C" {
    pub fn use_tioctl_sp(arg1: *mut SCREEN, arg2: bool);
}
extern "C" {
    pub fn vidattr_sp(arg1: *mut SCREEN, arg2: chtype)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vidputs_sp(arg1: *mut SCREEN, arg2: chtype, arg3: NCURSES_OUTC_sp)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn keybound_sp(arg1: *mut SCREEN, arg2: ::std::os::raw::c_int,
                       arg3: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn alloc_pair_sp(arg1: *mut SCREEN, arg2: ::std::os::raw::c_int,
                         arg3: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn assume_default_colors_sp(arg1: *mut SCREEN,
                                    arg2: ::std::os::raw::c_int,
                                    arg3: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn define_key_sp(arg1: *mut SCREEN,
                         arg2: *const ::std::os::raw::c_char,
                         arg3: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn extended_color_content_sp(arg1: *mut SCREEN,
                                     arg2: ::std::os::raw::c_int,
                                     arg3: *mut ::std::os::raw::c_int,
                                     arg4: *mut ::std::os::raw::c_int,
                                     arg5: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn extended_pair_content_sp(arg1: *mut SCREEN,
                                    arg2: ::std::os::raw::c_int,
                                    arg3: *mut ::std::os::raw::c_int,
                                    arg4: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn extended_slk_color_sp(arg1: *mut SCREEN,
                                 arg2: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_escdelay_sp(arg1: *mut SCREEN) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn find_pair_sp(arg1: *mut SCREEN, arg2: ::std::os::raw::c_int,
                        arg3: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn free_pair_sp(arg1: *mut SCREEN, arg2: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn init_extended_color_sp(arg1: *mut SCREEN,
                                  arg2: ::std::os::raw::c_int,
                                  arg3: ::std::os::raw::c_int,
                                  arg4: ::std::os::raw::c_int,
                                  arg5: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn init_extended_pair_sp(arg1: *mut SCREEN,
                                 arg2: ::std::os::raw::c_int,
                                 arg3: ::std::os::raw::c_int,
                                 arg4: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn is_term_resized_sp(arg1: *mut SCREEN, arg2: ::std::os::raw::c_int,
                              arg3: ::std::os::raw::c_int) -> bool;
}
extern "C" {
    pub fn key_defined_sp(arg1: *mut SCREEN,
                          arg2: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn keyok_sp(arg1: *mut SCREEN, arg2: ::std::os::raw::c_int,
                    arg3: bool) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nofilter_sp(arg1: *mut SCREEN);
}
extern "C" {
    pub fn resize_term_sp(arg1: *mut SCREEN, arg2: ::std::os::raw::c_int,
                          arg3: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn resizeterm_sp(arg1: *mut SCREEN, arg2: ::std::os::raw::c_int,
                         arg3: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_escdelay_sp(arg1: *mut SCREEN, arg2: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_tabsize_sp(arg1: *mut SCREEN, arg2: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn use_default_colors_sp(arg1: *mut SCREEN) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn use_legacy_coding_sp(arg1: *mut SCREEN,
                                arg2: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "curscr"]
    pub static mut curscr: *mut WINDOW;
}
extern "C" {
    #[link_name = "newscr"]
    pub static mut newscr: *mut WINDOW;
}
extern "C" {
    #[link_name = "stdscr"]
    pub static mut stdscr: *mut WINDOW;
}
extern "C" {
    #[link_name = "ttytype"]
    pub static mut ttytype: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    #[link_name = "COLORS"]
    pub static mut COLORS: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "COLOR_PAIRS"]
    pub static mut COLOR_PAIRS: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "COLS"]
    pub static mut COLS: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "ESCDELAY"]
    pub static mut ESCDELAY: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "LINES"]
    pub static mut LINES: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "TABSIZE"]
    pub static mut TABSIZE: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "_nc_wacs"]
    pub static mut _nc_wacs: *mut cchar_t;
}
extern "C" {
    pub fn add_wch(arg1: *const cchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn add_wchnstr(arg1: *const cchar_t, arg2: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn add_wchstr(arg1: *const cchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn addnwstr(arg1: *const wchar_t, arg2: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn addwstr(arg1: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bkgrnd(arg1: *const cchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bkgrndset(arg1: *const cchar_t);
}
extern "C" {
    pub fn border_set(arg1: *const cchar_t, arg2: *const cchar_t,
                      arg3: *const cchar_t, arg4: *const cchar_t,
                      arg5: *const cchar_t, arg6: *const cchar_t,
                      arg7: *const cchar_t, arg8: *const cchar_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn box_set(arg1: *mut WINDOW, arg2: *const cchar_t,
                   arg3: *const cchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn echo_wchar(arg1: *const cchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn erasewchar(arg1: *mut wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_wch(arg1: *mut wint_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_wstr(arg1: *mut wint_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getbkgrnd(arg1: *mut cchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getcchar(arg1: *const cchar_t, arg2: *mut wchar_t,
                    arg3: *mut attr_t, arg4: *mut ::std::os::raw::c_short,
                    arg5: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getn_wstr(arg1: *mut wint_t, arg2: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn hline_set(arg1: *const cchar_t, arg2: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn in_wch(arg1: *mut cchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn in_wchnstr(arg1: *mut cchar_t, arg2: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn in_wchstr(arg1: *mut cchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn innwstr(arg1: *mut wchar_t, arg2: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ins_nwstr(arg1: *const wchar_t, arg2: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ins_wch(arg1: *const cchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ins_wstr(arg1: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inwstr(arg1: *mut wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn key_name(arg1: wchar_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn killwchar(arg1: *mut wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvadd_wch(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int,
                     arg3: *const cchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvadd_wchnstr(arg1: ::std::os::raw::c_int,
                         arg2: ::std::os::raw::c_int, arg3: *const cchar_t,
                         arg4: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvadd_wchstr(arg1: ::std::os::raw::c_int,
                        arg2: ::std::os::raw::c_int, arg3: *const cchar_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvaddnwstr(arg1: ::std::os::raw::c_int,
                      arg2: ::std::os::raw::c_int, arg3: *const wchar_t,
                      arg4: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvaddwstr(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int,
                     arg3: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvget_wch(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int,
                     arg3: *mut wint_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvget_wstr(arg1: ::std::os::raw::c_int,
                      arg2: ::std::os::raw::c_int, arg3: *mut wint_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvgetn_wstr(arg1: ::std::os::raw::c_int,
                       arg2: ::std::os::raw::c_int, arg3: *mut wint_t,
                       arg4: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvhline_set(arg1: ::std::os::raw::c_int,
                       arg2: ::std::os::raw::c_int, arg3: *const cchar_t,
                       arg4: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvin_wch(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int,
                    arg3: *mut cchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvin_wchnstr(arg1: ::std::os::raw::c_int,
                        arg2: ::std::os::raw::c_int, arg3: *mut cchar_t,
                        arg4: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvin_wchstr(arg1: ::std::os::raw::c_int,
                       arg2: ::std::os::raw::c_int, arg3: *mut cchar_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvinnwstr(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int,
                     arg3: *mut wchar_t, arg4: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvins_nwstr(arg1: ::std::os::raw::c_int,
                       arg2: ::std::os::raw::c_int, arg3: *const wchar_t,
                       arg4: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvins_wch(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int,
                     arg3: *const cchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvins_wstr(arg1: ::std::os::raw::c_int,
                      arg2: ::std::os::raw::c_int, arg3: *const wchar_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvinwstr(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int,
                    arg3: *mut wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvvline_set(arg1: ::std::os::raw::c_int,
                       arg2: ::std::os::raw::c_int, arg3: *const cchar_t,
                       arg4: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwadd_wch(arg1: *mut WINDOW, arg2: ::std::os::raw::c_int,
                      arg3: ::std::os::raw::c_int, arg4: *const cchar_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwadd_wchnstr(arg1: *mut WINDOW, arg2: ::std::os::raw::c_int,
                          arg3: ::std::os::raw::c_int, arg4: *const cchar_t,
                          arg5: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwadd_wchstr(arg1: *mut WINDOW, arg2: ::std::os::raw::c_int,
                         arg3: ::std::os::raw::c_int, arg4: *const cchar_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwaddnwstr(arg1: *mut WINDOW, arg2: ::std::os::raw::c_int,
                       arg3: ::std::os::raw::c_int, arg4: *const wchar_t,
                       arg5: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwaddwstr(arg1: *mut WINDOW, arg2: ::std::os::raw::c_int,
                      arg3: ::std::os::raw::c_int, arg4: *const wchar_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwget_wch(arg1: *mut WINDOW, arg2: ::std::os::raw::c_int,
                      arg3: ::std::os::raw::c_int, arg4: *mut wint_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwget_wstr(arg1: *mut WINDOW, arg2: ::std::os::raw::c_int,
                       arg3: ::std::os::raw::c_int, arg4: *mut wint_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwgetn_wstr(arg1: *mut WINDOW, arg2: ::std::os::raw::c_int,
                        arg3: ::std::os::raw::c_int, arg4: *mut wint_t,
                        arg5: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwhline_set(arg1: *mut WINDOW, arg2: ::std::os::raw::c_int,
                        arg3: ::std::os::raw::c_int, arg4: *const cchar_t,
                        arg5: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwin_wch(arg1: *mut WINDOW, arg2: ::std::os::raw::c_int,
                     arg3: ::std::os::raw::c_int, arg4: *mut cchar_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwin_wchnstr(arg1: *mut WINDOW, arg2: ::std::os::raw::c_int,
                         arg3: ::std::os::raw::c_int, arg4: *mut cchar_t,
                         arg5: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwin_wchstr(arg1: *mut WINDOW, arg2: ::std::os::raw::c_int,
                        arg3: ::std::os::raw::c_int, arg4: *mut cchar_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwinnwstr(arg1: *mut WINDOW, arg2: ::std::os::raw::c_int,
                      arg3: ::std::os::raw::c_int, arg4: *mut wchar_t,
                      arg5: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwins_nwstr(arg1: *mut WINDOW, arg2: ::std::os::raw::c_int,
                        arg3: ::std::os::raw::c_int, arg4: *const wchar_t,
                        arg5: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwins_wch(arg1: *mut WINDOW, arg2: ::std::os::raw::c_int,
                      arg3: ::std::os::raw::c_int, arg4: *const cchar_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwins_wstr(arg1: *mut WINDOW, arg2: ::std::os::raw::c_int,
                       arg3: ::std::os::raw::c_int, arg4: *const wchar_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwinwstr(arg1: *mut WINDOW, arg2: ::std::os::raw::c_int,
                     arg3: ::std::os::raw::c_int, arg4: *mut wchar_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwvline_set(arg1: *mut WINDOW, arg2: ::std::os::raw::c_int,
                        arg3: ::std::os::raw::c_int, arg4: *const cchar_t,
                        arg5: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pecho_wchar(arg1: *mut WINDOW, arg2: *const cchar_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setcchar(arg1: *mut cchar_t, arg2: *const wchar_t, arg3: attr_t,
                    arg4: ::std::os::raw::c_short,
                    arg5: *const ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn slk_wset(arg1: ::std::os::raw::c_int, arg2: *const wchar_t,
                    arg3: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn term_attrs() -> attr_t;
}
extern "C" {
    pub fn unget_wch(arg1: wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vid_attr(arg1: attr_t, arg2: ::std::os::raw::c_short,
                    arg3: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vid_puts(arg1: attr_t, arg2: ::std::os::raw::c_short,
                    arg3: *mut ::std::os::raw::c_void, arg4: NCURSES_OUTC)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vline_set(arg1: *const cchar_t, arg2: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wadd_wch(arg1: *mut WINDOW, arg2: *const cchar_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wadd_wchnstr(arg1: *mut WINDOW, arg2: *const cchar_t,
                        arg3: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wadd_wchstr(arg1: *mut WINDOW, arg2: *const cchar_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn waddnwstr(arg1: *mut WINDOW, arg2: *const wchar_t,
                     arg3: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn waddwstr(arg1: *mut WINDOW, arg2: *const wchar_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wbkgrnd(arg1: *mut WINDOW, arg2: *const cchar_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wbkgrndset(arg1: *mut WINDOW, arg2: *const cchar_t);
}
extern "C" {
    pub fn wborder_set(arg1: *mut WINDOW, arg2: *const cchar_t,
                       arg3: *const cchar_t, arg4: *const cchar_t,
                       arg5: *const cchar_t, arg6: *const cchar_t,
                       arg7: *const cchar_t, arg8: *const cchar_t,
                       arg9: *const cchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wecho_wchar(arg1: *mut WINDOW, arg2: *const cchar_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wget_wch(arg1: *mut WINDOW, arg2: *mut wint_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wget_wstr(arg1: *mut WINDOW, arg2: *mut wint_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wgetbkgrnd(arg1: *mut WINDOW, arg2: *mut cchar_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wgetn_wstr(arg1: *mut WINDOW, arg2: *mut wint_t,
                      arg3: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn whline_set(arg1: *mut WINDOW, arg2: *const cchar_t,
                      arg3: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn win_wch(arg1: *mut WINDOW, arg2: *mut cchar_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn win_wchnstr(arg1: *mut WINDOW, arg2: *mut cchar_t,
                       arg3: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn win_wchstr(arg1: *mut WINDOW, arg2: *mut cchar_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn winnwstr(arg1: *mut WINDOW, arg2: *mut wchar_t,
                    arg3: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wins_nwstr(arg1: *mut WINDOW, arg2: *const wchar_t,
                      arg3: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wins_wch(arg1: *mut WINDOW, arg2: *const cchar_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wins_wstr(arg1: *mut WINDOW, arg2: *const wchar_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn winwstr(arg1: *mut WINDOW, arg2: *mut wchar_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wunctrl(arg1: *mut cchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wvline_set(arg1: *mut WINDOW, arg2: *const cchar_t,
                      arg3: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn term_attrs_sp(arg1: *mut SCREEN) -> attr_t;
}
extern "C" {
    pub fn unget_wch_sp(arg1: *mut SCREEN, arg2: wchar_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wunctrl_sp(arg1: *mut SCREEN, arg2: *mut cchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn vid_attr_sp(arg1: *mut SCREEN, arg2: attr_t,
                       arg3: ::std::os::raw::c_short,
                       arg4: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vid_puts_sp(arg1: *mut SCREEN, arg2: attr_t,
                       arg3: ::std::os::raw::c_short,
                       arg4: *mut ::std::os::raw::c_void,
                       arg5: NCURSES_OUTC_sp) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct MEVENT {
    pub id: ::std::os::raw::c_short,
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
    pub z: ::std::os::raw::c_int,
    pub bstate: mmask_t,
}
#[test]
fn bindgen_test_layout_MEVENT() {
    assert_eq!(::std::mem::size_of::<MEVENT>() , 20usize , concat ! (
               "Size of: " , stringify ! ( MEVENT ) ));
    assert_eq! (::std::mem::align_of::<MEVENT>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( MEVENT ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const MEVENT ) ) . id as * const _ as usize } ,
                0usize , concat ! (
                "Alignment of field: " , stringify ! ( MEVENT ) , "::" ,
                stringify ! ( id ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const MEVENT ) ) . x as * const _ as usize } ,
                4usize , concat ! (
                "Alignment of field: " , stringify ! ( MEVENT ) , "::" ,
                stringify ! ( x ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const MEVENT ) ) . y as * const _ as usize } ,
                8usize , concat ! (
                "Alignment of field: " , stringify ! ( MEVENT ) , "::" ,
                stringify ! ( y ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const MEVENT ) ) . z as * const _ as usize } ,
                12usize , concat ! (
                "Alignment of field: " , stringify ! ( MEVENT ) , "::" ,
                stringify ! ( z ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const MEVENT ) ) . bstate as * const _ as usize
                } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( MEVENT ) , "::" ,
                stringify ! ( bstate ) ));
}
impl Clone for MEVENT {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn has_mouse() -> bool;
}
extern "C" {
    pub fn getmouse(arg1: *mut MEVENT) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ungetmouse(arg1: *mut MEVENT) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mousemask(arg1: mmask_t, arg2: *mut mmask_t) -> mmask_t;
}
extern "C" {
    pub fn wenclose(arg1: *const WINDOW, arg2: ::std::os::raw::c_int,
                    arg3: ::std::os::raw::c_int) -> bool;
}
extern "C" {
    pub fn mouseinterval(arg1: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wmouse_trafo(arg1: *const WINDOW, arg2: *mut ::std::os::raw::c_int,
                        arg3: *mut ::std::os::raw::c_int, arg4: bool) -> bool;
}
extern "C" {
    pub fn mouse_trafo(arg1: *mut ::std::os::raw::c_int,
                       arg2: *mut ::std::os::raw::c_int, arg3: bool) -> bool;
}
extern "C" {
    pub fn has_mouse_sp(arg1: *mut SCREEN) -> bool;
}
extern "C" {
    pub fn getmouse_sp(arg1: *mut SCREEN, arg2: *mut MEVENT)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ungetmouse_sp(arg1: *mut SCREEN, arg2: *mut MEVENT)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mousemask_sp(arg1: *mut SCREEN, arg2: mmask_t, arg3: *mut mmask_t)
     -> mmask_t;
}
extern "C" {
    pub fn mouseinterval_sp(arg1: *mut SCREEN, arg2: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mcprint(arg1: *mut ::std::os::raw::c_char,
                   arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn has_key(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn has_key_sp(arg1: *mut SCREEN, arg2: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mcprint_sp(arg1: *mut SCREEN, arg2: *mut ::std::os::raw::c_char,
                      arg3: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _tracef(arg1: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn _traceattr(arg1: attr_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _traceattr2(arg1: ::std::os::raw::c_int, arg2: chtype)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _tracechar(arg1: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _tracechtype(arg1: chtype) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _tracechtype2(arg1: ::std::os::raw::c_int, arg2: chtype)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _tracecchar_t(arg1: *const cchar_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _tracecchar_t2(arg1: ::std::os::raw::c_int, arg2: *const cchar_t)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn trace(arg1: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn unctrl(arg1: chtype) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn unctrl_sp(arg1: *mut SCREEN, arg2: chtype)
     -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct termtype {
    pub term_names: *mut ::std::os::raw::c_char,
    pub str_table: *mut ::std::os::raw::c_char,
    pub Booleans: *mut ::std::os::raw::c_char,
    pub Numbers: *mut ::std::os::raw::c_short,
    pub Strings: *mut *mut ::std::os::raw::c_char,
    pub ext_str_table: *mut ::std::os::raw::c_char,
    pub ext_Names: *mut *mut ::std::os::raw::c_char,
    pub num_Booleans: ::std::os::raw::c_ushort,
    pub num_Numbers: ::std::os::raw::c_ushort,
    pub num_Strings: ::std::os::raw::c_ushort,
    pub ext_Booleans: ::std::os::raw::c_ushort,
    pub ext_Numbers: ::std::os::raw::c_ushort,
    pub ext_Strings: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout_termtype() {
    assert_eq!(::std::mem::size_of::<termtype>() , 72usize , concat ! (
               "Size of: " , stringify ! ( termtype ) ));
    assert_eq! (::std::mem::align_of::<termtype>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( termtype ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const termtype ) ) . term_names as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( termtype ) , "::" ,
                stringify ! ( term_names ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const termtype ) ) . str_table as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( termtype ) , "::" ,
                stringify ! ( str_table ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const termtype ) ) . Booleans as * const _ as
                usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( termtype ) , "::" ,
                stringify ! ( Booleans ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const termtype ) ) . Numbers as * const _ as
                usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( termtype ) , "::" ,
                stringify ! ( Numbers ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const termtype ) ) . Strings as * const _ as
                usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( termtype ) , "::" ,
                stringify ! ( Strings ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const termtype ) ) . ext_str_table as * const _
                as usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! ( termtype ) , "::" ,
                stringify ! ( ext_str_table ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const termtype ) ) . ext_Names as * const _ as
                usize } , 48usize , concat ! (
                "Alignment of field: " , stringify ! ( termtype ) , "::" ,
                stringify ! ( ext_Names ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const termtype ) ) . num_Booleans as * const _
                as usize } , 56usize , concat ! (
                "Alignment of field: " , stringify ! ( termtype ) , "::" ,
                stringify ! ( num_Booleans ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const termtype ) ) . num_Numbers as * const _
                as usize } , 58usize , concat ! (
                "Alignment of field: " , stringify ! ( termtype ) , "::" ,
                stringify ! ( num_Numbers ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const termtype ) ) . num_Strings as * const _
                as usize } , 60usize , concat ! (
                "Alignment of field: " , stringify ! ( termtype ) , "::" ,
                stringify ! ( num_Strings ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const termtype ) ) . ext_Booleans as * const _
                as usize } , 62usize , concat ! (
                "Alignment of field: " , stringify ! ( termtype ) , "::" ,
                stringify ! ( ext_Booleans ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const termtype ) ) . ext_Numbers as * const _
                as usize } , 64usize , concat ! (
                "Alignment of field: " , stringify ! ( termtype ) , "::" ,
                stringify ! ( ext_Numbers ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const termtype ) ) . ext_Strings as * const _
                as usize } , 66usize , concat ! (
                "Alignment of field: " , stringify ! ( termtype ) , "::" ,
                stringify ! ( ext_Strings ) ));
}
impl Clone for termtype {
    fn clone(&self) -> Self { *self }
}
pub type TERMTYPE = termtype;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct term {
    _unused: [u8; 0],
}
pub type TERMINAL = term;
extern "C" {
    #[link_name = "cur_term"]
    pub static mut cur_term: *mut TERMINAL;
}
extern "C" {
    #[link_name = "boolnames"]
    pub static mut boolnames: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    #[link_name = "boolcodes"]
    pub static mut boolcodes: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    #[link_name = "boolfnames"]
    pub static mut boolfnames: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    #[link_name = "numnames"]
    pub static mut numnames: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    #[link_name = "numcodes"]
    pub static mut numcodes: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    #[link_name = "numfnames"]
    pub static mut numfnames: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    #[link_name = "strnames"]
    pub static mut strnames: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    #[link_name = "strcodes"]
    pub static mut strcodes: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    #[link_name = "strfnames"]
    pub static mut strfnames: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub fn _nc_fallback(arg1: *const ::std::os::raw::c_char)
     -> *const TERMTYPE;
}
extern "C" {
    pub fn _nc_read_entry(arg1: *const ::std::os::raw::c_char,
                          arg2: *const ::std::os::raw::c_char,
                          arg3: *const TERMTYPE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_curterm(arg1: *mut TERMINAL) -> *mut TERMINAL;
}
extern "C" {
    pub fn del_curterm(arg1: *mut TERMINAL) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn restartterm(arg1: *const ::std::os::raw::c_char,
                       arg2: ::std::os::raw::c_int,
                       arg3: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setupterm(arg1: *const ::std::os::raw::c_char,
                     arg2: ::std::os::raw::c_int,
                     arg3: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tgetstr(arg1: *const ::std::os::raw::c_char,
                   arg2: *mut *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tgoto(arg1: *const ::std::os::raw::c_char,
                 arg2: ::std::os::raw::c_int, arg3: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tgetent(arg1: *mut ::std::os::raw::c_char,
                   arg2: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tgetflag(arg1: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tgetnum(arg1: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tputs(arg1: *const ::std::os::raw::c_char,
                 arg2: ::std::os::raw::c_int,
                 arg3:
                     ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                    ::std::os::raw::c_int)
                                               -> ::std::os::raw::c_int>)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tigetstr_sp(arg1: *mut SCREEN, arg2: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn putp_sp(arg1: *mut SCREEN, arg2: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tigetflag_sp(arg1: *mut SCREEN,
                        arg2: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tigetnum_sp(arg1: *mut SCREEN, arg2: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tparm_sp(arg1: *mut SCREEN,
                    arg2: *const ::std::os::raw::c_char, ...)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tgetstr_sp(arg1: *mut SCREEN, arg2: *const ::std::os::raw::c_char,
                      arg3: *mut *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tgoto_sp(arg1: *mut SCREEN, arg2: *const ::std::os::raw::c_char,
                    arg3: ::std::os::raw::c_int, arg4: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tgetent_sp(arg1: *mut SCREEN, arg2: *mut ::std::os::raw::c_char,
                      arg3: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tgetflag_sp(arg1: *mut SCREEN, arg2: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tgetnum_sp(arg1: *mut SCREEN, arg2: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tputs_sp(arg1: *mut SCREEN, arg2: *const ::std::os::raw::c_char,
                    arg3: ::std::os::raw::c_int, arg4: NCURSES_OUTC_sp)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_curterm_sp(arg1: *mut SCREEN, arg2: *mut TERMINAL)
     -> *mut TERMINAL;
}
extern "C" {
    pub fn del_curterm_sp(arg1: *mut SCREEN, arg2: *mut TERMINAL)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn restartterm_sp(arg1: *mut SCREEN,
                          arg2: *const ::std::os::raw::c_char,
                          arg3: ::std::os::raw::c_int,
                          arg4: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
pub type zlong = ::std::os::raw::c_long;
pub type zulong = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct mnumber {
    pub u: mnumber__bindgen_ty_1,
    pub type_: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct mnumber__bindgen_ty_1 {
    pub l: __BindgenUnionField<zlong>,
    pub d: __BindgenUnionField<f64>,
    pub bindgen_union_field: u64,
}
#[test]
fn bindgen_test_layout_mnumber__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<mnumber__bindgen_ty_1>() , 8usize ,
               concat ! ( "Size of: " , stringify ! ( mnumber__bindgen_ty_1 )
               ));
    assert_eq! (::std::mem::align_of::<mnumber__bindgen_ty_1>() , 8usize ,
                concat ! (
                "Alignment of " , stringify ! ( mnumber__bindgen_ty_1 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const mnumber__bindgen_ty_1 ) ) . l as * const
                _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( mnumber__bindgen_ty_1 )
                , "::" , stringify ! ( l ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const mnumber__bindgen_ty_1 ) ) . d as * const
                _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( mnumber__bindgen_ty_1 )
                , "::" , stringify ! ( d ) ));
}
impl Clone for mnumber__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_mnumber() {
    assert_eq!(::std::mem::size_of::<mnumber>() , 16usize , concat ! (
               "Size of: " , stringify ! ( mnumber ) ));
    assert_eq! (::std::mem::align_of::<mnumber>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( mnumber ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const mnumber ) ) . u as * const _ as usize } ,
                0usize , concat ! (
                "Alignment of field: " , stringify ! ( mnumber ) , "::" ,
                stringify ! ( u ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const mnumber ) ) . type_ as * const _ as usize
                } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( mnumber ) , "::" ,
                stringify ! ( type_ ) ));
}
impl Clone for mnumber {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct mathfunc {
    pub next: MathFunc,
    pub name: *mut ::std::os::raw::c_char,
    pub flags: ::std::os::raw::c_int,
    pub nfunc: NumMathFunc,
    pub sfunc: StrMathFunc,
    pub module: *mut ::std::os::raw::c_char,
    pub minargs: ::std::os::raw::c_int,
    pub maxargs: ::std::os::raw::c_int,
    pub funcid: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_mathfunc() {
    assert_eq!(::std::mem::size_of::<mathfunc>() , 64usize , concat ! (
               "Size of: " , stringify ! ( mathfunc ) ));
    assert_eq! (::std::mem::align_of::<mathfunc>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( mathfunc ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const mathfunc ) ) . next as * const _ as usize
                } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( mathfunc ) , "::" ,
                stringify ! ( next ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const mathfunc ) ) . name as * const _ as usize
                } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( mathfunc ) , "::" ,
                stringify ! ( name ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const mathfunc ) ) . flags as * const _ as
                usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( mathfunc ) , "::" ,
                stringify ! ( flags ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const mathfunc ) ) . nfunc as * const _ as
                usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( mathfunc ) , "::" ,
                stringify ! ( nfunc ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const mathfunc ) ) . sfunc as * const _ as
                usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( mathfunc ) , "::" ,
                stringify ! ( sfunc ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const mathfunc ) ) . module as * const _ as
                usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! ( mathfunc ) , "::" ,
                stringify ! ( module ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const mathfunc ) ) . minargs as * const _ as
                usize } , 48usize , concat ! (
                "Alignment of field: " , stringify ! ( mathfunc ) , "::" ,
                stringify ! ( minargs ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const mathfunc ) ) . maxargs as * const _ as
                usize } , 52usize , concat ! (
                "Alignment of field: " , stringify ! ( mathfunc ) , "::" ,
                stringify ! ( maxargs ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const mathfunc ) ) . funcid as * const _ as
                usize } , 56usize , concat ! (
                "Alignment of field: " , stringify ! ( mathfunc ) , "::" ,
                stringify ! ( funcid ) ));
}
impl Clone for mathfunc {
    fn clone(&self) -> Self { *self }
}
pub type MathFunc = *mut mathfunc;
pub type NumMathFunc =
    ::std::option::Option<unsafe extern "C" fn(arg1:
                                                   *mut ::std::os::raw::c_char,
                                               arg2: ::std::os::raw::c_int,
                                               arg3: *mut mnumber,
                                               arg4: ::std::os::raw::c_int)
                              -> mnumber>;
pub type StrMathFunc =
    ::std::option::Option<unsafe extern "C" fn(arg1:
                                                   *mut ::std::os::raw::c_char,
                                               arg2:
                                                   *mut ::std::os::raw::c_char,
                                               arg3: ::std::os::raw::c_int)
                              -> mnumber>;
pub const QT_NONE: _bindgen_ty_19 = _bindgen_ty_19::QT_NONE;
pub const QT_BACKSLASH: _bindgen_ty_19 = _bindgen_ty_19::QT_BACKSLASH;
pub const QT_SINGLE: _bindgen_ty_19 = _bindgen_ty_19::QT_SINGLE;
pub const QT_DOUBLE: _bindgen_ty_19 = _bindgen_ty_19::QT_DOUBLE;
pub const QT_DOLLARS: _bindgen_ty_19 = _bindgen_ty_19::QT_DOLLARS;
pub const QT_BACKTICK: _bindgen_ty_19 = _bindgen_ty_19::QT_BACKTICK;
pub const QT_SINGLE_OPTIONAL: _bindgen_ty_19 =
    _bindgen_ty_19::QT_SINGLE_OPTIONAL;
pub const QT_BACKSLASH_PATTERN: _bindgen_ty_19 =
    _bindgen_ty_19::QT_BACKSLASH_PATTERN;
pub const QT_BACKSLASH_SHOWNULL: _bindgen_ty_19 =
    _bindgen_ty_19::QT_BACKSLASH_SHOWNULL;
pub const QT_QUOTEDZPUTS: _bindgen_ty_19 = _bindgen_ty_19::QT_QUOTEDZPUTS;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_19 {
    QT_NONE = 0,
    QT_BACKSLASH = 1,
    QT_SINGLE = 2,
    QT_DOUBLE = 3,
    QT_DOLLARS = 4,
    QT_BACKTICK = 5,
    QT_SINGLE_OPTIONAL = 6,
    QT_BACKSLASH_PATTERN = 7,
    QT_BACKSLASH_SHOWNULL = 8,
    QT_QUOTEDZPUTS = 9,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum lextok {
    NULLTOK = 0,
    SEPER = 1,
    NEWLIN = 2,
    SEMI = 3,
    DSEMI = 4,
    AMPER = 5,
    INPAR = 6,
    OUTPAR = 7,
    DBAR = 8,
    DAMPER = 9,
    OUTANG = 10,
    OUTANGBANG = 11,
    DOUTANG = 12,
    DOUTANGBANG = 13,
    INANG = 14,
    INOUTANG = 15,
    DINANG = 16,
    DINANGDASH = 17,
    INANGAMP = 18,
    OUTANGAMP = 19,
    AMPOUTANG = 20,
    OUTANGAMPBANG = 21,
    DOUTANGAMP = 22,
    DOUTANGAMPBANG = 23,
    TRINANG = 24,
    BAR = 25,
    BARAMP = 26,
    INOUTPAR = 27,
    DINPAR = 28,
    DOUTPAR = 29,
    AMPERBANG = 30,
    SEMIAMP = 31,
    SEMIBAR = 32,
    DOUTBRACK = 33,
    STRING = 34,
    ENVSTRING = 35,
    ENVARRAY = 36,
    ENDINPUT = 37,
    LEXERR = 38,
    BANG = 39,
    DINBRACK = 40,
    INBRACE = 41,
    OUTBRACE = 42,
    CASE = 43,
    COPROC = 44,
    DOLOOP = 45,
    DONE = 46,
    ELIF = 47,
    ELSE = 48,
    ZEND = 49,
    ESAC = 50,
    FI = 51,
    FOR = 52,
    FOREACH = 53,
    FUNC = 54,
    IF = 55,
    NOCORRECT = 56,
    REPEAT = 57,
    SELECT = 58,
    THEN = 59,
    TIME = 60,
    UNTIL = 61,
    WHILE = 62,
    TYPESET = 63,
}
pub const REDIR_WRITE: _bindgen_ty_20 = _bindgen_ty_20::REDIR_WRITE;
pub const REDIR_WRITENOW: _bindgen_ty_20 = _bindgen_ty_20::REDIR_WRITENOW;
pub const REDIR_APP: _bindgen_ty_20 = _bindgen_ty_20::REDIR_APP;
pub const REDIR_APPNOW: _bindgen_ty_20 = _bindgen_ty_20::REDIR_APPNOW;
pub const REDIR_ERRWRITE: _bindgen_ty_20 = _bindgen_ty_20::REDIR_ERRWRITE;
pub const REDIR_ERRWRITENOW: _bindgen_ty_20 =
    _bindgen_ty_20::REDIR_ERRWRITENOW;
pub const REDIR_ERRAPP: _bindgen_ty_20 = _bindgen_ty_20::REDIR_ERRAPP;
pub const REDIR_ERRAPPNOW: _bindgen_ty_20 = _bindgen_ty_20::REDIR_ERRAPPNOW;
pub const REDIR_READWRITE: _bindgen_ty_20 = _bindgen_ty_20::REDIR_READWRITE;
pub const REDIR_READ: _bindgen_ty_20 = _bindgen_ty_20::REDIR_READ;
pub const REDIR_HEREDOC: _bindgen_ty_20 = _bindgen_ty_20::REDIR_HEREDOC;
pub const REDIR_HEREDOCDASH: _bindgen_ty_20 =
    _bindgen_ty_20::REDIR_HEREDOCDASH;
pub const REDIR_HERESTR: _bindgen_ty_20 = _bindgen_ty_20::REDIR_HERESTR;
pub const REDIR_MERGEIN: _bindgen_ty_20 = _bindgen_ty_20::REDIR_MERGEIN;
pub const REDIR_MERGEOUT: _bindgen_ty_20 = _bindgen_ty_20::REDIR_MERGEOUT;
pub const REDIR_CLOSE: _bindgen_ty_20 = _bindgen_ty_20::REDIR_CLOSE;
pub const REDIR_INPIPE: _bindgen_ty_20 = _bindgen_ty_20::REDIR_INPIPE;
pub const REDIR_OUTPIPE: _bindgen_ty_20 = _bindgen_ty_20::REDIR_OUTPIPE;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_20 {
    REDIR_WRITE = 0,
    REDIR_WRITENOW = 1,
    REDIR_APP = 2,
    REDIR_APPNOW = 3,
    REDIR_ERRWRITE = 4,
    REDIR_ERRWRITENOW = 5,
    REDIR_ERRAPP = 6,
    REDIR_ERRAPPNOW = 7,
    REDIR_READWRITE = 8,
    REDIR_READ = 9,
    REDIR_HEREDOC = 10,
    REDIR_HEREDOCDASH = 11,
    REDIR_HERESTR = 12,
    REDIR_MERGEIN = 13,
    REDIR_MERGEOUT = 14,
    REDIR_CLOSE = 15,
    REDIR_INPIPE = 16,
    REDIR_OUTPIPE = 17,
}
pub const ZCONTEXT_HIST: _bindgen_ty_21 = _bindgen_ty_21::ZCONTEXT_HIST;
pub const ZCONTEXT_LEX: _bindgen_ty_21 = _bindgen_ty_21::ZCONTEXT_LEX;
pub const ZCONTEXT_PARSE: _bindgen_ty_21 = _bindgen_ty_21::ZCONTEXT_PARSE;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_21 {
    ZCONTEXT_HIST = 1,
    ZCONTEXT_LEX = 2,
    ZCONTEXT_PARSE = 4,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct alias {
    pub node: hashnode,
    pub text: *mut ::std::os::raw::c_char,
    pub inuse: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_alias() {
    assert_eq!(::std::mem::size_of::<alias>() , 40usize , concat ! (
               "Size of: " , stringify ! ( alias ) ));
    assert_eq! (::std::mem::align_of::<alias>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( alias ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const alias ) ) . node as * const _ as usize }
                , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( alias ) , "::" ,
                stringify ! ( node ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const alias ) ) . text as * const _ as usize }
                , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( alias ) , "::" ,
                stringify ! ( text ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const alias ) ) . inuse as * const _ as usize }
                , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( alias ) , "::" ,
                stringify ! ( inuse ) ));
}
impl Clone for alias {
    fn clone(&self) -> Self { *self }
}
/**************************/
pub type Alias = *mut alias;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct asgment {
    pub node: linknode,
    pub name: *mut ::std::os::raw::c_char,
    pub is_array: ::std::os::raw::c_int,
    pub value: asgment__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct asgment__bindgen_ty_1 {
    pub scalar: __BindgenUnionField<*mut ::std::os::raw::c_char>,
    pub array: __BindgenUnionField<LinkList>,
    pub bindgen_union_field: u64,
}
#[test]
fn bindgen_test_layout_asgment__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<asgment__bindgen_ty_1>() , 8usize ,
               concat ! ( "Size of: " , stringify ! ( asgment__bindgen_ty_1 )
               ));
    assert_eq! (::std::mem::align_of::<asgment__bindgen_ty_1>() , 8usize ,
                concat ! (
                "Alignment of " , stringify ! ( asgment__bindgen_ty_1 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const asgment__bindgen_ty_1 ) ) . scalar as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( asgment__bindgen_ty_1 )
                , "::" , stringify ! ( scalar ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const asgment__bindgen_ty_1 ) ) . array as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( asgment__bindgen_ty_1 )
                , "::" , stringify ! ( array ) ));
}
impl Clone for asgment__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_asgment() {
    assert_eq!(::std::mem::size_of::<asgment>() , 48usize , concat ! (
               "Size of: " , stringify ! ( asgment ) ));
    assert_eq! (::std::mem::align_of::<asgment>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( asgment ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const asgment ) ) . node as * const _ as usize
                } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( asgment ) , "::" ,
                stringify ! ( node ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const asgment ) ) . name as * const _ as usize
                } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( asgment ) , "::" ,
                stringify ! ( name ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const asgment ) ) . is_array as * const _ as
                usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( asgment ) , "::" ,
                stringify ! ( is_array ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const asgment ) ) . value as * const _ as usize
                } , 40usize , concat ! (
                "Alignment of field: " , stringify ! ( asgment ) , "::" ,
                stringify ! ( value ) ));
}
impl Clone for asgment {
    fn clone(&self) -> Self { *self }
}
pub type Asgment = *mut asgment;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct builtin {
    pub node: hashnode,
    pub handlerfunc: HandlerFunc,
    pub minargs: ::std::os::raw::c_int,
    pub maxargs: ::std::os::raw::c_int,
    pub funcid: ::std::os::raw::c_int,
    pub optstr: *mut ::std::os::raw::c_char,
    pub defopts: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_builtin() {
    assert_eq!(::std::mem::size_of::<builtin>() , 64usize , concat ! (
               "Size of: " , stringify ! ( builtin ) ));
    assert_eq! (::std::mem::align_of::<builtin>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( builtin ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const builtin ) ) . node as * const _ as usize
                } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( builtin ) , "::" ,
                stringify ! ( node ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const builtin ) ) . handlerfunc as * const _ as
                usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( builtin ) , "::" ,
                stringify ! ( handlerfunc ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const builtin ) ) . minargs as * const _ as
                usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( builtin ) , "::" ,
                stringify ! ( minargs ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const builtin ) ) . maxargs as * const _ as
                usize } , 36usize , concat ! (
                "Alignment of field: " , stringify ! ( builtin ) , "::" ,
                stringify ! ( maxargs ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const builtin ) ) . funcid as * const _ as
                usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! ( builtin ) , "::" ,
                stringify ! ( funcid ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const builtin ) ) . optstr as * const _ as
                usize } , 48usize , concat ! (
                "Alignment of field: " , stringify ! ( builtin ) , "::" ,
                stringify ! ( optstr ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const builtin ) ) . defopts as * const _ as
                usize } , 56usize , concat ! (
                "Alignment of field: " , stringify ! ( builtin ) , "::" ,
                stringify ! ( defopts ) ));
}
impl Clone for builtin {
    fn clone(&self) -> Self { *self }
}
pub type Builtin = *mut builtin;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct cmdnam {
    pub node: hashnode,
    pub u: cmdnam__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct cmdnam__bindgen_ty_1 {
    pub name: __BindgenUnionField<*mut *mut ::std::os::raw::c_char>,
    pub cmd: __BindgenUnionField<*mut ::std::os::raw::c_char>,
    pub bindgen_union_field: u64,
}
#[test]
fn bindgen_test_layout_cmdnam__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<cmdnam__bindgen_ty_1>() , 8usize , concat
               ! ( "Size of: " , stringify ! ( cmdnam__bindgen_ty_1 ) ));
    assert_eq! (::std::mem::align_of::<cmdnam__bindgen_ty_1>() , 8usize ,
                concat ! (
                "Alignment of " , stringify ! ( cmdnam__bindgen_ty_1 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const cmdnam__bindgen_ty_1 ) ) . name as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( cmdnam__bindgen_ty_1 )
                , "::" , stringify ! ( name ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const cmdnam__bindgen_ty_1 ) ) . cmd as * const
                _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( cmdnam__bindgen_ty_1 )
                , "::" , stringify ! ( cmd ) ));
}
impl Clone for cmdnam__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_cmdnam() {
    assert_eq!(::std::mem::size_of::<cmdnam>() , 32usize , concat ! (
               "Size of: " , stringify ! ( cmdnam ) ));
    assert_eq! (::std::mem::align_of::<cmdnam>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( cmdnam ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const cmdnam ) ) . node as * const _ as usize }
                , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( cmdnam ) , "::" ,
                stringify ! ( node ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const cmdnam ) ) . u as * const _ as usize } ,
                24usize , concat ! (
                "Alignment of field: " , stringify ! ( cmdnam ) , "::" ,
                stringify ! ( u ) ));
}
impl Clone for cmdnam {
    fn clone(&self) -> Self { *self }
}
pub type Cmdnam = *mut cmdnam;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct complist {
    _unused: [u8; 0],
}
pub type Complist = *mut complist;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct conddef {
    pub next: Conddef,
    pub name: *mut ::std::os::raw::c_char,
    pub flags: ::std::os::raw::c_int,
    pub handler: CondHandler,
    pub min: ::std::os::raw::c_int,
    pub max: ::std::os::raw::c_int,
    pub condid: ::std::os::raw::c_int,
    pub module: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_conddef() {
    assert_eq!(::std::mem::size_of::<conddef>() , 56usize , concat ! (
               "Size of: " , stringify ! ( conddef ) ));
    assert_eq! (::std::mem::align_of::<conddef>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( conddef ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const conddef ) ) . next as * const _ as usize
                } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( conddef ) , "::" ,
                stringify ! ( next ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const conddef ) ) . name as * const _ as usize
                } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( conddef ) , "::" ,
                stringify ! ( name ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const conddef ) ) . flags as * const _ as usize
                } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( conddef ) , "::" ,
                stringify ! ( flags ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const conddef ) ) . handler as * const _ as
                usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( conddef ) , "::" ,
                stringify ! ( handler ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const conddef ) ) . min as * const _ as usize }
                , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( conddef ) , "::" ,
                stringify ! ( min ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const conddef ) ) . max as * const _ as usize }
                , 36usize , concat ! (
                "Alignment of field: " , stringify ! ( conddef ) , "::" ,
                stringify ! ( max ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const conddef ) ) . condid as * const _ as
                usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! ( conddef ) , "::" ,
                stringify ! ( condid ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const conddef ) ) . module as * const _ as
                usize } , 48usize , concat ! (
                "Alignment of field: " , stringify ! ( conddef ) , "::" ,
                stringify ! ( module ) ));
}
impl Clone for conddef {
    fn clone(&self) -> Self { *self }
}
pub type Conddef = *mut conddef;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct dirsav {
    pub dirfd: ::std::os::raw::c_int,
    pub level: ::std::os::raw::c_int,
    pub dirname: *mut ::std::os::raw::c_char,
    pub dev: dev_t,
    pub ino: ino_t,
}
#[test]
fn bindgen_test_layout_dirsav() {
    assert_eq!(::std::mem::size_of::<dirsav>() , 32usize , concat ! (
               "Size of: " , stringify ! ( dirsav ) ));
    assert_eq! (::std::mem::align_of::<dirsav>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( dirsav ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const dirsav ) ) . dirfd as * const _ as usize
                } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( dirsav ) , "::" ,
                stringify ! ( dirfd ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const dirsav ) ) . level as * const _ as usize
                } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( dirsav ) , "::" ,
                stringify ! ( level ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const dirsav ) ) . dirname as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( dirsav ) , "::" ,
                stringify ! ( dirname ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const dirsav ) ) . dev as * const _ as usize }
                , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( dirsav ) , "::" ,
                stringify ! ( dev ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const dirsav ) ) . ino as * const _ as usize }
                , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( dirsav ) , "::" ,
                stringify ! ( ino ) ));
}
impl Clone for dirsav {
    fn clone(&self) -> Self { *self }
}
pub type Dirsav = *mut dirsav;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct emulation_options {
    pub emulation: ::std::os::raw::c_int,
    pub n_on_opts: ::std::os::raw::c_int,
    pub n_off_opts: ::std::os::raw::c_int,
    pub on_opts: *mut OptIndex,
    pub off_opts: *mut OptIndex,
}
#[test]
fn bindgen_test_layout_emulation_options() {
    assert_eq!(::std::mem::size_of::<emulation_options>() , 32usize , concat !
               ( "Size of: " , stringify ! ( emulation_options ) ));
    assert_eq! (::std::mem::align_of::<emulation_options>() , 8usize , concat
                ! ( "Alignment of " , stringify ! ( emulation_options ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const emulation_options ) ) . emulation as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( emulation_options ) ,
                "::" , stringify ! ( emulation ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const emulation_options ) ) . n_on_opts as *
                const _ as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( emulation_options ) ,
                "::" , stringify ! ( n_on_opts ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const emulation_options ) ) . n_off_opts as *
                const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( emulation_options ) ,
                "::" , stringify ! ( n_off_opts ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const emulation_options ) ) . on_opts as *
                const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( emulation_options ) ,
                "::" , stringify ! ( on_opts ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const emulation_options ) ) . off_opts as *
                const _ as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( emulation_options ) ,
                "::" , stringify ! ( off_opts ) ));
}
impl Clone for emulation_options {
    fn clone(&self) -> Self { *self }
}
pub type Emulation_options = *mut emulation_options;
/**
 * Parameters passed to execcmd().
 * These are not opaque --- they are also used by the pipeline manager.
 */
#[repr(C)]
#[derive(Debug, Copy)]
pub struct execcmd_params {
    pub args: LinkList,
    pub redir: LinkList,
    pub beg: Wordcode,
    pub varspc: Wordcode,
    pub assignspc: Wordcode,
    pub type_: ::std::os::raw::c_int,
    pub postassigns: ::std::os::raw::c_int,
    pub htok: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_execcmd_params() {
    assert_eq!(::std::mem::size_of::<execcmd_params>() , 56usize , concat ! (
               "Size of: " , stringify ! ( execcmd_params ) ));
    assert_eq! (::std::mem::align_of::<execcmd_params>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( execcmd_params ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const execcmd_params ) ) . args as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( execcmd_params ) , "::"
                , stringify ! ( args ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const execcmd_params ) ) . redir as * const _
                as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( execcmd_params ) , "::"
                , stringify ! ( redir ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const execcmd_params ) ) . beg as * const _ as
                usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( execcmd_params ) , "::"
                , stringify ! ( beg ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const execcmd_params ) ) . varspc as * const _
                as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( execcmd_params ) , "::"
                , stringify ! ( varspc ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const execcmd_params ) ) . assignspc as * const
                _ as usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( execcmd_params ) , "::"
                , stringify ! ( assignspc ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const execcmd_params ) ) . type_ as * const _
                as usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! ( execcmd_params ) , "::"
                , stringify ! ( type_ ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const execcmd_params ) ) . postassigns as *
                const _ as usize } , 44usize , concat ! (
                "Alignment of field: " , stringify ! ( execcmd_params ) , "::"
                , stringify ! ( postassigns ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const execcmd_params ) ) . htok as * const _ as
                usize } , 48usize , concat ! (
                "Alignment of field: " , stringify ! ( execcmd_params ) , "::"
                , stringify ! ( htok ) ));
}
impl Clone for execcmd_params {
    fn clone(&self) -> Self { *self }
}
pub type Execcmd_params = *mut execcmd_params;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct features {
    pub bn_list: Builtin,
    pub bn_size: ::std::os::raw::c_int,
    pub cd_list: Conddef,
    pub cd_size: ::std::os::raw::c_int,
    pub mf_list: MathFunc,
    pub mf_size: ::std::os::raw::c_int,
    pub pd_list: Paramdef,
    pub pd_size: ::std::os::raw::c_int,
    pub n_abstract: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_features() {
    assert_eq!(::std::mem::size_of::<features>() , 64usize , concat ! (
               "Size of: " , stringify ! ( features ) ));
    assert_eq! (::std::mem::align_of::<features>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( features ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const features ) ) . bn_list as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( features ) , "::" ,
                stringify ! ( bn_list ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const features ) ) . bn_size as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( features ) , "::" ,
                stringify ! ( bn_size ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const features ) ) . cd_list as * const _ as
                usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( features ) , "::" ,
                stringify ! ( cd_list ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const features ) ) . cd_size as * const _ as
                usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( features ) , "::" ,
                stringify ! ( cd_size ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const features ) ) . mf_list as * const _ as
                usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( features ) , "::" ,
                stringify ! ( mf_list ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const features ) ) . mf_size as * const _ as
                usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! ( features ) , "::" ,
                stringify ! ( mf_size ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const features ) ) . pd_list as * const _ as
                usize } , 48usize , concat ! (
                "Alignment of field: " , stringify ! ( features ) , "::" ,
                stringify ! ( pd_list ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const features ) ) . pd_size as * const _ as
                usize } , 56usize , concat ! (
                "Alignment of field: " , stringify ! ( features ) , "::" ,
                stringify ! ( pd_size ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const features ) ) . n_abstract as * const _ as
                usize } , 60usize , concat ! (
                "Alignment of field: " , stringify ! ( features ) , "::" ,
                stringify ! ( n_abstract ) ));
}
impl Clone for features {
    fn clone(&self) -> Self { *self }
}
pub type Features = *mut features;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct feature_enables {
    pub str: *mut ::std::os::raw::c_char,
    pub pat: Patprog,
}
#[test]
fn bindgen_test_layout_feature_enables() {
    assert_eq!(::std::mem::size_of::<feature_enables>() , 16usize , concat ! (
               "Size of: " , stringify ! ( feature_enables ) ));
    assert_eq! (::std::mem::align_of::<feature_enables>() , 8usize , concat !
                ( "Alignment of " , stringify ! ( feature_enables ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const feature_enables ) ) . str as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( feature_enables ) ,
                "::" , stringify ! ( str ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const feature_enables ) ) . pat as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( feature_enables ) ,
                "::" , stringify ! ( pat ) ));
}
impl Clone for feature_enables {
    fn clone(&self) -> Self { *self }
}
pub type Feature_enables = *mut feature_enables;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct funcstack {
    pub prev: Funcstack,
    pub name: *mut ::std::os::raw::c_char,
    pub filename: *mut ::std::os::raw::c_char,
    pub caller: *mut ::std::os::raw::c_char,
    pub flineno: zlong,
    pub lineno: zlong,
    pub tp: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_funcstack() {
    assert_eq!(::std::mem::size_of::<funcstack>() , 56usize , concat ! (
               "Size of: " , stringify ! ( funcstack ) ));
    assert_eq! (::std::mem::align_of::<funcstack>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( funcstack ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const funcstack ) ) . prev as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( funcstack ) , "::" ,
                stringify ! ( prev ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const funcstack ) ) . name as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( funcstack ) , "::" ,
                stringify ! ( name ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const funcstack ) ) . filename as * const _ as
                usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( funcstack ) , "::" ,
                stringify ! ( filename ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const funcstack ) ) . caller as * const _ as
                usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( funcstack ) , "::" ,
                stringify ! ( caller ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const funcstack ) ) . flineno as * const _ as
                usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( funcstack ) , "::" ,
                stringify ! ( flineno ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const funcstack ) ) . lineno as * const _ as
                usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! ( funcstack ) , "::" ,
                stringify ! ( lineno ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const funcstack ) ) . tp as * const _ as usize
                } , 48usize , concat ! (
                "Alignment of field: " , stringify ! ( funcstack ) , "::" ,
                stringify ! ( tp ) ));
}
impl Clone for funcstack {
    fn clone(&self) -> Self { *self }
}
pub type Funcstack = *mut funcstack;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct funcwrap {
    pub next: FuncWrap,
    pub flags: ::std::os::raw::c_int,
    pub handler: WrapFunc,
    pub module: Module,
}
#[test]
fn bindgen_test_layout_funcwrap() {
    assert_eq!(::std::mem::size_of::<funcwrap>() , 32usize , concat ! (
               "Size of: " , stringify ! ( funcwrap ) ));
    assert_eq! (::std::mem::align_of::<funcwrap>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( funcwrap ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const funcwrap ) ) . next as * const _ as usize
                } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( funcwrap ) , "::" ,
                stringify ! ( next ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const funcwrap ) ) . flags as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( funcwrap ) , "::" ,
                stringify ! ( flags ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const funcwrap ) ) . handler as * const _ as
                usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( funcwrap ) , "::" ,
                stringify ! ( handler ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const funcwrap ) ) . module as * const _ as
                usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( funcwrap ) , "::" ,
                stringify ! ( module ) ));
}
impl Clone for funcwrap {
    fn clone(&self) -> Self { *self }
}
pub type FuncWrap = *mut funcwrap;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct hashnode {
    pub next: HashNode,
    pub nam: *mut ::std::os::raw::c_char,
    pub flags: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_hashnode() {
    assert_eq!(::std::mem::size_of::<hashnode>() , 24usize , concat ! (
               "Size of: " , stringify ! ( hashnode ) ));
    assert_eq! (::std::mem::align_of::<hashnode>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( hashnode ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const hashnode ) ) . next as * const _ as usize
                } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( hashnode ) , "::" ,
                stringify ! ( next ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const hashnode ) ) . nam as * const _ as usize
                } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( hashnode ) , "::" ,
                stringify ! ( nam ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const hashnode ) ) . flags as * const _ as
                usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( hashnode ) , "::" ,
                stringify ! ( flags ) ));
}
impl Clone for hashnode {
    fn clone(&self) -> Self { *self }
}
pub type HashNode = *mut hashnode;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct hashtable {
    pub hsize: ::std::os::raw::c_int,
    pub ct: ::std::os::raw::c_int,
    pub nodes: *mut HashNode,
    pub tmpdata: *mut ::std::os::raw::c_void,
    pub hash: HashFunc,
    pub emptytable: TableFunc,
    pub filltable: TableFunc,
    pub cmpnodes: CompareFunc,
    pub addnode: AddNodeFunc,
    pub getnode: GetNodeFunc,
    pub getnode2: GetNodeFunc,
    pub removenode: RemoveNodeFunc,
    pub disablenode: ScanFunc,
    pub enablenode: ScanFunc,
    pub freenode: FreeNodeFunc,
    pub printnode: ScanFunc,
    pub scantab: ScanTabFunc,
}
#[test]
fn bindgen_test_layout_hashtable() {
    assert_eq!(::std::mem::size_of::<hashtable>() , 128usize , concat ! (
               "Size of: " , stringify ! ( hashtable ) ));
    assert_eq! (::std::mem::align_of::<hashtable>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( hashtable ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const hashtable ) ) . hsize as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( hashtable ) , "::" ,
                stringify ! ( hsize ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const hashtable ) ) . ct as * const _ as usize
                } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( hashtable ) , "::" ,
                stringify ! ( ct ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const hashtable ) ) . nodes as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( hashtable ) , "::" ,
                stringify ! ( nodes ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const hashtable ) ) . tmpdata as * const _ as
                usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( hashtable ) , "::" ,
                stringify ! ( tmpdata ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const hashtable ) ) . hash as * const _ as
                usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( hashtable ) , "::" ,
                stringify ! ( hash ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const hashtable ) ) . emptytable as * const _
                as usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( hashtable ) , "::" ,
                stringify ! ( emptytable ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const hashtable ) ) . filltable as * const _ as
                usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! ( hashtable ) , "::" ,
                stringify ! ( filltable ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const hashtable ) ) . cmpnodes as * const _ as
                usize } , 48usize , concat ! (
                "Alignment of field: " , stringify ! ( hashtable ) , "::" ,
                stringify ! ( cmpnodes ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const hashtable ) ) . addnode as * const _ as
                usize } , 56usize , concat ! (
                "Alignment of field: " , stringify ! ( hashtable ) , "::" ,
                stringify ! ( addnode ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const hashtable ) ) . getnode as * const _ as
                usize } , 64usize , concat ! (
                "Alignment of field: " , stringify ! ( hashtable ) , "::" ,
                stringify ! ( getnode ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const hashtable ) ) . getnode2 as * const _ as
                usize } , 72usize , concat ! (
                "Alignment of field: " , stringify ! ( hashtable ) , "::" ,
                stringify ! ( getnode2 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const hashtable ) ) . removenode as * const _
                as usize } , 80usize , concat ! (
                "Alignment of field: " , stringify ! ( hashtable ) , "::" ,
                stringify ! ( removenode ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const hashtable ) ) . disablenode as * const _
                as usize } , 88usize , concat ! (
                "Alignment of field: " , stringify ! ( hashtable ) , "::" ,
                stringify ! ( disablenode ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const hashtable ) ) . enablenode as * const _
                as usize } , 96usize , concat ! (
                "Alignment of field: " , stringify ! ( hashtable ) , "::" ,
                stringify ! ( enablenode ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const hashtable ) ) . freenode as * const _ as
                usize } , 104usize , concat ! (
                "Alignment of field: " , stringify ! ( hashtable ) , "::" ,
                stringify ! ( freenode ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const hashtable ) ) . printnode as * const _ as
                usize } , 112usize , concat ! (
                "Alignment of field: " , stringify ! ( hashtable ) , "::" ,
                stringify ! ( printnode ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const hashtable ) ) . scantab as * const _ as
                usize } , 120usize , concat ! (
                "Alignment of field: " , stringify ! ( hashtable ) , "::" ,
                stringify ! ( scantab ) ));
}
impl Clone for hashtable {
    fn clone(&self) -> Self { *self }
}
pub type HashTable = *mut hashtable;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct heap {
    pub next: *mut heap,
    pub size: usize,
    pub used: usize,
    pub sp: *mut heapstack,
}
#[test]
fn bindgen_test_layout_heap() {
    assert_eq!(::std::mem::size_of::<heap>() , 32usize , concat ! (
               "Size of: " , stringify ! ( heap ) ));
    assert_eq! (::std::mem::align_of::<heap>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( heap ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const heap ) ) . next as * const _ as usize } ,
                0usize , concat ! (
                "Alignment of field: " , stringify ! ( heap ) , "::" ,
                stringify ! ( next ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const heap ) ) . size as * const _ as usize } ,
                8usize , concat ! (
                "Alignment of field: " , stringify ! ( heap ) , "::" ,
                stringify ! ( size ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const heap ) ) . used as * const _ as usize } ,
                16usize , concat ! (
                "Alignment of field: " , stringify ! ( heap ) , "::" ,
                stringify ! ( used ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const heap ) ) . sp as * const _ as usize } ,
                24usize , concat ! (
                "Alignment of field: " , stringify ! ( heap ) , "::" ,
                stringify ! ( sp ) ));
}
impl Clone for heap {
    fn clone(&self) -> Self { *self }
}
pub type Heap = *mut heap;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct heapstack {
    pub next: *mut heapstack,
    pub used: usize,
}
#[test]
fn bindgen_test_layout_heapstack() {
    assert_eq!(::std::mem::size_of::<heapstack>() , 16usize , concat ! (
               "Size of: " , stringify ! ( heapstack ) ));
    assert_eq! (::std::mem::align_of::<heapstack>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( heapstack ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const heapstack ) ) . next as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( heapstack ) , "::" ,
                stringify ! ( next ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const heapstack ) ) . used as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( heapstack ) , "::" ,
                stringify ! ( used ) ));
}
impl Clone for heapstack {
    fn clone(&self) -> Self { *self }
}
pub type Heapstack = *mut heapstack;
/***********************************/
#[repr(C)]
#[derive(Debug, Copy)]
pub struct histent {
    pub node: hashnode,
    pub up: Histent,
    pub down: Histent,
    pub zle_text: *mut ::std::os::raw::c_char,
    pub stim: time_t,
    pub ftim: time_t,
    pub words: *mut ::std::os::raw::c_short,
    pub nwords: ::std::os::raw::c_int,
    pub histnum: zlong,
}
#[test]
fn bindgen_test_layout_histent() {
    assert_eq!(::std::mem::size_of::<histent>() , 88usize , concat ! (
               "Size of: " , stringify ! ( histent ) ));
    assert_eq! (::std::mem::align_of::<histent>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( histent ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const histent ) ) . node as * const _ as usize
                } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( histent ) , "::" ,
                stringify ! ( node ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const histent ) ) . up as * const _ as usize }
                , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( histent ) , "::" ,
                stringify ! ( up ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const histent ) ) . down as * const _ as usize
                } , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( histent ) , "::" ,
                stringify ! ( down ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const histent ) ) . zle_text as * const _ as
                usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! ( histent ) , "::" ,
                stringify ! ( zle_text ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const histent ) ) . stim as * const _ as usize
                } , 48usize , concat ! (
                "Alignment of field: " , stringify ! ( histent ) , "::" ,
                stringify ! ( stim ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const histent ) ) . ftim as * const _ as usize
                } , 56usize , concat ! (
                "Alignment of field: " , stringify ! ( histent ) , "::" ,
                stringify ! ( ftim ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const histent ) ) . words as * const _ as usize
                } , 64usize , concat ! (
                "Alignment of field: " , stringify ! ( histent ) , "::" ,
                stringify ! ( words ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const histent ) ) . nwords as * const _ as
                usize } , 72usize , concat ! (
                "Alignment of field: " , stringify ! ( histent ) , "::" ,
                stringify ! ( nwords ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const histent ) ) . histnum as * const _ as
                usize } , 80usize , concat ! (
                "Alignment of field: " , stringify ! ( histent ) , "::" ,
                stringify ! ( histnum ) ));
}
impl Clone for histent {
    fn clone(&self) -> Self { *self }
}
pub type Histent = *mut histent;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct hookdef {
    pub next: Hookdef,
    pub name: *mut ::std::os::raw::c_char,
    pub def: Hookfn,
    pub flags: ::std::os::raw::c_int,
    pub funcs: LinkList,
}
#[test]
fn bindgen_test_layout_hookdef() {
    assert_eq!(::std::mem::size_of::<hookdef>() , 40usize , concat ! (
               "Size of: " , stringify ! ( hookdef ) ));
    assert_eq! (::std::mem::align_of::<hookdef>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( hookdef ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const hookdef ) ) . next as * const _ as usize
                } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( hookdef ) , "::" ,
                stringify ! ( next ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const hookdef ) ) . name as * const _ as usize
                } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( hookdef ) , "::" ,
                stringify ! ( name ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const hookdef ) ) . def as * const _ as usize }
                , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( hookdef ) , "::" ,
                stringify ! ( def ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const hookdef ) ) . flags as * const _ as usize
                } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( hookdef ) , "::" ,
                stringify ! ( flags ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const hookdef ) ) . funcs as * const _ as usize
                } , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( hookdef ) , "::" ,
                stringify ! ( funcs ) ));
}
impl Clone for hookdef {
    fn clone(&self) -> Self { *self }
}
pub type Hookdef = *mut hookdef;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct imatchdata {
    pub mstr: *mut ::std::os::raw::c_char,
    pub mlen: ::std::os::raw::c_int,
    pub ustr: *mut ::std::os::raw::c_char,
    pub ulen: ::std::os::raw::c_int,
    pub flags: ::std::os::raw::c_int,
    pub replstr: *mut ::std::os::raw::c_char,
    pub repllist: LinkList,
}
#[test]
fn bindgen_test_layout_imatchdata() {
    assert_eq!(::std::mem::size_of::<imatchdata>() , 48usize , concat ! (
               "Size of: " , stringify ! ( imatchdata ) ));
    assert_eq! (::std::mem::align_of::<imatchdata>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( imatchdata ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const imatchdata ) ) . mstr as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( imatchdata ) , "::" ,
                stringify ! ( mstr ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const imatchdata ) ) . mlen as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( imatchdata ) , "::" ,
                stringify ! ( mlen ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const imatchdata ) ) . ustr as * const _ as
                usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( imatchdata ) , "::" ,
                stringify ! ( ustr ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const imatchdata ) ) . ulen as * const _ as
                usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( imatchdata ) , "::" ,
                stringify ! ( ulen ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const imatchdata ) ) . flags as * const _ as
                usize } , 28usize , concat ! (
                "Alignment of field: " , stringify ! ( imatchdata ) , "::" ,
                stringify ! ( flags ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const imatchdata ) ) . replstr as * const _ as
                usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( imatchdata ) , "::" ,
                stringify ! ( replstr ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const imatchdata ) ) . repllist as * const _ as
                usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! ( imatchdata ) , "::" ,
                stringify ! ( repllist ) ));
}
impl Clone for imatchdata {
    fn clone(&self) -> Self { *self }
}
pub type Imatchdata = *mut imatchdata;
/********************************************/
#[repr(C)]
#[derive(Debug, Copy)]
pub struct jobfile {
    pub u: jobfile__bindgen_ty_1,
    pub is_fd: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct jobfile__bindgen_ty_1 {
    pub name: __BindgenUnionField<*mut ::std::os::raw::c_char>,
    pub fd: __BindgenUnionField<::std::os::raw::c_int>,
    pub bindgen_union_field: u64,
}
#[test]
fn bindgen_test_layout_jobfile__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<jobfile__bindgen_ty_1>() , 8usize ,
               concat ! ( "Size of: " , stringify ! ( jobfile__bindgen_ty_1 )
               ));
    assert_eq! (::std::mem::align_of::<jobfile__bindgen_ty_1>() , 8usize ,
                concat ! (
                "Alignment of " , stringify ! ( jobfile__bindgen_ty_1 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const jobfile__bindgen_ty_1 ) ) . name as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( jobfile__bindgen_ty_1 )
                , "::" , stringify ! ( name ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const jobfile__bindgen_ty_1 ) ) . fd as * const
                _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( jobfile__bindgen_ty_1 )
                , "::" , stringify ! ( fd ) ));
}
impl Clone for jobfile__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_jobfile() {
    assert_eq!(::std::mem::size_of::<jobfile>() , 16usize , concat ! (
               "Size of: " , stringify ! ( jobfile ) ));
    assert_eq! (::std::mem::align_of::<jobfile>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( jobfile ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const jobfile ) ) . u as * const _ as usize } ,
                0usize , concat ! (
                "Alignment of field: " , stringify ! ( jobfile ) , "::" ,
                stringify ! ( u ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const jobfile ) ) . is_fd as * const _ as usize
                } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( jobfile ) , "::" ,
                stringify ! ( is_fd ) ));
}
impl Clone for jobfile {
    fn clone(&self) -> Self { *self }
}
pub type Jobfile = *mut jobfile;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct job {
    pub gleader: pid_t,
    pub other: pid_t,
    pub stat: ::std::os::raw::c_int,
    pub pwd: *mut ::std::os::raw::c_char,
    pub procs: *mut process,
    pub auxprocs: *mut process,
    pub filelist: LinkList,
    pub stty_in_env: ::std::os::raw::c_int,
    pub ty: *mut ttyinfo,
}
#[test]
fn bindgen_test_layout_job() {
    assert_eq!(::std::mem::size_of::<job>() , 64usize , concat ! (
               "Size of: " , stringify ! ( job ) ));
    assert_eq! (::std::mem::align_of::<job>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( job ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const job ) ) . gleader as * const _ as usize }
                , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( job ) , "::" ,
                stringify ! ( gleader ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const job ) ) . other as * const _ as usize } ,
                4usize , concat ! (
                "Alignment of field: " , stringify ! ( job ) , "::" ,
                stringify ! ( other ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const job ) ) . stat as * const _ as usize } ,
                8usize , concat ! (
                "Alignment of field: " , stringify ! ( job ) , "::" ,
                stringify ! ( stat ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const job ) ) . pwd as * const _ as usize } ,
                16usize , concat ! (
                "Alignment of field: " , stringify ! ( job ) , "::" ,
                stringify ! ( pwd ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const job ) ) . procs as * const _ as usize } ,
                24usize , concat ! (
                "Alignment of field: " , stringify ! ( job ) , "::" ,
                stringify ! ( procs ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const job ) ) . auxprocs as * const _ as usize
                } , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( job ) , "::" ,
                stringify ! ( auxprocs ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const job ) ) . filelist as * const _ as usize
                } , 40usize , concat ! (
                "Alignment of field: " , stringify ! ( job ) , "::" ,
                stringify ! ( filelist ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const job ) ) . stty_in_env as * const _ as
                usize } , 48usize , concat ! (
                "Alignment of field: " , stringify ! ( job ) , "::" ,
                stringify ! ( stty_in_env ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const job ) ) . ty as * const _ as usize } ,
                56usize , concat ! (
                "Alignment of field: " , stringify ! ( job ) , "::" ,
                stringify ! ( ty ) ));
}
impl Clone for job {
    fn clone(&self) -> Self { *self }
}
pub type Job = *mut job;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct linkedmod {
    pub name: *mut ::std::os::raw::c_char,
    pub setup: Module_void_func,
    pub features: Module_features_func,
    pub enables: Module_enables_func,
    pub boot: Module_void_func,
    pub cleanup: Module_void_func,
    pub finish: Module_void_func,
}
#[test]
fn bindgen_test_layout_linkedmod() {
    assert_eq!(::std::mem::size_of::<linkedmod>() , 56usize , concat ! (
               "Size of: " , stringify ! ( linkedmod ) ));
    assert_eq! (::std::mem::align_of::<linkedmod>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( linkedmod ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const linkedmod ) ) . name as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( linkedmod ) , "::" ,
                stringify ! ( name ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const linkedmod ) ) . setup as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( linkedmod ) , "::" ,
                stringify ! ( setup ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const linkedmod ) ) . features as * const _ as
                usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( linkedmod ) , "::" ,
                stringify ! ( features ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const linkedmod ) ) . enables as * const _ as
                usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( linkedmod ) , "::" ,
                stringify ! ( enables ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const linkedmod ) ) . boot as * const _ as
                usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( linkedmod ) , "::" ,
                stringify ! ( boot ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const linkedmod ) ) . cleanup as * const _ as
                usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! ( linkedmod ) , "::" ,
                stringify ! ( cleanup ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const linkedmod ) ) . finish as * const _ as
                usize } , 48usize , concat ! (
                "Alignment of field: " , stringify ! ( linkedmod ) , "::" ,
                stringify ! ( finish ) ));
}
impl Clone for linkedmod {
    fn clone(&self) -> Self { *self }
}
pub type Linkedmod = *mut linkedmod;
/********************************/
#[repr(C)]
#[derive(Debug, Copy)]
pub struct linknode {
    pub next: LinkNode,
    pub prev: LinkNode,
    pub dat: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_linknode() {
    assert_eq!(::std::mem::size_of::<linknode>() , 24usize , concat ! (
               "Size of: " , stringify ! ( linknode ) ));
    assert_eq! (::std::mem::align_of::<linknode>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( linknode ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const linknode ) ) . next as * const _ as usize
                } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( linknode ) , "::" ,
                stringify ! ( next ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const linknode ) ) . prev as * const _ as usize
                } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( linknode ) , "::" ,
                stringify ! ( prev ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const linknode ) ) . dat as * const _ as usize
                } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( linknode ) , "::" ,
                stringify ! ( dat ) ));
}
impl Clone for linknode {
    fn clone(&self) -> Self { *self }
}
pub type LinkNode = *mut linknode;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct linkroot {
    pub list: __BindgenUnionField<linklist>,
    pub node: __BindgenUnionField<linknode>,
    pub bindgen_union_field: [u64; 3usize],
}
#[test]
fn bindgen_test_layout_linkroot() {
    assert_eq!(::std::mem::size_of::<linkroot>() , 24usize , concat ! (
               "Size of: " , stringify ! ( linkroot ) ));
    assert_eq! (::std::mem::align_of::<linkroot>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( linkroot ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const linkroot ) ) . list as * const _ as usize
                } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( linkroot ) , "::" ,
                stringify ! ( list ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const linkroot ) ) . node as * const _ as usize
                } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( linkroot ) , "::" ,
                stringify ! ( node ) ));
}
impl Clone for linkroot {
    fn clone(&self) -> Self { *self }
}
pub type LinkList = *mut linkroot;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct module {
    pub node: hashnode,
    pub u: module__bindgen_ty_1,
    pub autoloads: LinkList,
    pub deps: LinkList,
    pub wrapper: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct module__bindgen_ty_1 {
    pub handle: __BindgenUnionField<*mut ::std::os::raw::c_void>,
    pub linked: __BindgenUnionField<Linkedmod>,
    pub alias: __BindgenUnionField<*mut ::std::os::raw::c_char>,
    pub bindgen_union_field: u64,
}
#[test]
fn bindgen_test_layout_module__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<module__bindgen_ty_1>() , 8usize , concat
               ! ( "Size of: " , stringify ! ( module__bindgen_ty_1 ) ));
    assert_eq! (::std::mem::align_of::<module__bindgen_ty_1>() , 8usize ,
                concat ! (
                "Alignment of " , stringify ! ( module__bindgen_ty_1 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const module__bindgen_ty_1 ) ) . handle as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( module__bindgen_ty_1 )
                , "::" , stringify ! ( handle ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const module__bindgen_ty_1 ) ) . linked as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( module__bindgen_ty_1 )
                , "::" , stringify ! ( linked ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const module__bindgen_ty_1 ) ) . alias as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( module__bindgen_ty_1 )
                , "::" , stringify ! ( alias ) ));
}
impl Clone for module__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_module() {
    assert_eq!(::std::mem::size_of::<module>() , 56usize , concat ! (
               "Size of: " , stringify ! ( module ) ));
    assert_eq! (::std::mem::align_of::<module>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( module ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const module ) ) . node as * const _ as usize }
                , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( module ) , "::" ,
                stringify ! ( node ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const module ) ) . u as * const _ as usize } ,
                24usize , concat ! (
                "Alignment of field: " , stringify ! ( module ) , "::" ,
                stringify ! ( u ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const module ) ) . autoloads as * const _ as
                usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( module ) , "::" ,
                stringify ! ( autoloads ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const module ) ) . deps as * const _ as usize }
                , 40usize , concat ! (
                "Alignment of field: " , stringify ! ( module ) , "::" ,
                stringify ! ( deps ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const module ) ) . wrapper as * const _ as
                usize } , 48usize , concat ! (
                "Alignment of field: " , stringify ! ( module ) , "::" ,
                stringify ! ( wrapper ) ));
}
impl Clone for module {
    fn clone(&self) -> Self { *self }
}
pub type Module = *mut module;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct nameddir {
    pub node: hashnode,
    pub dir: *mut ::std::os::raw::c_char,
    pub diff: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_nameddir() {
    assert_eq!(::std::mem::size_of::<nameddir>() , 40usize , concat ! (
               "Size of: " , stringify ! ( nameddir ) ));
    assert_eq! (::std::mem::align_of::<nameddir>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( nameddir ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const nameddir ) ) . node as * const _ as usize
                } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( nameddir ) , "::" ,
                stringify ! ( node ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const nameddir ) ) . dir as * const _ as usize
                } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( nameddir ) , "::" ,
                stringify ! ( dir ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const nameddir ) ) . diff as * const _ as usize
                } , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( nameddir ) , "::" ,
                stringify ! ( diff ) ));
}
impl Clone for nameddir {
    fn clone(&self) -> Self { *self }
}
pub type Nameddir = *mut nameddir;
#[repr(C)]
pub struct options {
    pub ind: [::std::os::raw::c_uchar; 128usize],
    pub args: *mut *mut ::std::os::raw::c_char,
    pub argscount: ::std::os::raw::c_int,
    pub argsalloc: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_options() {
    assert_eq!(::std::mem::size_of::<options>() , 144usize , concat ! (
               "Size of: " , stringify ! ( options ) ));
    assert_eq! (::std::mem::align_of::<options>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( options ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const options ) ) . ind as * const _ as usize }
                , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( options ) , "::" ,
                stringify ! ( ind ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const options ) ) . args as * const _ as usize
                } , 128usize , concat ! (
                "Alignment of field: " , stringify ! ( options ) , "::" ,
                stringify ! ( args ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const options ) ) . argscount as * const _ as
                usize } , 136usize , concat ! (
                "Alignment of field: " , stringify ! ( options ) , "::" ,
                stringify ! ( argscount ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const options ) ) . argsalloc as * const _ as
                usize } , 140usize , concat ! (
                "Alignment of field: " , stringify ! ( options ) , "::" ,
                stringify ! ( argsalloc ) ));
}
pub type Options = *mut options;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct optname {
    pub node: hashnode,
    pub optno: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_optname() {
    assert_eq!(::std::mem::size_of::<optname>() , 32usize , concat ! (
               "Size of: " , stringify ! ( optname ) ));
    assert_eq! (::std::mem::align_of::<optname>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( optname ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const optname ) ) . node as * const _ as usize
                } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( optname ) , "::" ,
                stringify ! ( node ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const optname ) ) . optno as * const _ as usize
                } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( optname ) , "::" ,
                stringify ! ( optno ) ));
}
impl Clone for optname {
    fn clone(&self) -> Self { *self }
}
pub type Optname = *mut optname;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct param {
    pub node: hashnode,
    pub u: param__bindgen_ty_1,
    pub gsu: param__bindgen_ty_2,
    pub base: ::std::os::raw::c_int,
    pub width: ::std::os::raw::c_int,
    pub env: *mut ::std::os::raw::c_char,
    pub ename: *mut ::std::os::raw::c_char,
    pub old: Param,
    pub level: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct param__bindgen_ty_1 {
    pub data: __BindgenUnionField<*mut ::std::os::raw::c_void>,
    pub arr: __BindgenUnionField<*mut *mut ::std::os::raw::c_char>,
    pub str: __BindgenUnionField<*mut ::std::os::raw::c_char>,
    pub val: __BindgenUnionField<zlong>,
    pub valptr: __BindgenUnionField<*mut zlong>,
    pub dval: __BindgenUnionField<f64>,
    pub hash: __BindgenUnionField<HashTable>,
    pub bindgen_union_field: u64,
}
#[test]
fn bindgen_test_layout_param__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<param__bindgen_ty_1>() , 8usize , concat
               ! ( "Size of: " , stringify ! ( param__bindgen_ty_1 ) ));
    assert_eq! (::std::mem::align_of::<param__bindgen_ty_1>() , 8usize ,
                concat ! (
                "Alignment of " , stringify ! ( param__bindgen_ty_1 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const param__bindgen_ty_1 ) ) . data as * const
                _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( param__bindgen_ty_1 ) ,
                "::" , stringify ! ( data ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const param__bindgen_ty_1 ) ) . arr as * const
                _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( param__bindgen_ty_1 ) ,
                "::" , stringify ! ( arr ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const param__bindgen_ty_1 ) ) . str as * const
                _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( param__bindgen_ty_1 ) ,
                "::" , stringify ! ( str ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const param__bindgen_ty_1 ) ) . val as * const
                _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( param__bindgen_ty_1 ) ,
                "::" , stringify ! ( val ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const param__bindgen_ty_1 ) ) . valptr as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( param__bindgen_ty_1 ) ,
                "::" , stringify ! ( valptr ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const param__bindgen_ty_1 ) ) . dval as * const
                _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( param__bindgen_ty_1 ) ,
                "::" , stringify ! ( dval ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const param__bindgen_ty_1 ) ) . hash as * const
                _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( param__bindgen_ty_1 ) ,
                "::" , stringify ! ( hash ) ));
}
impl Clone for param__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct param__bindgen_ty_2 {
    pub s: __BindgenUnionField<GsuScalar>,
    pub i: __BindgenUnionField<GsuInteger>,
    pub f: __BindgenUnionField<GsuFloat>,
    pub a: __BindgenUnionField<GsuArray>,
    pub h: __BindgenUnionField<GsuHash>,
    pub bindgen_union_field: u64,
}
#[test]
fn bindgen_test_layout_param__bindgen_ty_2() {
    assert_eq!(::std::mem::size_of::<param__bindgen_ty_2>() , 8usize , concat
               ! ( "Size of: " , stringify ! ( param__bindgen_ty_2 ) ));
    assert_eq! (::std::mem::align_of::<param__bindgen_ty_2>() , 8usize ,
                concat ! (
                "Alignment of " , stringify ! ( param__bindgen_ty_2 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const param__bindgen_ty_2 ) ) . s as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( param__bindgen_ty_2 ) ,
                "::" , stringify ! ( s ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const param__bindgen_ty_2 ) ) . i as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( param__bindgen_ty_2 ) ,
                "::" , stringify ! ( i ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const param__bindgen_ty_2 ) ) . f as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( param__bindgen_ty_2 ) ,
                "::" , stringify ! ( f ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const param__bindgen_ty_2 ) ) . a as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( param__bindgen_ty_2 ) ,
                "::" , stringify ! ( a ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const param__bindgen_ty_2 ) ) . h as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( param__bindgen_ty_2 ) ,
                "::" , stringify ! ( h ) ));
}
impl Clone for param__bindgen_ty_2 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_param() {
    assert_eq!(::std::mem::size_of::<param>() , 80usize , concat ! (
               "Size of: " , stringify ! ( param ) ));
    assert_eq! (::std::mem::align_of::<param>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( param ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const param ) ) . node as * const _ as usize }
                , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( param ) , "::" ,
                stringify ! ( node ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const param ) ) . u as * const _ as usize } ,
                24usize , concat ! (
                "Alignment of field: " , stringify ! ( param ) , "::" ,
                stringify ! ( u ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const param ) ) . gsu as * const _ as usize } ,
                32usize , concat ! (
                "Alignment of field: " , stringify ! ( param ) , "::" ,
                stringify ! ( gsu ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const param ) ) . base as * const _ as usize }
                , 40usize , concat ! (
                "Alignment of field: " , stringify ! ( param ) , "::" ,
                stringify ! ( base ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const param ) ) . width as * const _ as usize }
                , 44usize , concat ! (
                "Alignment of field: " , stringify ! ( param ) , "::" ,
                stringify ! ( width ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const param ) ) . env as * const _ as usize } ,
                48usize , concat ! (
                "Alignment of field: " , stringify ! ( param ) , "::" ,
                stringify ! ( env ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const param ) ) . ename as * const _ as usize }
                , 56usize , concat ! (
                "Alignment of field: " , stringify ! ( param ) , "::" ,
                stringify ! ( ename ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const param ) ) . old as * const _ as usize } ,
                64usize , concat ! (
                "Alignment of field: " , stringify ! ( param ) , "::" ,
                stringify ! ( old ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const param ) ) . level as * const _ as usize }
                , 72usize , concat ! (
                "Alignment of field: " , stringify ! ( param ) , "::" ,
                stringify ! ( level ) ));
}
impl Clone for param {
    fn clone(&self) -> Self { *self }
}
pub type Param = *mut param;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct paramdef {
    pub name: *mut ::std::os::raw::c_char,
    pub flags: ::std::os::raw::c_int,
    pub var: *mut ::std::os::raw::c_void,
    pub gsu: *const ::std::os::raw::c_void,
    pub getnfn: GetNodeFunc,
    pub scantfn: ScanTabFunc,
    pub pm: Param,
}
#[test]
fn bindgen_test_layout_paramdef() {
    assert_eq!(::std::mem::size_of::<paramdef>() , 56usize , concat ! (
               "Size of: " , stringify ! ( paramdef ) ));
    assert_eq! (::std::mem::align_of::<paramdef>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( paramdef ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const paramdef ) ) . name as * const _ as usize
                } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( paramdef ) , "::" ,
                stringify ! ( name ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const paramdef ) ) . flags as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( paramdef ) , "::" ,
                stringify ! ( flags ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const paramdef ) ) . var as * const _ as usize
                } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( paramdef ) , "::" ,
                stringify ! ( var ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const paramdef ) ) . gsu as * const _ as usize
                } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( paramdef ) , "::" ,
                stringify ! ( gsu ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const paramdef ) ) . getnfn as * const _ as
                usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( paramdef ) , "::" ,
                stringify ! ( getnfn ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const paramdef ) ) . scantfn as * const _ as
                usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! ( paramdef ) , "::" ,
                stringify ! ( scantfn ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const paramdef ) ) . pm as * const _ as usize }
                , 48usize , concat ! (
                "Alignment of field: " , stringify ! ( paramdef ) , "::" ,
                stringify ! ( pm ) ));
}
impl Clone for paramdef {
    fn clone(&self) -> Self { *self }
}
pub type Paramdef = *mut paramdef;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct patstralloc {
    pub unmetalen: ::std::os::raw::c_int,
    pub unmetalenp: ::std::os::raw::c_int,
    pub alloced: *mut ::std::os::raw::c_char,
    pub progstrunmeta: *mut ::std::os::raw::c_char,
    pub progstrunmetalen: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_patstralloc() {
    assert_eq!(::std::mem::size_of::<patstralloc>() , 32usize , concat ! (
               "Size of: " , stringify ! ( patstralloc ) ));
    assert_eq! (::std::mem::align_of::<patstralloc>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( patstralloc ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const patstralloc ) ) . unmetalen as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( patstralloc ) , "::" ,
                stringify ! ( unmetalen ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const patstralloc ) ) . unmetalenp as * const _
                as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( patstralloc ) , "::" ,
                stringify ! ( unmetalenp ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const patstralloc ) ) . alloced as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( patstralloc ) , "::" ,
                stringify ! ( alloced ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const patstralloc ) ) . progstrunmeta as *
                const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( patstralloc ) , "::" ,
                stringify ! ( progstrunmeta ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const patstralloc ) ) . progstrunmetalen as *
                const _ as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( patstralloc ) , "::" ,
                stringify ! ( progstrunmetalen ) ));
}
impl Clone for patstralloc {
    fn clone(&self) -> Self { *self }
}
pub type Patstralloc = *mut patstralloc;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct patprog {
    pub startoff: ::std::os::raw::c_long,
    pub size: ::std::os::raw::c_long,
    pub mustoff: ::std::os::raw::c_long,
    pub patmlen: ::std::os::raw::c_long,
    pub globflags: ::std::os::raw::c_int,
    pub globend: ::std::os::raw::c_int,
    pub flags: ::std::os::raw::c_int,
    pub patnpar: ::std::os::raw::c_int,
    pub patstartch: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_patprog() {
    assert_eq!(::std::mem::size_of::<patprog>() , 56usize , concat ! (
               "Size of: " , stringify ! ( patprog ) ));
    assert_eq! (::std::mem::align_of::<patprog>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( patprog ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const patprog ) ) . startoff as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( patprog ) , "::" ,
                stringify ! ( startoff ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const patprog ) ) . size as * const _ as usize
                } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( patprog ) , "::" ,
                stringify ! ( size ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const patprog ) ) . mustoff as * const _ as
                usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( patprog ) , "::" ,
                stringify ! ( mustoff ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const patprog ) ) . patmlen as * const _ as
                usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( patprog ) , "::" ,
                stringify ! ( patmlen ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const patprog ) ) . globflags as * const _ as
                usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( patprog ) , "::" ,
                stringify ! ( globflags ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const patprog ) ) . globend as * const _ as
                usize } , 36usize , concat ! (
                "Alignment of field: " , stringify ! ( patprog ) , "::" ,
                stringify ! ( globend ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const patprog ) ) . flags as * const _ as usize
                } , 40usize , concat ! (
                "Alignment of field: " , stringify ! ( patprog ) , "::" ,
                stringify ! ( flags ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const patprog ) ) . patnpar as * const _ as
                usize } , 44usize , concat ! (
                "Alignment of field: " , stringify ! ( patprog ) , "::" ,
                stringify ! ( patnpar ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const patprog ) ) . patstartch as * const _ as
                usize } , 48usize , concat ! (
                "Alignment of field: " , stringify ! ( patprog ) , "::" ,
                stringify ! ( patstartch ) ));
}
impl Clone for patprog {
    fn clone(&self) -> Self { *self }
}
pub type Patprog = *mut patprog;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct prepromptfn {
    pub func: voidvoidfnptr_t,
}
#[test]
fn bindgen_test_layout_prepromptfn() {
    assert_eq!(::std::mem::size_of::<prepromptfn>() , 8usize , concat ! (
               "Size of: " , stringify ! ( prepromptfn ) ));
    assert_eq! (::std::mem::align_of::<prepromptfn>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( prepromptfn ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const prepromptfn ) ) . func as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( prepromptfn ) , "::" ,
                stringify ! ( func ) ));
}
impl Clone for prepromptfn {
    fn clone(&self) -> Self { *self }
}
pub type Prepromptfn = *mut prepromptfn;
#[repr(C)]
pub struct process {
    pub next: *mut process,
    pub pid: pid_t,
    pub text: [::std::os::raw::c_char; 80usize],
    pub status: ::std::os::raw::c_int,
    pub ti: child_times_t,
    pub bgtime: timeval,
    pub endtime: timeval,
}
#[test]
fn bindgen_test_layout_process() {
    assert_eq!(::std::mem::size_of::<process>() , 272usize , concat ! (
               "Size of: " , stringify ! ( process ) ));
    assert_eq! (::std::mem::align_of::<process>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( process ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const process ) ) . next as * const _ as usize
                } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( process ) , "::" ,
                stringify ! ( next ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const process ) ) . pid as * const _ as usize }
                , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( process ) , "::" ,
                stringify ! ( pid ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const process ) ) . text as * const _ as usize
                } , 12usize , concat ! (
                "Alignment of field: " , stringify ! ( process ) , "::" ,
                stringify ! ( text ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const process ) ) . status as * const _ as
                usize } , 92usize , concat ! (
                "Alignment of field: " , stringify ! ( process ) , "::" ,
                stringify ! ( status ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const process ) ) . ti as * const _ as usize }
                , 96usize , concat ! (
                "Alignment of field: " , stringify ! ( process ) , "::" ,
                stringify ! ( ti ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const process ) ) . bgtime as * const _ as
                usize } , 240usize , concat ! (
                "Alignment of field: " , stringify ! ( process ) , "::" ,
                stringify ! ( bgtime ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const process ) ) . endtime as * const _ as
                usize } , 256usize , concat ! (
                "Alignment of field: " , stringify ! ( process ) , "::" ,
                stringify ! ( endtime ) ));
}
pub type Process = *mut process;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct redir {
    pub type_: ::std::os::raw::c_int,
    pub flags: ::std::os::raw::c_int,
    pub fd1: ::std::os::raw::c_int,
    pub fd2: ::std::os::raw::c_int,
    pub name: *mut ::std::os::raw::c_char,
    pub varid: *mut ::std::os::raw::c_char,
    pub here_terminator: *mut ::std::os::raw::c_char,
    pub munged_here_terminator: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_redir() {
    assert_eq!(::std::mem::size_of::<redir>() , 48usize , concat ! (
               "Size of: " , stringify ! ( redir ) ));
    assert_eq! (::std::mem::align_of::<redir>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( redir ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const redir ) ) . type_ as * const _ as usize }
                , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( redir ) , "::" ,
                stringify ! ( type_ ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const redir ) ) . flags as * const _ as usize }
                , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( redir ) , "::" ,
                stringify ! ( flags ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const redir ) ) . fd1 as * const _ as usize } ,
                8usize , concat ! (
                "Alignment of field: " , stringify ! ( redir ) , "::" ,
                stringify ! ( fd1 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const redir ) ) . fd2 as * const _ as usize } ,
                12usize , concat ! (
                "Alignment of field: " , stringify ! ( redir ) , "::" ,
                stringify ! ( fd2 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const redir ) ) . name as * const _ as usize }
                , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( redir ) , "::" ,
                stringify ! ( name ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const redir ) ) . varid as * const _ as usize }
                , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( redir ) , "::" ,
                stringify ! ( varid ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const redir ) ) . here_terminator as * const _
                as usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( redir ) , "::" ,
                stringify ! ( here_terminator ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const redir ) ) . munged_here_terminator as *
                const _ as usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! ( redir ) , "::" ,
                stringify ! ( munged_here_terminator ) ));
}
impl Clone for redir {
    fn clone(&self) -> Self { *self }
}
pub type Redir = *mut redir;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct reswd {
    pub node: hashnode,
    pub token: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_reswd() {
    assert_eq!(::std::mem::size_of::<reswd>() , 32usize , concat ! (
               "Size of: " , stringify ! ( reswd ) ));
    assert_eq! (::std::mem::align_of::<reswd>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( reswd ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const reswd ) ) . node as * const _ as usize }
                , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( reswd ) , "::" ,
                stringify ! ( node ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const reswd ) ) . token as * const _ as usize }
                , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( reswd ) , "::" ,
                stringify ! ( token ) ));
}
impl Clone for reswd {
    fn clone(&self) -> Self { *self }
}
pub type Reswd = *mut reswd;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct shfunc {
    pub node: hashnode,
    pub filename: *mut ::std::os::raw::c_char,
    pub lineno: zlong,
    pub funcdef: Eprog,
    pub redir: Eprog,
    pub sticky: Emulation_options,
}
#[test]
fn bindgen_test_layout_shfunc() {
    assert_eq!(::std::mem::size_of::<shfunc>() , 64usize , concat ! (
               "Size of: " , stringify ! ( shfunc ) ));
    assert_eq! (::std::mem::align_of::<shfunc>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( shfunc ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const shfunc ) ) . node as * const _ as usize }
                , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( shfunc ) , "::" ,
                stringify ! ( node ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const shfunc ) ) . filename as * const _ as
                usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( shfunc ) , "::" ,
                stringify ! ( filename ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const shfunc ) ) . lineno as * const _ as usize
                } , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( shfunc ) , "::" ,
                stringify ! ( lineno ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const shfunc ) ) . funcdef as * const _ as
                usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! ( shfunc ) , "::" ,
                stringify ! ( funcdef ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const shfunc ) ) . redir as * const _ as usize
                } , 48usize , concat ! (
                "Alignment of field: " , stringify ! ( shfunc ) , "::" ,
                stringify ! ( redir ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const shfunc ) ) . sticky as * const _ as usize
                } , 56usize , concat ! (
                "Alignment of field: " , stringify ! ( shfunc ) , "::" ,
                stringify ! ( sticky ) ));
}
impl Clone for shfunc {
    fn clone(&self) -> Self { *self }
}
pub type Shfunc = *mut shfunc;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct timedfn {
    pub func: voidvoidfnptr_t,
    pub when: time_t,
}
#[test]
fn bindgen_test_layout_timedfn() {
    assert_eq!(::std::mem::size_of::<timedfn>() , 16usize , concat ! (
               "Size of: " , stringify ! ( timedfn ) ));
    assert_eq! (::std::mem::align_of::<timedfn>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( timedfn ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const timedfn ) ) . func as * const _ as usize
                } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( timedfn ) , "::" ,
                stringify ! ( func ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const timedfn ) ) . when as * const _ as usize
                } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( timedfn ) , "::" ,
                stringify ! ( when ) ));
}
impl Clone for timedfn {
    fn clone(&self) -> Self { *self }
}
pub type Timedfn = *mut timedfn;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct value {
    pub isarr: ::std::os::raw::c_int,
    pub pm: Param,
    pub flags: ::std::os::raw::c_int,
    pub start: ::std::os::raw::c_int,
    pub end: ::std::os::raw::c_int,
    pub arr: *mut *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_value() {
    assert_eq!(::std::mem::size_of::<value>() , 40usize , concat ! (
               "Size of: " , stringify ! ( value ) ));
    assert_eq! (::std::mem::align_of::<value>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( value ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const value ) ) . isarr as * const _ as usize }
                , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( value ) , "::" ,
                stringify ! ( isarr ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const value ) ) . pm as * const _ as usize } ,
                8usize , concat ! (
                "Alignment of field: " , stringify ! ( value ) , "::" ,
                stringify ! ( pm ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const value ) ) . flags as * const _ as usize }
                , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( value ) , "::" ,
                stringify ! ( flags ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const value ) ) . start as * const _ as usize }
                , 20usize , concat ! (
                "Alignment of field: " , stringify ! ( value ) , "::" ,
                stringify ! ( start ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const value ) ) . end as * const _ as usize } ,
                24usize , concat ! (
                "Alignment of field: " , stringify ! ( value ) , "::" ,
                stringify ! ( end ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const value ) ) . arr as * const _ as usize } ,
                32usize , concat ! (
                "Alignment of field: " , stringify ! ( value ) , "::" ,
                stringify ! ( arr ) ));
}
impl Clone for value {
    fn clone(&self) -> Self { *self }
}
pub type Value = *mut value;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct linklist {
    pub first: LinkNode,
    pub last: LinkNode,
    pub flags: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_linklist() {
    assert_eq!(::std::mem::size_of::<linklist>() , 24usize , concat ! (
               "Size of: " , stringify ! ( linklist ) ));
    assert_eq! (::std::mem::align_of::<linklist>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( linklist ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const linklist ) ) . first as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( linklist ) , "::" ,
                stringify ! ( first ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const linklist ) ) . last as * const _ as usize
                } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( linklist ) , "::" ,
                stringify ! ( last ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const linklist ) ) . flags as * const _ as
                usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( linklist ) , "::" ,
                stringify ! ( flags ) ));
}
impl Clone for linklist {
    fn clone(&self) -> Self { *self }
}
/*************************************/
pub type voidvoidfnptr_t = ::std::option::Option<unsafe extern "C" fn()>;
pub type CondHandler =
    ::std::option::Option<unsafe extern "C" fn(arg1:
                                                   *mut *mut ::std::os::raw::c_char,
                                               arg2: ::std::os::raw::c_int)
                              -> ::std::os::raw::c_int>;
pub const REDIRF_FROM_HEREDOC: _bindgen_ty_22 =
    _bindgen_ty_22::REDIRF_FROM_HEREDOC;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_22 { REDIRF_FROM_HEREDOC = 1, }
#[repr(C)]
#[derive(Debug, Copy)]
pub struct multio {
    pub ct: ::std::os::raw::c_int,
    pub rflag: ::std::os::raw::c_int,
    pub pipe: ::std::os::raw::c_int,
    pub fds: [::std::os::raw::c_int; 8usize],
}
#[test]
fn bindgen_test_layout_multio() {
    assert_eq!(::std::mem::size_of::<multio>() , 44usize , concat ! (
               "Size of: " , stringify ! ( multio ) ));
    assert_eq! (::std::mem::align_of::<multio>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( multio ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const multio ) ) . ct as * const _ as usize } ,
                0usize , concat ! (
                "Alignment of field: " , stringify ! ( multio ) , "::" ,
                stringify ! ( ct ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const multio ) ) . rflag as * const _ as usize
                } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( multio ) , "::" ,
                stringify ! ( rflag ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const multio ) ) . pipe as * const _ as usize }
                , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( multio ) , "::" ,
                stringify ! ( pipe ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const multio ) ) . fds as * const _ as usize }
                , 12usize , concat ! (
                "Alignment of field: " , stringify ! ( multio ) , "::" ,
                stringify ! ( fds ) ));
}
impl Clone for multio {
    fn clone(&self) -> Self { *self }
}
pub const VALFLAG_INV: _bindgen_ty_23 = _bindgen_ty_23::VALFLAG_INV;
pub const VALFLAG_EMPTY: _bindgen_ty_23 = _bindgen_ty_23::VALFLAG_EMPTY;
pub const VALFLAG_SUBST: _bindgen_ty_23 = _bindgen_ty_23::VALFLAG_SUBST;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_23 {
    VALFLAG_INV = 1,
    VALFLAG_EMPTY = 2,
    VALFLAG_SUBST = 4,
}
/********************************************/
pub type wordcode = ::std::os::raw::c_uint;
pub type Wordcode = *mut wordcode;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct funcdump {
    pub next: FuncDump,
    pub dev: dev_t,
    pub ino: ino_t,
    pub fd: ::std::os::raw::c_int,
    pub map: Wordcode,
    pub addr: Wordcode,
    pub len: ::std::os::raw::c_int,
    pub count: ::std::os::raw::c_int,
    pub filename: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_funcdump() {
    assert_eq!(::std::mem::size_of::<funcdump>() , 64usize , concat ! (
               "Size of: " , stringify ! ( funcdump ) ));
    assert_eq! (::std::mem::align_of::<funcdump>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( funcdump ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const funcdump ) ) . next as * const _ as usize
                } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( funcdump ) , "::" ,
                stringify ! ( next ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const funcdump ) ) . dev as * const _ as usize
                } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( funcdump ) , "::" ,
                stringify ! ( dev ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const funcdump ) ) . ino as * const _ as usize
                } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( funcdump ) , "::" ,
                stringify ! ( ino ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const funcdump ) ) . fd as * const _ as usize }
                , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( funcdump ) , "::" ,
                stringify ! ( fd ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const funcdump ) ) . map as * const _ as usize
                } , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( funcdump ) , "::" ,
                stringify ! ( map ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const funcdump ) ) . addr as * const _ as usize
                } , 40usize , concat ! (
                "Alignment of field: " , stringify ! ( funcdump ) , "::" ,
                stringify ! ( addr ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const funcdump ) ) . len as * const _ as usize
                } , 48usize , concat ! (
                "Alignment of field: " , stringify ! ( funcdump ) , "::" ,
                stringify ! ( len ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const funcdump ) ) . count as * const _ as
                usize } , 52usize , concat ! (
                "Alignment of field: " , stringify ! ( funcdump ) , "::" ,
                stringify ! ( count ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const funcdump ) ) . filename as * const _ as
                usize } , 56usize , concat ! (
                "Alignment of field: " , stringify ! ( funcdump ) , "::" ,
                stringify ! ( filename ) ));
}
impl Clone for funcdump {
    fn clone(&self) -> Self { *self }
}
pub type FuncDump = *mut funcdump;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct eprog {
    pub flags: ::std::os::raw::c_int,
    pub len: ::std::os::raw::c_int,
    pub npats: ::std::os::raw::c_int,
    pub nref: ::std::os::raw::c_int,
    pub pats: *mut Patprog,
    pub prog: Wordcode,
    pub strs: *mut ::std::os::raw::c_char,
    pub shf: Shfunc,
    pub dump: FuncDump,
}
#[test]
fn bindgen_test_layout_eprog() {
    assert_eq!(::std::mem::size_of::<eprog>() , 56usize , concat ! (
               "Size of: " , stringify ! ( eprog ) ));
    assert_eq! (::std::mem::align_of::<eprog>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( eprog ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const eprog ) ) . flags as * const _ as usize }
                , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( eprog ) , "::" ,
                stringify ! ( flags ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const eprog ) ) . len as * const _ as usize } ,
                4usize , concat ! (
                "Alignment of field: " , stringify ! ( eprog ) , "::" ,
                stringify ! ( len ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const eprog ) ) . npats as * const _ as usize }
                , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( eprog ) , "::" ,
                stringify ! ( npats ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const eprog ) ) . nref as * const _ as usize }
                , 12usize , concat ! (
                "Alignment of field: " , stringify ! ( eprog ) , "::" ,
                stringify ! ( nref ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const eprog ) ) . pats as * const _ as usize }
                , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( eprog ) , "::" ,
                stringify ! ( pats ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const eprog ) ) . prog as * const _ as usize }
                , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( eprog ) , "::" ,
                stringify ! ( prog ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const eprog ) ) . strs as * const _ as usize }
                , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( eprog ) , "::" ,
                stringify ! ( strs ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const eprog ) ) . shf as * const _ as usize } ,
                40usize , concat ! (
                "Alignment of field: " , stringify ! ( eprog ) , "::" ,
                stringify ! ( shf ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const eprog ) ) . dump as * const _ as usize }
                , 48usize , concat ! (
                "Alignment of field: " , stringify ! ( eprog ) , "::" ,
                stringify ! ( dump ) ));
}
impl Clone for eprog {
    fn clone(&self) -> Self { *self }
}
pub type Eprog = *mut eprog;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct estate {
    pub prog: Eprog,
    pub pc: Wordcode,
    pub strs: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_estate() {
    assert_eq!(::std::mem::size_of::<estate>() , 24usize , concat ! (
               "Size of: " , stringify ! ( estate ) ));
    assert_eq! (::std::mem::align_of::<estate>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( estate ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const estate ) ) . prog as * const _ as usize }
                , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( estate ) , "::" ,
                stringify ! ( prog ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const estate ) ) . pc as * const _ as usize } ,
                8usize , concat ! (
                "Alignment of field: " , stringify ! ( estate ) , "::" ,
                stringify ! ( pc ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const estate ) ) . strs as * const _ as usize }
                , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( estate ) , "::" ,
                stringify ! ( strs ) ));
}
impl Clone for estate {
    fn clone(&self) -> Self { *self }
}
pub type Estate = *mut estate;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct eccstr {
    pub left: Eccstr,
    pub right: Eccstr,
    pub str: *mut ::std::os::raw::c_char,
    pub offs: wordcode,
    pub aoffs: wordcode,
    pub nfunc: ::std::os::raw::c_int,
    pub hashval: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_eccstr() {
    assert_eq!(::std::mem::size_of::<eccstr>() , 40usize , concat ! (
               "Size of: " , stringify ! ( eccstr ) ));
    assert_eq! (::std::mem::align_of::<eccstr>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( eccstr ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const eccstr ) ) . left as * const _ as usize }
                , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( eccstr ) , "::" ,
                stringify ! ( left ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const eccstr ) ) . right as * const _ as usize
                } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( eccstr ) , "::" ,
                stringify ! ( right ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const eccstr ) ) . str as * const _ as usize }
                , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( eccstr ) , "::" ,
                stringify ! ( str ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const eccstr ) ) . offs as * const _ as usize }
                , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( eccstr ) , "::" ,
                stringify ! ( offs ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const eccstr ) ) . aoffs as * const _ as usize
                } , 28usize , concat ! (
                "Alignment of field: " , stringify ! ( eccstr ) , "::" ,
                stringify ! ( aoffs ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const eccstr ) ) . nfunc as * const _ as usize
                } , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( eccstr ) , "::" ,
                stringify ! ( nfunc ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const eccstr ) ) . hashval as * const _ as
                usize } , 36usize , concat ! (
                "Alignment of field: " , stringify ! ( eccstr ) , "::" ,
                stringify ! ( hashval ) ));
}
impl Clone for eccstr {
    fn clone(&self) -> Self { *self }
}
pub type Eccstr = *mut eccstr;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct timeinfo {
    pub ut: ::std::os::raw::c_long,
    pub st: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_timeinfo() {
    assert_eq!(::std::mem::size_of::<timeinfo>() , 16usize , concat ! (
               "Size of: " , stringify ! ( timeinfo ) ));
    assert_eq! (::std::mem::align_of::<timeinfo>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( timeinfo ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const timeinfo ) ) . ut as * const _ as usize }
                , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( timeinfo ) , "::" ,
                stringify ! ( ut ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const timeinfo ) ) . st as * const _ as usize }
                , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( timeinfo ) , "::" ,
                stringify ! ( st ) ));
}
impl Clone for timeinfo {
    fn clone(&self) -> Self { *self }
}
pub type child_times_t = rusage;
#[repr(C)]
pub struct execstack {
    pub next: *mut execstack,
    pub list_pipe_pid: pid_t,
    pub nowait: ::std::os::raw::c_int,
    pub pline_level: ::std::os::raw::c_int,
    pub list_pipe_child: ::std::os::raw::c_int,
    pub list_pipe_job: ::std::os::raw::c_int,
    pub list_pipe_text: [::std::os::raw::c_char; 80usize],
    pub lastval: ::std::os::raw::c_int,
    pub noeval: ::std::os::raw::c_int,
    pub badcshglob: ::std::os::raw::c_int,
    pub cmdoutpid: pid_t,
    pub cmdoutval: ::std::os::raw::c_int,
    pub use_cmdoutval: ::std::os::raw::c_int,
    pub trap_return: ::std::os::raw::c_int,
    pub trap_state: ::std::os::raw::c_int,
    pub trapisfunc: ::std::os::raw::c_int,
    pub traplocallevel: ::std::os::raw::c_int,
    pub noerrs: ::std::os::raw::c_int,
    pub this_noerrexit: ::std::os::raw::c_int,
    pub underscore: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_execstack() {
    assert_eq!(::std::mem::size_of::<execstack>() , 168usize , concat ! (
               "Size of: " , stringify ! ( execstack ) ));
    assert_eq! (::std::mem::align_of::<execstack>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( execstack ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const execstack ) ) . next as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( execstack ) , "::" ,
                stringify ! ( next ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const execstack ) ) . list_pipe_pid as * const
                _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( execstack ) , "::" ,
                stringify ! ( list_pipe_pid ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const execstack ) ) . nowait as * const _ as
                usize } , 12usize , concat ! (
                "Alignment of field: " , stringify ! ( execstack ) , "::" ,
                stringify ! ( nowait ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const execstack ) ) . pline_level as * const _
                as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( execstack ) , "::" ,
                stringify ! ( pline_level ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const execstack ) ) . list_pipe_child as *
                const _ as usize } , 20usize , concat ! (
                "Alignment of field: " , stringify ! ( execstack ) , "::" ,
                stringify ! ( list_pipe_child ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const execstack ) ) . list_pipe_job as * const
                _ as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( execstack ) , "::" ,
                stringify ! ( list_pipe_job ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const execstack ) ) . list_pipe_text as * const
                _ as usize } , 28usize , concat ! (
                "Alignment of field: " , stringify ! ( execstack ) , "::" ,
                stringify ! ( list_pipe_text ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const execstack ) ) . lastval as * const _ as
                usize } , 108usize , concat ! (
                "Alignment of field: " , stringify ! ( execstack ) , "::" ,
                stringify ! ( lastval ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const execstack ) ) . noeval as * const _ as
                usize } , 112usize , concat ! (
                "Alignment of field: " , stringify ! ( execstack ) , "::" ,
                stringify ! ( noeval ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const execstack ) ) . badcshglob as * const _
                as usize } , 116usize , concat ! (
                "Alignment of field: " , stringify ! ( execstack ) , "::" ,
                stringify ! ( badcshglob ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const execstack ) ) . cmdoutpid as * const _ as
                usize } , 120usize , concat ! (
                "Alignment of field: " , stringify ! ( execstack ) , "::" ,
                stringify ! ( cmdoutpid ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const execstack ) ) . cmdoutval as * const _ as
                usize } , 124usize , concat ! (
                "Alignment of field: " , stringify ! ( execstack ) , "::" ,
                stringify ! ( cmdoutval ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const execstack ) ) . use_cmdoutval as * const
                _ as usize } , 128usize , concat ! (
                "Alignment of field: " , stringify ! ( execstack ) , "::" ,
                stringify ! ( use_cmdoutval ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const execstack ) ) . trap_return as * const _
                as usize } , 132usize , concat ! (
                "Alignment of field: " , stringify ! ( execstack ) , "::" ,
                stringify ! ( trap_return ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const execstack ) ) . trap_state as * const _
                as usize } , 136usize , concat ! (
                "Alignment of field: " , stringify ! ( execstack ) , "::" ,
                stringify ! ( trap_state ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const execstack ) ) . trapisfunc as * const _
                as usize } , 140usize , concat ! (
                "Alignment of field: " , stringify ! ( execstack ) , "::" ,
                stringify ! ( trapisfunc ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const execstack ) ) . traplocallevel as * const
                _ as usize } , 144usize , concat ! (
                "Alignment of field: " , stringify ! ( execstack ) , "::" ,
                stringify ! ( traplocallevel ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const execstack ) ) . noerrs as * const _ as
                usize } , 148usize , concat ! (
                "Alignment of field: " , stringify ! ( execstack ) , "::" ,
                stringify ! ( noerrs ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const execstack ) ) . this_noerrexit as * const
                _ as usize } , 152usize , concat ! (
                "Alignment of field: " , stringify ! ( execstack ) , "::" ,
                stringify ! ( this_noerrexit ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const execstack ) ) . underscore as * const _
                as usize } , 160usize , concat ! (
                "Alignment of field: " , stringify ! ( execstack ) , "::" ,
                stringify ! ( underscore ) ));
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct heredocs {
    pub next: *mut heredocs,
    pub type_: ::std::os::raw::c_int,
    pub pc: ::std::os::raw::c_int,
    pub str: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_heredocs() {
    assert_eq!(::std::mem::size_of::<heredocs>() , 24usize , concat ! (
               "Size of: " , stringify ! ( heredocs ) ));
    assert_eq! (::std::mem::align_of::<heredocs>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( heredocs ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const heredocs ) ) . next as * const _ as usize
                } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( heredocs ) , "::" ,
                stringify ! ( next ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const heredocs ) ) . type_ as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( heredocs ) , "::" ,
                stringify ! ( type_ ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const heredocs ) ) . pc as * const _ as usize }
                , 12usize , concat ! (
                "Alignment of field: " , stringify ! ( heredocs ) , "::" ,
                stringify ! ( pc ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const heredocs ) ) . str as * const _ as usize
                } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( heredocs ) , "::" ,
                stringify ! ( str ) ));
}
impl Clone for heredocs {
    fn clone(&self) -> Self { *self }
}
/*******************************/
pub type VFunc =
    ::std::option::Option<unsafe extern "C" fn(arg1:
                                                   *mut ::std::os::raw::c_void)
                              -> *mut ::std::os::raw::c_void>;
pub type FreeFunc =
    ::std::option::Option<unsafe extern "C" fn(arg1:
                                                   *mut ::std::os::raw::c_void)>;
pub type HashFunc =
    ::std::option::Option<unsafe extern "C" fn(arg1:
                                                   *const ::std::os::raw::c_char)
                              -> ::std::os::raw::c_uint>;
pub type TableFunc =
    ::std::option::Option<unsafe extern "C" fn(arg1: HashTable)>;
pub type AddNodeFunc =
    ::std::option::Option<unsafe extern "C" fn(arg1: HashTable,
                                               arg2:
                                                   *mut ::std::os::raw::c_char,
                                               arg3:
                                                   *mut ::std::os::raw::c_void)>;
pub type GetNodeFunc =
    ::std::option::Option<unsafe extern "C" fn(arg1: HashTable,
                                               arg2:
                                                   *const ::std::os::raw::c_char)
                              -> HashNode>;
pub type RemoveNodeFunc =
    ::std::option::Option<unsafe extern "C" fn(arg1: HashTable,
                                               arg2:
                                                   *const ::std::os::raw::c_char)
                              -> HashNode>;
pub type FreeNodeFunc =
    ::std::option::Option<unsafe extern "C" fn(arg1: HashNode)>;
pub type CompareFunc =
    ::std::option::Option<unsafe extern "C" fn(arg1:
                                                   *const ::std::os::raw::c_char,
                                               arg2:
                                                   *const ::std::os::raw::c_char)
                              -> ::std::os::raw::c_int>;
pub type ScanFunc =
    ::std::option::Option<unsafe extern "C" fn(arg1: HashNode,
                                               arg2: ::std::os::raw::c_int)>;
pub type ScanTabFunc =
    ::std::option::Option<unsafe extern "C" fn(arg1: HashTable,
                                               arg2: ScanFunc,
                                               arg3: ::std::os::raw::c_int)>;
pub type PrintTableStats =
    ::std::option::Option<unsafe extern "C" fn(arg1: HashTable)>;
pub const FS_SOURCE: _bindgen_ty_24 = _bindgen_ty_24::FS_SOURCE;
pub const FS_FUNC: _bindgen_ty_24 = _bindgen_ty_24::FS_FUNC;
pub const FS_EVAL: _bindgen_ty_24 = _bindgen_ty_24::FS_EVAL;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_24 { FS_SOURCE = 0, FS_FUNC = 1, FS_EVAL = 2, }
pub type WrapFunc =
    ::std::option::Option<unsafe extern "C" fn(arg1: Eprog, arg2: FuncWrap,
                                               arg3:
                                                   *mut ::std::os::raw::c_char)
                              -> ::std::os::raw::c_int>;
pub type HandlerFunc =
    ::std::option::Option<unsafe extern "C" fn(arg1:
                                                   *mut ::std::os::raw::c_char,
                                               arg2:
                                                   *mut *mut ::std::os::raw::c_char,
                                               arg3: Options,
                                               arg4: ::std::os::raw::c_int)
                              -> ::std::os::raw::c_int>;
pub type HandlerFuncAssign =
    ::std::option::Option<unsafe extern "C" fn(arg1:
                                                   *mut ::std::os::raw::c_char,
                                               arg2:
                                                   *mut *mut ::std::os::raw::c_char,
                                               arg3: LinkList, arg4: Options,
                                               arg5: ::std::os::raw::c_int)
                              -> ::std::os::raw::c_int>;
pub type Module_generic_func =
    ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>;
pub type Module_void_func =
    ::std::option::Option<unsafe extern "C" fn(arg1: Module)
                              -> ::std::os::raw::c_int>;
pub type Module_features_func =
    ::std::option::Option<unsafe extern "C" fn(arg1: Module,
                                               arg2:
                                                   *mut *mut *mut ::std::os::raw::c_char)
                              -> ::std::os::raw::c_int>;
pub type Module_enables_func =
    ::std::option::Option<unsafe extern "C" fn(arg1: Module,
                                               arg2:
                                                   *mut *mut ::std::os::raw::c_int)
                              -> ::std::os::raw::c_int>;
pub type Hookfn =
    ::std::option::Option<unsafe extern "C" fn(arg1: Hookdef,
                                               arg2:
                                                   *mut ::std::os::raw::c_void)
                              -> ::std::os::raw::c_int>;
pub const zpc_chars_ZPC_INPAR: zpc_chars = zpc_chars::ZPC_SEG_COUNT;
pub const zpc_chars_ZPC_KSH_QUEST: zpc_chars = zpc_chars::ZPC_NO_KSH_GLOB;
#[repr(u32)]
/**
 * Indexes into the array of active pattern characters.
 * This must match the array zpc_chars in pattern.c.
 */
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum zpc_chars {
    ZPC_SLASH = 0,
    ZPC_NULL = 1,
    ZPC_BAR = 2,
    ZPC_OUTPAR = 3,
    ZPC_TILDE = 4,
    ZPC_SEG_COUNT = 5,
    ZPC_QUEST = 6,
    ZPC_STAR = 7,
    ZPC_INBRACK = 8,
    ZPC_INANG = 9,
    ZPC_HAT = 10,
    ZPC_HASH = 11,
    ZPC_BNULLKEEP = 12,
    ZPC_NO_KSH_GLOB = 13,
    ZPC_KSH_STAR = 14,
    ZPC_KSH_PLUS = 15,
    ZPC_KSH_BANG = 16,
    ZPC_KSH_BANG2 = 17,
    ZPC_KSH_AT = 18,
    ZPC_COUNT = 19,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct zpc_disables_save {
    pub next: *mut zpc_disables_save,
    pub disables: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_zpc_disables_save() {
    assert_eq!(::std::mem::size_of::<zpc_disables_save>() , 16usize , concat !
               ( "Size of: " , stringify ! ( zpc_disables_save ) ));
    assert_eq! (::std::mem::align_of::<zpc_disables_save>() , 8usize , concat
                ! ( "Alignment of " , stringify ! ( zpc_disables_save ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const zpc_disables_save ) ) . next as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( zpc_disables_save ) ,
                "::" , stringify ! ( next ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const zpc_disables_save ) ) . disables as *
                const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( zpc_disables_save ) ,
                "::" , stringify ! ( disables ) ));
}
impl Clone for zpc_disables_save {
    fn clone(&self) -> Self { *self }
}
pub type Zpc_disables_save = *mut zpc_disables_save;
pub const ZMB_VALID: _bindgen_ty_25 = _bindgen_ty_25::ZMB_VALID;
pub const ZMB_INCOMPLETE: _bindgen_ty_25 = _bindgen_ty_25::ZMB_INCOMPLETE;
pub const ZMB_INVALID: _bindgen_ty_25 = _bindgen_ty_25::ZMB_INVALID;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_25 {
    ZMB_VALID = 0,
    ZMB_INCOMPLETE = 1,
    ZMB_INVALID = 2,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct gsu_scalar {
    pub getfn: ::std::option::Option<unsafe extern "C" fn(arg1: Param)
                                         -> *mut ::std::os::raw::c_char>,
    pub setfn: ::std::option::Option<unsafe extern "C" fn(arg1: Param,
                                                          arg2:
                                                              *mut ::std::os::raw::c_char)>,
    pub unsetfn: ::std::option::Option<unsafe extern "C" fn(arg1: Param,
                                                            arg2:
                                                                ::std::os::raw::c_int)>,
}
#[test]
fn bindgen_test_layout_gsu_scalar() {
    assert_eq!(::std::mem::size_of::<gsu_scalar>() , 24usize , concat ! (
               "Size of: " , stringify ! ( gsu_scalar ) ));
    assert_eq! (::std::mem::align_of::<gsu_scalar>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( gsu_scalar ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const gsu_scalar ) ) . getfn as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( gsu_scalar ) , "::" ,
                stringify ! ( getfn ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const gsu_scalar ) ) . setfn as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( gsu_scalar ) , "::" ,
                stringify ! ( setfn ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const gsu_scalar ) ) . unsetfn as * const _ as
                usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( gsu_scalar ) , "::" ,
                stringify ! ( unsetfn ) ));
}
impl Clone for gsu_scalar {
    fn clone(&self) -> Self { *self }
}
pub type GsuScalar = *const gsu_scalar;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct gsu_integer {
    pub getfn: ::std::option::Option<unsafe extern "C" fn(arg1: Param)
                                         -> zlong>,
    pub setfn: ::std::option::Option<unsafe extern "C" fn(arg1: Param,
                                                          arg2: zlong)>,
    pub unsetfn: ::std::option::Option<unsafe extern "C" fn(arg1: Param,
                                                            arg2:
                                                                ::std::os::raw::c_int)>,
}
#[test]
fn bindgen_test_layout_gsu_integer() {
    assert_eq!(::std::mem::size_of::<gsu_integer>() , 24usize , concat ! (
               "Size of: " , stringify ! ( gsu_integer ) ));
    assert_eq! (::std::mem::align_of::<gsu_integer>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( gsu_integer ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const gsu_integer ) ) . getfn as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( gsu_integer ) , "::" ,
                stringify ! ( getfn ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const gsu_integer ) ) . setfn as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( gsu_integer ) , "::" ,
                stringify ! ( setfn ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const gsu_integer ) ) . unsetfn as * const _ as
                usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( gsu_integer ) , "::" ,
                stringify ! ( unsetfn ) ));
}
impl Clone for gsu_integer {
    fn clone(&self) -> Self { *self }
}
pub type GsuInteger = *const gsu_integer;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct gsu_float {
    pub getfn: ::std::option::Option<unsafe extern "C" fn(arg1: Param)
                                         -> f64>,
    pub setfn: ::std::option::Option<unsafe extern "C" fn(arg1: Param,
                                                          arg2: f64)>,
    pub unsetfn: ::std::option::Option<unsafe extern "C" fn(arg1: Param,
                                                            arg2:
                                                                ::std::os::raw::c_int)>,
}
#[test]
fn bindgen_test_layout_gsu_float() {
    assert_eq!(::std::mem::size_of::<gsu_float>() , 24usize , concat ! (
               "Size of: " , stringify ! ( gsu_float ) ));
    assert_eq! (::std::mem::align_of::<gsu_float>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( gsu_float ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const gsu_float ) ) . getfn as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( gsu_float ) , "::" ,
                stringify ! ( getfn ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const gsu_float ) ) . setfn as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( gsu_float ) , "::" ,
                stringify ! ( setfn ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const gsu_float ) ) . unsetfn as * const _ as
                usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( gsu_float ) , "::" ,
                stringify ! ( unsetfn ) ));
}
impl Clone for gsu_float {
    fn clone(&self) -> Self { *self }
}
pub type GsuFloat = *const gsu_float;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct gsu_array {
    pub getfn: ::std::option::Option<unsafe extern "C" fn(arg1: Param)
                                         -> *mut *mut ::std::os::raw::c_char>,
    pub setfn: ::std::option::Option<unsafe extern "C" fn(arg1: Param,
                                                          arg2:
                                                              *mut *mut ::std::os::raw::c_char)>,
    pub unsetfn: ::std::option::Option<unsafe extern "C" fn(arg1: Param,
                                                            arg2:
                                                                ::std::os::raw::c_int)>,
}
#[test]
fn bindgen_test_layout_gsu_array() {
    assert_eq!(::std::mem::size_of::<gsu_array>() , 24usize , concat ! (
               "Size of: " , stringify ! ( gsu_array ) ));
    assert_eq! (::std::mem::align_of::<gsu_array>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( gsu_array ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const gsu_array ) ) . getfn as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( gsu_array ) , "::" ,
                stringify ! ( getfn ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const gsu_array ) ) . setfn as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( gsu_array ) , "::" ,
                stringify ! ( setfn ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const gsu_array ) ) . unsetfn as * const _ as
                usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( gsu_array ) , "::" ,
                stringify ! ( unsetfn ) ));
}
impl Clone for gsu_array {
    fn clone(&self) -> Self { *self }
}
pub type GsuArray = *const gsu_array;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct gsu_hash {
    pub getfn: ::std::option::Option<unsafe extern "C" fn(arg1: Param)
                                         -> HashTable>,
    pub setfn: ::std::option::Option<unsafe extern "C" fn(arg1: Param,
                                                          arg2: HashTable)>,
    pub unsetfn: ::std::option::Option<unsafe extern "C" fn(arg1: Param,
                                                            arg2:
                                                                ::std::os::raw::c_int)>,
}
#[test]
fn bindgen_test_layout_gsu_hash() {
    assert_eq!(::std::mem::size_of::<gsu_hash>() , 24usize , concat ! (
               "Size of: " , stringify ! ( gsu_hash ) ));
    assert_eq! (::std::mem::align_of::<gsu_hash>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( gsu_hash ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const gsu_hash ) ) . getfn as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( gsu_hash ) , "::" ,
                stringify ! ( getfn ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const gsu_hash ) ) . setfn as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( gsu_hash ) , "::" ,
                stringify ! ( setfn ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const gsu_hash ) ) . unsetfn as * const _ as
                usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( gsu_hash ) , "::" ,
                stringify ! ( unsetfn ) ));
}
impl Clone for gsu_hash {
    fn clone(&self) -> Self { *self }
}
pub type GsuHash = *const gsu_hash;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct tieddata {
    pub arrptr: *mut *mut *mut ::std::os::raw::c_char,
    pub joinchar: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_tieddata() {
    assert_eq!(::std::mem::size_of::<tieddata>() , 16usize , concat ! (
               "Size of: " , stringify ! ( tieddata ) ));
    assert_eq! (::std::mem::align_of::<tieddata>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( tieddata ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const tieddata ) ) . arrptr as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( tieddata ) , "::" ,
                stringify ! ( arrptr ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const tieddata ) ) . joinchar as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( tieddata ) , "::" ,
                stringify ! ( joinchar ) ));
}
impl Clone for tieddata {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct repldata {
    pub b: ::std::os::raw::c_int,
    pub e: ::std::os::raw::c_int,
    pub replstr: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_repldata() {
    assert_eq!(::std::mem::size_of::<repldata>() , 16usize , concat ! (
               "Size of: " , stringify ! ( repldata ) ));
    assert_eq! (::std::mem::align_of::<repldata>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( repldata ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const repldata ) ) . b as * const _ as usize }
                , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( repldata ) , "::" ,
                stringify ! ( b ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const repldata ) ) . e as * const _ as usize }
                , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( repldata ) , "::" ,
                stringify ! ( e ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const repldata ) ) . replstr as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( repldata ) , "::" ,
                stringify ! ( replstr ) ));
}
impl Clone for repldata {
    fn clone(&self) -> Self { *self }
}
pub type Repldata = *mut repldata;
pub const ZSHTOK_SUBST: _bindgen_ty_26 = _bindgen_ty_26::ZSHTOK_SUBST;
pub const ZSHTOK_SHGLOB: _bindgen_ty_26 = _bindgen_ty_26::ZSHTOK_SHGLOB;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_26 { ZSHTOK_SUBST = 1, ZSHTOK_SHGLOB = 2, }
pub const PREFORK_TYPESET: _bindgen_ty_27 = _bindgen_ty_27::PREFORK_TYPESET;
pub const PREFORK_ASSIGN: _bindgen_ty_27 = _bindgen_ty_27::PREFORK_ASSIGN;
pub const PREFORK_SINGLE: _bindgen_ty_27 = _bindgen_ty_27::PREFORK_SINGLE;
pub const PREFORK_SPLIT: _bindgen_ty_27 = _bindgen_ty_27::PREFORK_SPLIT;
pub const PREFORK_SHWORDSPLIT: _bindgen_ty_27 =
    _bindgen_ty_27::PREFORK_SHWORDSPLIT;
pub const PREFORK_NOSHWORDSPLIT: _bindgen_ty_27 =
    _bindgen_ty_27::PREFORK_NOSHWORDSPLIT;
pub const PREFORK_SUBEXP: _bindgen_ty_27 = _bindgen_ty_27::PREFORK_SUBEXP;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_27 {
    PREFORK_TYPESET = 1,
    PREFORK_ASSIGN = 2,
    PREFORK_SINGLE = 4,
    PREFORK_SPLIT = 8,
    PREFORK_SHWORDSPLIT = 16,
    PREFORK_NOSHWORDSPLIT = 32,
    PREFORK_SUBEXP = 64,
}
pub const MULTSUB_WS_AT_START: _bindgen_ty_28 =
    _bindgen_ty_28::MULTSUB_WS_AT_START;
pub const MULTSUB_WS_AT_END: _bindgen_ty_28 =
    _bindgen_ty_28::MULTSUB_WS_AT_END;
pub const MULTSUB_PARAM_NAME: _bindgen_ty_28 =
    _bindgen_ty_28::MULTSUB_PARAM_NAME;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_28 {
    MULTSUB_WS_AT_START = 1,
    MULTSUB_WS_AT_END = 2,
    MULTSUB_PARAM_NAME = 4,
}
pub const ASSPM_AUGMENT: _bindgen_ty_29 = _bindgen_ty_29::ASSPM_AUGMENT;
pub const ASSPM_WARN_CREATE: _bindgen_ty_29 =
    _bindgen_ty_29::ASSPM_WARN_CREATE;
pub const ASSPM_WARN_NESTED: _bindgen_ty_29 =
    _bindgen_ty_29::ASSPM_WARN_NESTED;
pub const ASSPM_WARN: _bindgen_ty_29 = _bindgen_ty_29::ASSPM_WARN;
pub const ASSPM_ENV_IMPORT: _bindgen_ty_29 = _bindgen_ty_29::ASSPM_ENV_IMPORT;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_29 {
    ASSPM_AUGMENT = 1,
    ASSPM_WARN_CREATE = 2,
    ASSPM_WARN_NESTED = 4,
    ASSPM_WARN = 6,
    ASSPM_ENV_IMPORT = 8,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct groupmap {
    pub name: *mut ::std::os::raw::c_char,
    pub gid: gid_t,
}
#[test]
fn bindgen_test_layout_groupmap() {
    assert_eq!(::std::mem::size_of::<groupmap>() , 16usize , concat ! (
               "Size of: " , stringify ! ( groupmap ) ));
    assert_eq! (::std::mem::align_of::<groupmap>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( groupmap ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const groupmap ) ) . name as * const _ as usize
                } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( groupmap ) , "::" ,
                stringify ! ( name ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const groupmap ) ) . gid as * const _ as usize
                } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( groupmap ) , "::" ,
                stringify ! ( gid ) ));
}
impl Clone for groupmap {
    fn clone(&self) -> Self { *self }
}
pub type Groupmap = *mut groupmap;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct groupset {
    pub array: Groupmap,
    pub num: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_groupset() {
    assert_eq!(::std::mem::size_of::<groupset>() , 16usize , concat ! (
               "Size of: " , stringify ! ( groupset ) ));
    assert_eq! (::std::mem::align_of::<groupset>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( groupset ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const groupset ) ) . array as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( groupset ) , "::" ,
                stringify ! ( array ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const groupset ) ) . num as * const _ as usize
                } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( groupset ) , "::" ,
                stringify ! ( num ) ));
}
impl Clone for groupset {
    fn clone(&self) -> Self { *self }
}
pub type Groupset = *mut groupset;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum loop_return { LOOP_OK = 0, LOOP_EMPTY = 1, LOOP_ERROR = 2, }
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum source_return {
    SOURCE_OK = 0,
    SOURCE_NOT_FOUND = 1,
    SOURCE_ERROR = 2,
}
pub const OPT_INVALID: _bindgen_ty_30 = _bindgen_ty_30::OPT_INVALID;
pub const ALIASESOPT: _bindgen_ty_30 = _bindgen_ty_30::ALIASESOPT;
pub const ALIASFUNCDEF: _bindgen_ty_30 = _bindgen_ty_30::ALIASFUNCDEF;
pub const ALLEXPORT: _bindgen_ty_30 = _bindgen_ty_30::ALLEXPORT;
pub const ALWAYSLASTPROMPT: _bindgen_ty_30 = _bindgen_ty_30::ALWAYSLASTPROMPT;
pub const ALWAYSTOEND: _bindgen_ty_30 = _bindgen_ty_30::ALWAYSTOEND;
pub const APPENDHISTORY: _bindgen_ty_30 = _bindgen_ty_30::APPENDHISTORY;
pub const AUTOCD: _bindgen_ty_30 = _bindgen_ty_30::AUTOCD;
pub const AUTOCONTINUE: _bindgen_ty_30 = _bindgen_ty_30::AUTOCONTINUE;
pub const AUTOLIST: _bindgen_ty_30 = _bindgen_ty_30::AUTOLIST;
pub const AUTOMENU: _bindgen_ty_30 = _bindgen_ty_30::AUTOMENU;
pub const AUTONAMEDIRS: _bindgen_ty_30 = _bindgen_ty_30::AUTONAMEDIRS;
pub const AUTOPARAMKEYS: _bindgen_ty_30 = _bindgen_ty_30::AUTOPARAMKEYS;
pub const AUTOPARAMSLASH: _bindgen_ty_30 = _bindgen_ty_30::AUTOPARAMSLASH;
pub const AUTOPUSHD: _bindgen_ty_30 = _bindgen_ty_30::AUTOPUSHD;
pub const AUTOREMOVESLASH: _bindgen_ty_30 = _bindgen_ty_30::AUTOREMOVESLASH;
pub const AUTORESUME: _bindgen_ty_30 = _bindgen_ty_30::AUTORESUME;
pub const BADPATTERN: _bindgen_ty_30 = _bindgen_ty_30::BADPATTERN;
pub const BANGHIST: _bindgen_ty_30 = _bindgen_ty_30::BANGHIST;
pub const BAREGLOBQUAL: _bindgen_ty_30 = _bindgen_ty_30::BAREGLOBQUAL;
pub const BASHAUTOLIST: _bindgen_ty_30 = _bindgen_ty_30::BASHAUTOLIST;
pub const BASHREMATCH: _bindgen_ty_30 = _bindgen_ty_30::BASHREMATCH;
pub const BEEP: _bindgen_ty_30 = _bindgen_ty_30::BEEP;
pub const BGNICE: _bindgen_ty_30 = _bindgen_ty_30::BGNICE;
pub const BRACECCL: _bindgen_ty_30 = _bindgen_ty_30::BRACECCL;
pub const BSDECHO: _bindgen_ty_30 = _bindgen_ty_30::BSDECHO;
pub const CASEGLOB: _bindgen_ty_30 = _bindgen_ty_30::CASEGLOB;
pub const CASEMATCH: _bindgen_ty_30 = _bindgen_ty_30::CASEMATCH;
pub const CBASES: _bindgen_ty_30 = _bindgen_ty_30::CBASES;
pub const CDABLEVARS: _bindgen_ty_30 = _bindgen_ty_30::CDABLEVARS;
pub const CHASEDOTS: _bindgen_ty_30 = _bindgen_ty_30::CHASEDOTS;
pub const CHASELINKS: _bindgen_ty_30 = _bindgen_ty_30::CHASELINKS;
pub const CHECKJOBS: _bindgen_ty_30 = _bindgen_ty_30::CHECKJOBS;
pub const CLOBBER: _bindgen_ty_30 = _bindgen_ty_30::CLOBBER;
pub const APPENDCREATE: _bindgen_ty_30 = _bindgen_ty_30::APPENDCREATE;
pub const COMBININGCHARS: _bindgen_ty_30 = _bindgen_ty_30::COMBININGCHARS;
pub const COMPLETEALIASES: _bindgen_ty_30 = _bindgen_ty_30::COMPLETEALIASES;
pub const COMPLETEINWORD: _bindgen_ty_30 = _bindgen_ty_30::COMPLETEINWORD;
pub const CORRECT: _bindgen_ty_30 = _bindgen_ty_30::CORRECT;
pub const CORRECTALL: _bindgen_ty_30 = _bindgen_ty_30::CORRECTALL;
pub const CONTINUEONERROR: _bindgen_ty_30 = _bindgen_ty_30::CONTINUEONERROR;
pub const CPRECEDENCES: _bindgen_ty_30 = _bindgen_ty_30::CPRECEDENCES;
pub const CSHJUNKIEHISTORY: _bindgen_ty_30 = _bindgen_ty_30::CSHJUNKIEHISTORY;
pub const CSHJUNKIELOOPS: _bindgen_ty_30 = _bindgen_ty_30::CSHJUNKIELOOPS;
pub const CSHJUNKIEQUOTES: _bindgen_ty_30 = _bindgen_ty_30::CSHJUNKIEQUOTES;
pub const CSHNULLCMD: _bindgen_ty_30 = _bindgen_ty_30::CSHNULLCMD;
pub const CSHNULLGLOB: _bindgen_ty_30 = _bindgen_ty_30::CSHNULLGLOB;
pub const DEBUGBEFORECMD: _bindgen_ty_30 = _bindgen_ty_30::DEBUGBEFORECMD;
pub const EMACSMODE: _bindgen_ty_30 = _bindgen_ty_30::EMACSMODE;
pub const EQUALS: _bindgen_ty_30 = _bindgen_ty_30::EQUALS;
pub const ERREXIT: _bindgen_ty_30 = _bindgen_ty_30::ERREXIT;
pub const ERRRETURN: _bindgen_ty_30 = _bindgen_ty_30::ERRRETURN;
pub const EXECOPT: _bindgen_ty_30 = _bindgen_ty_30::EXECOPT;
pub const EXTENDEDGLOB: _bindgen_ty_30 = _bindgen_ty_30::EXTENDEDGLOB;
pub const EXTENDEDHISTORY: _bindgen_ty_30 = _bindgen_ty_30::EXTENDEDHISTORY;
pub const EVALLINENO: _bindgen_ty_30 = _bindgen_ty_30::EVALLINENO;
pub const FLOWCONTROL: _bindgen_ty_30 = _bindgen_ty_30::FLOWCONTROL;
pub const FORCEFLOAT: _bindgen_ty_30 = _bindgen_ty_30::FORCEFLOAT;
pub const FUNCTIONARGZERO: _bindgen_ty_30 = _bindgen_ty_30::FUNCTIONARGZERO;
pub const GLOBOPT: _bindgen_ty_30 = _bindgen_ty_30::GLOBOPT;
pub const GLOBALEXPORT: _bindgen_ty_30 = _bindgen_ty_30::GLOBALEXPORT;
pub const GLOBALRCS: _bindgen_ty_30 = _bindgen_ty_30::GLOBALRCS;
pub const GLOBASSIGN: _bindgen_ty_30 = _bindgen_ty_30::GLOBASSIGN;
pub const GLOBCOMPLETE: _bindgen_ty_30 = _bindgen_ty_30::GLOBCOMPLETE;
pub const GLOBDOTS: _bindgen_ty_30 = _bindgen_ty_30::GLOBDOTS;
pub const GLOBSTARSHORT: _bindgen_ty_30 = _bindgen_ty_30::GLOBSTARSHORT;
pub const GLOBSUBST: _bindgen_ty_30 = _bindgen_ty_30::GLOBSUBST;
pub const HASHCMDS: _bindgen_ty_30 = _bindgen_ty_30::HASHCMDS;
pub const HASHDIRS: _bindgen_ty_30 = _bindgen_ty_30::HASHDIRS;
pub const HASHEXECUTABLESONLY: _bindgen_ty_30 =
    _bindgen_ty_30::HASHEXECUTABLESONLY;
pub const HASHLISTALL: _bindgen_ty_30 = _bindgen_ty_30::HASHLISTALL;
pub const HISTALLOWCLOBBER: _bindgen_ty_30 = _bindgen_ty_30::HISTALLOWCLOBBER;
pub const HISTBEEP: _bindgen_ty_30 = _bindgen_ty_30::HISTBEEP;
pub const HISTEXPIREDUPSFIRST: _bindgen_ty_30 =
    _bindgen_ty_30::HISTEXPIREDUPSFIRST;
pub const HISTFCNTLLOCK: _bindgen_ty_30 = _bindgen_ty_30::HISTFCNTLLOCK;
pub const HISTFINDNODUPS: _bindgen_ty_30 = _bindgen_ty_30::HISTFINDNODUPS;
pub const HISTIGNOREALLDUPS: _bindgen_ty_30 =
    _bindgen_ty_30::HISTIGNOREALLDUPS;
pub const HISTIGNOREDUPS: _bindgen_ty_30 = _bindgen_ty_30::HISTIGNOREDUPS;
pub const HISTIGNORESPACE: _bindgen_ty_30 = _bindgen_ty_30::HISTIGNORESPACE;
pub const HISTLEXWORDS: _bindgen_ty_30 = _bindgen_ty_30::HISTLEXWORDS;
pub const HISTNOFUNCTIONS: _bindgen_ty_30 = _bindgen_ty_30::HISTNOFUNCTIONS;
pub const HISTNOSTORE: _bindgen_ty_30 = _bindgen_ty_30::HISTNOSTORE;
pub const HISTREDUCEBLANKS: _bindgen_ty_30 = _bindgen_ty_30::HISTREDUCEBLANKS;
pub const HISTSAVEBYCOPY: _bindgen_ty_30 = _bindgen_ty_30::HISTSAVEBYCOPY;
pub const HISTSAVENODUPS: _bindgen_ty_30 = _bindgen_ty_30::HISTSAVENODUPS;
pub const HISTSUBSTPATTERN: _bindgen_ty_30 = _bindgen_ty_30::HISTSUBSTPATTERN;
pub const HISTVERIFY: _bindgen_ty_30 = _bindgen_ty_30::HISTVERIFY;
pub const HUP: _bindgen_ty_30 = _bindgen_ty_30::HUP;
pub const IGNOREBRACES: _bindgen_ty_30 = _bindgen_ty_30::IGNOREBRACES;
pub const IGNORECLOSEBRACES: _bindgen_ty_30 =
    _bindgen_ty_30::IGNORECLOSEBRACES;
pub const IGNOREEOF: _bindgen_ty_30 = _bindgen_ty_30::IGNOREEOF;
pub const INCAPPENDHISTORY: _bindgen_ty_30 = _bindgen_ty_30::INCAPPENDHISTORY;
pub const INCAPPENDHISTORYTIME: _bindgen_ty_30 =
    _bindgen_ty_30::INCAPPENDHISTORYTIME;
pub const INTERACTIVE: _bindgen_ty_30 = _bindgen_ty_30::INTERACTIVE;
pub const INTERACTIVECOMMENTS: _bindgen_ty_30 =
    _bindgen_ty_30::INTERACTIVECOMMENTS;
pub const KSHARRAYS: _bindgen_ty_30 = _bindgen_ty_30::KSHARRAYS;
pub const KSHAUTOLOAD: _bindgen_ty_30 = _bindgen_ty_30::KSHAUTOLOAD;
pub const KSHGLOB: _bindgen_ty_30 = _bindgen_ty_30::KSHGLOB;
pub const KSHOPTIONPRINT: _bindgen_ty_30 = _bindgen_ty_30::KSHOPTIONPRINT;
pub const KSHTYPESET: _bindgen_ty_30 = _bindgen_ty_30::KSHTYPESET;
pub const KSHZEROSUBSCRIPT: _bindgen_ty_30 = _bindgen_ty_30::KSHZEROSUBSCRIPT;
pub const LISTAMBIGUOUS: _bindgen_ty_30 = _bindgen_ty_30::LISTAMBIGUOUS;
pub const LISTBEEP: _bindgen_ty_30 = _bindgen_ty_30::LISTBEEP;
pub const LISTPACKED: _bindgen_ty_30 = _bindgen_ty_30::LISTPACKED;
pub const LISTROWSFIRST: _bindgen_ty_30 = _bindgen_ty_30::LISTROWSFIRST;
pub const LISTTYPES: _bindgen_ty_30 = _bindgen_ty_30::LISTTYPES;
pub const LOCALLOOPS: _bindgen_ty_30 = _bindgen_ty_30::LOCALLOOPS;
pub const LOCALOPTIONS: _bindgen_ty_30 = _bindgen_ty_30::LOCALOPTIONS;
pub const LOCALPATTERNS: _bindgen_ty_30 = _bindgen_ty_30::LOCALPATTERNS;
pub const LOCALTRAPS: _bindgen_ty_30 = _bindgen_ty_30::LOCALTRAPS;
pub const LOGINSHELL: _bindgen_ty_30 = _bindgen_ty_30::LOGINSHELL;
pub const LONGLISTJOBS: _bindgen_ty_30 = _bindgen_ty_30::LONGLISTJOBS;
pub const MAGICEQUALSUBST: _bindgen_ty_30 = _bindgen_ty_30::MAGICEQUALSUBST;
pub const MAILWARNING: _bindgen_ty_30 = _bindgen_ty_30::MAILWARNING;
pub const MARKDIRS: _bindgen_ty_30 = _bindgen_ty_30::MARKDIRS;
pub const MENUCOMPLETE: _bindgen_ty_30 = _bindgen_ty_30::MENUCOMPLETE;
pub const MONITOR: _bindgen_ty_30 = _bindgen_ty_30::MONITOR;
pub const MULTIBYTE: _bindgen_ty_30 = _bindgen_ty_30::MULTIBYTE;
pub const MULTIFUNCDEF: _bindgen_ty_30 = _bindgen_ty_30::MULTIFUNCDEF;
pub const MULTIOS: _bindgen_ty_30 = _bindgen_ty_30::MULTIOS;
pub const NOMATCH: _bindgen_ty_30 = _bindgen_ty_30::NOMATCH;
pub const NOTIFY: _bindgen_ty_30 = _bindgen_ty_30::NOTIFY;
pub const NULLGLOB: _bindgen_ty_30 = _bindgen_ty_30::NULLGLOB;
pub const NUMERICGLOBSORT: _bindgen_ty_30 = _bindgen_ty_30::NUMERICGLOBSORT;
pub const OCTALZEROES: _bindgen_ty_30 = _bindgen_ty_30::OCTALZEROES;
pub const OVERSTRIKE: _bindgen_ty_30 = _bindgen_ty_30::OVERSTRIKE;
pub const PATHDIRS: _bindgen_ty_30 = _bindgen_ty_30::PATHDIRS;
pub const PATHSCRIPT: _bindgen_ty_30 = _bindgen_ty_30::PATHSCRIPT;
pub const PIPEFAIL: _bindgen_ty_30 = _bindgen_ty_30::PIPEFAIL;
pub const POSIXALIASES: _bindgen_ty_30 = _bindgen_ty_30::POSIXALIASES;
pub const POSIXARGZERO: _bindgen_ty_30 = _bindgen_ty_30::POSIXARGZERO;
pub const POSIXBUILTINS: _bindgen_ty_30 = _bindgen_ty_30::POSIXBUILTINS;
pub const POSIXCD: _bindgen_ty_30 = _bindgen_ty_30::POSIXCD;
pub const POSIXIDENTIFIERS: _bindgen_ty_30 = _bindgen_ty_30::POSIXIDENTIFIERS;
pub const POSIXJOBS: _bindgen_ty_30 = _bindgen_ty_30::POSIXJOBS;
pub const POSIXSTRINGS: _bindgen_ty_30 = _bindgen_ty_30::POSIXSTRINGS;
pub const POSIXTRAPS: _bindgen_ty_30 = _bindgen_ty_30::POSIXTRAPS;
pub const PRINTEIGHTBIT: _bindgen_ty_30 = _bindgen_ty_30::PRINTEIGHTBIT;
pub const PRINTEXITVALUE: _bindgen_ty_30 = _bindgen_ty_30::PRINTEXITVALUE;
pub const PRIVILEGED: _bindgen_ty_30 = _bindgen_ty_30::PRIVILEGED;
pub const PROMPTBANG: _bindgen_ty_30 = _bindgen_ty_30::PROMPTBANG;
pub const PROMPTCR: _bindgen_ty_30 = _bindgen_ty_30::PROMPTCR;
pub const PROMPTPERCENT: _bindgen_ty_30 = _bindgen_ty_30::PROMPTPERCENT;
pub const PROMPTSP: _bindgen_ty_30 = _bindgen_ty_30::PROMPTSP;
pub const PROMPTSUBST: _bindgen_ty_30 = _bindgen_ty_30::PROMPTSUBST;
pub const PUSHDIGNOREDUPS: _bindgen_ty_30 = _bindgen_ty_30::PUSHDIGNOREDUPS;
pub const PUSHDMINUS: _bindgen_ty_30 = _bindgen_ty_30::PUSHDMINUS;
pub const PUSHDSILENT: _bindgen_ty_30 = _bindgen_ty_30::PUSHDSILENT;
pub const PUSHDTOHOME: _bindgen_ty_30 = _bindgen_ty_30::PUSHDTOHOME;
pub const RCEXPANDPARAM: _bindgen_ty_30 = _bindgen_ty_30::RCEXPANDPARAM;
pub const RCQUOTES: _bindgen_ty_30 = _bindgen_ty_30::RCQUOTES;
pub const RCS: _bindgen_ty_30 = _bindgen_ty_30::RCS;
pub const RECEXACT: _bindgen_ty_30 = _bindgen_ty_30::RECEXACT;
pub const REMATCHPCRE: _bindgen_ty_30 = _bindgen_ty_30::REMATCHPCRE;
pub const RESTRICTED: _bindgen_ty_30 = _bindgen_ty_30::RESTRICTED;
pub const RMSTARSILENT: _bindgen_ty_30 = _bindgen_ty_30::RMSTARSILENT;
pub const RMSTARWAIT: _bindgen_ty_30 = _bindgen_ty_30::RMSTARWAIT;
pub const SHAREHISTORY: _bindgen_ty_30 = _bindgen_ty_30::SHAREHISTORY;
pub const SHFILEEXPANSION: _bindgen_ty_30 = _bindgen_ty_30::SHFILEEXPANSION;
pub const SHGLOB: _bindgen_ty_30 = _bindgen_ty_30::SHGLOB;
pub const SHINSTDIN: _bindgen_ty_30 = _bindgen_ty_30::SHINSTDIN;
pub const SHNULLCMD: _bindgen_ty_30 = _bindgen_ty_30::SHNULLCMD;
pub const SHOPTIONLETTERS: _bindgen_ty_30 = _bindgen_ty_30::SHOPTIONLETTERS;
pub const SHORTLOOPS: _bindgen_ty_30 = _bindgen_ty_30::SHORTLOOPS;
pub const SHWORDSPLIT: _bindgen_ty_30 = _bindgen_ty_30::SHWORDSPLIT;
pub const SINGLECOMMAND: _bindgen_ty_30 = _bindgen_ty_30::SINGLECOMMAND;
pub const SINGLELINEZLE: _bindgen_ty_30 = _bindgen_ty_30::SINGLELINEZLE;
pub const SOURCETRACE: _bindgen_ty_30 = _bindgen_ty_30::SOURCETRACE;
pub const SUNKEYBOARDHACK: _bindgen_ty_30 = _bindgen_ty_30::SUNKEYBOARDHACK;
pub const TRANSIENTRPROMPT: _bindgen_ty_30 = _bindgen_ty_30::TRANSIENTRPROMPT;
pub const TRAPSASYNC: _bindgen_ty_30 = _bindgen_ty_30::TRAPSASYNC;
pub const TYPESETSILENT: _bindgen_ty_30 = _bindgen_ty_30::TYPESETSILENT;
pub const UNSET: _bindgen_ty_30 = _bindgen_ty_30::UNSET;
pub const VERBOSE: _bindgen_ty_30 = _bindgen_ty_30::VERBOSE;
pub const VIMODE: _bindgen_ty_30 = _bindgen_ty_30::VIMODE;
pub const WARNCREATEGLOBAL: _bindgen_ty_30 = _bindgen_ty_30::WARNCREATEGLOBAL;
pub const WARNNESTEDVAR: _bindgen_ty_30 = _bindgen_ty_30::WARNNESTEDVAR;
pub const XTRACE: _bindgen_ty_30 = _bindgen_ty_30::XTRACE;
pub const USEZLE: _bindgen_ty_30 = _bindgen_ty_30::USEZLE;
pub const DVORAK: _bindgen_ty_30 = _bindgen_ty_30::DVORAK;
pub const OPT_SIZE: _bindgen_ty_30 = _bindgen_ty_30::OPT_SIZE;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_30 {
    OPT_INVALID = 0,
    ALIASESOPT = 1,
    ALIASFUNCDEF = 2,
    ALLEXPORT = 3,
    ALWAYSLASTPROMPT = 4,
    ALWAYSTOEND = 5,
    APPENDHISTORY = 6,
    AUTOCD = 7,
    AUTOCONTINUE = 8,
    AUTOLIST = 9,
    AUTOMENU = 10,
    AUTONAMEDIRS = 11,
    AUTOPARAMKEYS = 12,
    AUTOPARAMSLASH = 13,
    AUTOPUSHD = 14,
    AUTOREMOVESLASH = 15,
    AUTORESUME = 16,
    BADPATTERN = 17,
    BANGHIST = 18,
    BAREGLOBQUAL = 19,
    BASHAUTOLIST = 20,
    BASHREMATCH = 21,
    BEEP = 22,
    BGNICE = 23,
    BRACECCL = 24,
    BSDECHO = 25,
    CASEGLOB = 26,
    CASEMATCH = 27,
    CBASES = 28,
    CDABLEVARS = 29,
    CHASEDOTS = 30,
    CHASELINKS = 31,
    CHECKJOBS = 32,
    CLOBBER = 33,
    APPENDCREATE = 34,
    COMBININGCHARS = 35,
    COMPLETEALIASES = 36,
    COMPLETEINWORD = 37,
    CORRECT = 38,
    CORRECTALL = 39,
    CONTINUEONERROR = 40,
    CPRECEDENCES = 41,
    CSHJUNKIEHISTORY = 42,
    CSHJUNKIELOOPS = 43,
    CSHJUNKIEQUOTES = 44,
    CSHNULLCMD = 45,
    CSHNULLGLOB = 46,
    DEBUGBEFORECMD = 47,
    EMACSMODE = 48,
    EQUALS = 49,
    ERREXIT = 50,
    ERRRETURN = 51,
    EXECOPT = 52,
    EXTENDEDGLOB = 53,
    EXTENDEDHISTORY = 54,
    EVALLINENO = 55,
    FLOWCONTROL = 56,
    FORCEFLOAT = 57,
    FUNCTIONARGZERO = 58,
    GLOBOPT = 59,
    GLOBALEXPORT = 60,
    GLOBALRCS = 61,
    GLOBASSIGN = 62,
    GLOBCOMPLETE = 63,
    GLOBDOTS = 64,
    GLOBSTARSHORT = 65,
    GLOBSUBST = 66,
    HASHCMDS = 67,
    HASHDIRS = 68,
    HASHEXECUTABLESONLY = 69,
    HASHLISTALL = 70,
    HISTALLOWCLOBBER = 71,
    HISTBEEP = 72,
    HISTEXPIREDUPSFIRST = 73,
    HISTFCNTLLOCK = 74,
    HISTFINDNODUPS = 75,
    HISTIGNOREALLDUPS = 76,
    HISTIGNOREDUPS = 77,
    HISTIGNORESPACE = 78,
    HISTLEXWORDS = 79,
    HISTNOFUNCTIONS = 80,
    HISTNOSTORE = 81,
    HISTREDUCEBLANKS = 82,
    HISTSAVEBYCOPY = 83,
    HISTSAVENODUPS = 84,
    HISTSUBSTPATTERN = 85,
    HISTVERIFY = 86,
    HUP = 87,
    IGNOREBRACES = 88,
    IGNORECLOSEBRACES = 89,
    IGNOREEOF = 90,
    INCAPPENDHISTORY = 91,
    INCAPPENDHISTORYTIME = 92,
    INTERACTIVE = 93,
    INTERACTIVECOMMENTS = 94,
    KSHARRAYS = 95,
    KSHAUTOLOAD = 96,
    KSHGLOB = 97,
    KSHOPTIONPRINT = 98,
    KSHTYPESET = 99,
    KSHZEROSUBSCRIPT = 100,
    LISTAMBIGUOUS = 101,
    LISTBEEP = 102,
    LISTPACKED = 103,
    LISTROWSFIRST = 104,
    LISTTYPES = 105,
    LOCALLOOPS = 106,
    LOCALOPTIONS = 107,
    LOCALPATTERNS = 108,
    LOCALTRAPS = 109,
    LOGINSHELL = 110,
    LONGLISTJOBS = 111,
    MAGICEQUALSUBST = 112,
    MAILWARNING = 113,
    MARKDIRS = 114,
    MENUCOMPLETE = 115,
    MONITOR = 116,
    MULTIBYTE = 117,
    MULTIFUNCDEF = 118,
    MULTIOS = 119,
    NOMATCH = 120,
    NOTIFY = 121,
    NULLGLOB = 122,
    NUMERICGLOBSORT = 123,
    OCTALZEROES = 124,
    OVERSTRIKE = 125,
    PATHDIRS = 126,
    PATHSCRIPT = 127,
    PIPEFAIL = 128,
    POSIXALIASES = 129,
    POSIXARGZERO = 130,
    POSIXBUILTINS = 131,
    POSIXCD = 132,
    POSIXIDENTIFIERS = 133,
    POSIXJOBS = 134,
    POSIXSTRINGS = 135,
    POSIXTRAPS = 136,
    PRINTEIGHTBIT = 137,
    PRINTEXITVALUE = 138,
    PRIVILEGED = 139,
    PROMPTBANG = 140,
    PROMPTCR = 141,
    PROMPTPERCENT = 142,
    PROMPTSP = 143,
    PROMPTSUBST = 144,
    PUSHDIGNOREDUPS = 145,
    PUSHDMINUS = 146,
    PUSHDSILENT = 147,
    PUSHDTOHOME = 148,
    RCEXPANDPARAM = 149,
    RCQUOTES = 150,
    RCS = 151,
    RECEXACT = 152,
    REMATCHPCRE = 153,
    RESTRICTED = 154,
    RMSTARSILENT = 155,
    RMSTARWAIT = 156,
    SHAREHISTORY = 157,
    SHFILEEXPANSION = 158,
    SHGLOB = 159,
    SHINSTDIN = 160,
    SHNULLCMD = 161,
    SHOPTIONLETTERS = 162,
    SHORTLOOPS = 163,
    SHWORDSPLIT = 164,
    SINGLECOMMAND = 165,
    SINGLELINEZLE = 166,
    SOURCETRACE = 167,
    SUNKEYBOARDHACK = 168,
    TRANSIENTRPROMPT = 169,
    TRAPSASYNC = 170,
    TYPESETSILENT = 171,
    UNSET = 172,
    VERBOSE = 173,
    VIMODE = 174,
    WARNCREATEGLOBAL = 175,
    WARNNESTEDVAR = 176,
    XTRACE = 177,
    USEZLE = 178,
    DVORAK = 179,
    OPT_SIZE = 180,
}
pub type OptIndex = ::std::os::raw::c_uchar;
/***********************************************/
#[repr(C)]
#[derive(Debug, Copy)]
pub struct ttyinfo {
    pub tio: termios,
    pub winsize: winsize,
}
#[test]
fn bindgen_test_layout_ttyinfo() {
    assert_eq!(::std::mem::size_of::<ttyinfo>() , 68usize , concat ! (
               "Size of: " , stringify ! ( ttyinfo ) ));
    assert_eq! (::std::mem::align_of::<ttyinfo>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( ttyinfo ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ttyinfo ) ) . tio as * const _ as usize }
                , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( ttyinfo ) , "::" ,
                stringify ! ( tio ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ttyinfo ) ) . winsize as * const _ as
                usize } , 60usize , concat ! (
                "Alignment of field: " , stringify ! ( ttyinfo ) , "::" ,
                stringify ! ( winsize ) ));
}
impl Clone for ttyinfo {
    fn clone(&self) -> Self { *self }
}
pub const TSC_RAW: _bindgen_ty_31 = _bindgen_ty_31::TSC_RAW;
pub const TSC_PROMPT: _bindgen_ty_31 = _bindgen_ty_31::TSC_PROMPT;
pub const TSC_OUTPUT_MASK: _bindgen_ty_31 = _bindgen_ty_31::TSC_OUTPUT_MASK;
pub const TSC_DIRTY: _bindgen_ty_31 = _bindgen_ty_31::TSC_DIRTY;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_31 {
    TSC_RAW = 1,
    TSC_PROMPT = 2,
    TSC_OUTPUT_MASK = 3,
    TSC_DIRTY = 4,
}
/*********************
 * Memory management *
 *********************/
pub type Heapid = ::std::os::raw::c_uint;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum trap_state {
    TRAP_STATE_INACTIVE = 0,
    TRAP_STATE_PRIMED = 1,
    TRAP_STATE_FORCE_RETURN = 2,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum errflag_bits {
    ERRFLAG_ERROR = 1,
    ERRFLAG_INT = 2,
    ERRFLAG_HARD = 4,
}
/***********/
pub type CompareFn =
    ::std::option::Option<unsafe extern "C" fn(arg1:
                                                   *const ::std::os::raw::c_void,
                                               arg2:
                                                   *const ::std::os::raw::c_void)
                              -> ::std::os::raw::c_int>;
pub const SORTIT_ANYOLDHOW: _bindgen_ty_32 = _bindgen_ty_32::SORTIT_ANYOLDHOW;
pub const SORTIT_IGNORING_CASE: _bindgen_ty_32 =
    _bindgen_ty_32::SORTIT_IGNORING_CASE;
pub const SORTIT_NUMERICALLY: _bindgen_ty_32 =
    _bindgen_ty_32::SORTIT_NUMERICALLY;
pub const SORTIT_BACKWARDS: _bindgen_ty_32 = _bindgen_ty_32::SORTIT_BACKWARDS;
pub const SORTIT_IGNORING_BACKSLASHES: _bindgen_ty_32 =
    _bindgen_ty_32::SORTIT_IGNORING_BACKSLASHES;
pub const SORTIT_SOMEHOW: _bindgen_ty_32 = _bindgen_ty_32::SORTIT_SOMEHOW;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_32 {
    SORTIT_ANYOLDHOW = 0,
    SORTIT_IGNORING_CASE = 1,
    SORTIT_NUMERICALLY = 2,
    SORTIT_BACKWARDS = 4,
    SORTIT_IGNORING_BACKSLASHES = 8,
    SORTIT_SOMEHOW = 16,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct sortelt {
    pub orig: *mut ::std::os::raw::c_char,
    pub cmp: *const ::std::os::raw::c_char,
    pub origlen: ::std::os::raw::c_int,
    pub len: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_sortelt() {
    assert_eq!(::std::mem::size_of::<sortelt>() , 24usize , concat ! (
               "Size of: " , stringify ! ( sortelt ) ));
    assert_eq! (::std::mem::align_of::<sortelt>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( sortelt ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sortelt ) ) . orig as * const _ as usize
                } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( sortelt ) , "::" ,
                stringify ! ( orig ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sortelt ) ) . cmp as * const _ as usize }
                , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( sortelt ) , "::" ,
                stringify ! ( cmp ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sortelt ) ) . origlen as * const _ as
                usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( sortelt ) , "::" ,
                stringify ! ( origlen ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sortelt ) ) . len as * const _ as usize }
                , 20usize , concat ! (
                "Alignment of field: " , stringify ! ( sortelt ) , "::" ,
                stringify ! ( len ) ));
}
impl Clone for sortelt {
    fn clone(&self) -> Self { *self }
}
pub type SortElt = *mut sortelt;
/*********************************************************/
#[repr(C)]
#[derive(Debug, Copy)]
pub struct hist_stack {
    pub histactive: ::std::os::raw::c_int,
    pub histdone: ::std::os::raw::c_int,
    pub stophist: ::std::os::raw::c_int,
    pub hlinesz: ::std::os::raw::c_int,
    pub defev: zlong,
    pub hline: *mut ::std::os::raw::c_char,
    pub hptr: *mut ::std::os::raw::c_char,
    pub chwords: *mut ::std::os::raw::c_short,
    pub chwordlen: ::std::os::raw::c_int,
    pub chwordpos: ::std::os::raw::c_int,
    pub hgetc: ::std::option::Option<unsafe extern "C" fn()
                                         -> ::std::os::raw::c_int>,
    pub hungetc: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                ::std::os::raw::c_int)>,
    pub hwaddc: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                               ::std::os::raw::c_int)>,
    pub hwbegin: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                ::std::os::raw::c_int)>,
    pub hwend: ::std::option::Option<unsafe extern "C" fn()>,
    pub addtoline: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                  ::std::os::raw::c_int)>,
    pub cstack: *mut ::std::os::raw::c_uchar,
    pub csp: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_hist_stack() {
    assert_eq!(::std::mem::size_of::<hist_stack>() , 120usize , concat ! (
               "Size of: " , stringify ! ( hist_stack ) ));
    assert_eq! (::std::mem::align_of::<hist_stack>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( hist_stack ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const hist_stack ) ) . histactive as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( hist_stack ) , "::" ,
                stringify ! ( histactive ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const hist_stack ) ) . histdone as * const _ as
                usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( hist_stack ) , "::" ,
                stringify ! ( histdone ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const hist_stack ) ) . stophist as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( hist_stack ) , "::" ,
                stringify ! ( stophist ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const hist_stack ) ) . hlinesz as * const _ as
                usize } , 12usize , concat ! (
                "Alignment of field: " , stringify ! ( hist_stack ) , "::" ,
                stringify ! ( hlinesz ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const hist_stack ) ) . defev as * const _ as
                usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( hist_stack ) , "::" ,
                stringify ! ( defev ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const hist_stack ) ) . hline as * const _ as
                usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( hist_stack ) , "::" ,
                stringify ! ( hline ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const hist_stack ) ) . hptr as * const _ as
                usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( hist_stack ) , "::" ,
                stringify ! ( hptr ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const hist_stack ) ) . chwords as * const _ as
                usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! ( hist_stack ) , "::" ,
                stringify ! ( chwords ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const hist_stack ) ) . chwordlen as * const _
                as usize } , 48usize , concat ! (
                "Alignment of field: " , stringify ! ( hist_stack ) , "::" ,
                stringify ! ( chwordlen ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const hist_stack ) ) . chwordpos as * const _
                as usize } , 52usize , concat ! (
                "Alignment of field: " , stringify ! ( hist_stack ) , "::" ,
                stringify ! ( chwordpos ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const hist_stack ) ) . hgetc as * const _ as
                usize } , 56usize , concat ! (
                "Alignment of field: " , stringify ! ( hist_stack ) , "::" ,
                stringify ! ( hgetc ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const hist_stack ) ) . hungetc as * const _ as
                usize } , 64usize , concat ! (
                "Alignment of field: " , stringify ! ( hist_stack ) , "::" ,
                stringify ! ( hungetc ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const hist_stack ) ) . hwaddc as * const _ as
                usize } , 72usize , concat ! (
                "Alignment of field: " , stringify ! ( hist_stack ) , "::" ,
                stringify ! ( hwaddc ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const hist_stack ) ) . hwbegin as * const _ as
                usize } , 80usize , concat ! (
                "Alignment of field: " , stringify ! ( hist_stack ) , "::" ,
                stringify ! ( hwbegin ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const hist_stack ) ) . hwend as * const _ as
                usize } , 88usize , concat ! (
                "Alignment of field: " , stringify ! ( hist_stack ) , "::" ,
                stringify ! ( hwend ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const hist_stack ) ) . addtoline as * const _
                as usize } , 96usize , concat ! (
                "Alignment of field: " , stringify ! ( hist_stack ) , "::" ,
                stringify ! ( addtoline ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const hist_stack ) ) . cstack as * const _ as
                usize } , 104usize , concat ! (
                "Alignment of field: " , stringify ! ( hist_stack ) , "::" ,
                stringify ! ( cstack ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const hist_stack ) ) . csp as * const _ as
                usize } , 112usize , concat ! (
                "Alignment of field: " , stringify ! ( hist_stack ) , "::" ,
                stringify ! ( csp ) ));
}
impl Clone for hist_stack {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct lexbufstate {
    pub ptr: *mut ::std::os::raw::c_char,
    pub siz: ::std::os::raw::c_int,
    pub len: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_lexbufstate() {
    assert_eq!(::std::mem::size_of::<lexbufstate>() , 16usize , concat ! (
               "Size of: " , stringify ! ( lexbufstate ) ));
    assert_eq! (::std::mem::align_of::<lexbufstate>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( lexbufstate ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const lexbufstate ) ) . ptr as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( lexbufstate ) , "::" ,
                stringify ! ( ptr ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const lexbufstate ) ) . siz as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( lexbufstate ) , "::" ,
                stringify ! ( siz ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const lexbufstate ) ) . len as * const _ as
                usize } , 12usize , concat ! (
                "Alignment of field: " , stringify ! ( lexbufstate ) , "::" ,
                stringify ! ( len ) ));
}
impl Clone for lexbufstate {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct lex_stack {
    pub dbparens: ::std::os::raw::c_int,
    pub isfirstln: ::std::os::raw::c_int,
    pub isfirstch: ::std::os::raw::c_int,
    pub lexflags: ::std::os::raw::c_int,
    pub tok: lextok,
    pub tokstr: *mut ::std::os::raw::c_char,
    pub zshlextext: *mut ::std::os::raw::c_char,
    pub lexbuf: lexbufstate,
    pub lex_add_raw: ::std::os::raw::c_int,
    pub tokstr_raw: *mut ::std::os::raw::c_char,
    pub lexbuf_raw: lexbufstate,
    pub lexstop: ::std::os::raw::c_int,
    pub toklineno: zlong,
}
#[test]
fn bindgen_test_layout_lex_stack() {
    assert_eq!(::std::mem::size_of::<lex_stack>() , 104usize , concat ! (
               "Size of: " , stringify ! ( lex_stack ) ));
    assert_eq! (::std::mem::align_of::<lex_stack>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( lex_stack ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const lex_stack ) ) . dbparens as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( lex_stack ) , "::" ,
                stringify ! ( dbparens ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const lex_stack ) ) . isfirstln as * const _ as
                usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( lex_stack ) , "::" ,
                stringify ! ( isfirstln ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const lex_stack ) ) . isfirstch as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( lex_stack ) , "::" ,
                stringify ! ( isfirstch ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const lex_stack ) ) . lexflags as * const _ as
                usize } , 12usize , concat ! (
                "Alignment of field: " , stringify ! ( lex_stack ) , "::" ,
                stringify ! ( lexflags ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const lex_stack ) ) . tok as * const _ as usize
                } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( lex_stack ) , "::" ,
                stringify ! ( tok ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const lex_stack ) ) . tokstr as * const _ as
                usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( lex_stack ) , "::" ,
                stringify ! ( tokstr ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const lex_stack ) ) . zshlextext as * const _
                as usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( lex_stack ) , "::" ,
                stringify ! ( zshlextext ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const lex_stack ) ) . lexbuf as * const _ as
                usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! ( lex_stack ) , "::" ,
                stringify ! ( lexbuf ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const lex_stack ) ) . lex_add_raw as * const _
                as usize } , 56usize , concat ! (
                "Alignment of field: " , stringify ! ( lex_stack ) , "::" ,
                stringify ! ( lex_add_raw ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const lex_stack ) ) . tokstr_raw as * const _
                as usize } , 64usize , concat ! (
                "Alignment of field: " , stringify ! ( lex_stack ) , "::" ,
                stringify ! ( tokstr_raw ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const lex_stack ) ) . lexbuf_raw as * const _
                as usize } , 72usize , concat ! (
                "Alignment of field: " , stringify ! ( lex_stack ) , "::" ,
                stringify ! ( lexbuf_raw ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const lex_stack ) ) . lexstop as * const _ as
                usize } , 88usize , concat ! (
                "Alignment of field: " , stringify ! ( lex_stack ) , "::" ,
                stringify ! ( lexstop ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const lex_stack ) ) . toklineno as * const _ as
                usize } , 96usize , concat ! (
                "Alignment of field: " , stringify ! ( lex_stack ) , "::" ,
                stringify ! ( toklineno ) ));
}
impl Clone for lex_stack {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct parse_stack {
    pub hdocs: *mut heredocs,
    pub incmdpos: ::std::os::raw::c_int,
    pub aliasspaceflag: ::std::os::raw::c_int,
    pub incond: ::std::os::raw::c_int,
    pub inredir: ::std::os::raw::c_int,
    pub incasepat: ::std::os::raw::c_int,
    pub isnewlin: ::std::os::raw::c_int,
    pub infor: ::std::os::raw::c_int,
    pub inrepeat_: ::std::os::raw::c_int,
    pub intypeset: ::std::os::raw::c_int,
    pub eclen: ::std::os::raw::c_int,
    pub ecused: ::std::os::raw::c_int,
    pub ecnpats: ::std::os::raw::c_int,
    pub ecbuf: Wordcode,
    pub ecstrs: Eccstr,
    pub ecsoffs: ::std::os::raw::c_int,
    pub ecssub: ::std::os::raw::c_int,
    pub ecnfunc: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_parse_stack() {
    assert_eq!(::std::mem::size_of::<parse_stack>() , 88usize , concat ! (
               "Size of: " , stringify ! ( parse_stack ) ));
    assert_eq! (::std::mem::align_of::<parse_stack>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( parse_stack ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const parse_stack ) ) . hdocs as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( parse_stack ) , "::" ,
                stringify ! ( hdocs ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const parse_stack ) ) . incmdpos as * const _
                as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( parse_stack ) , "::" ,
                stringify ! ( incmdpos ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const parse_stack ) ) . aliasspaceflag as *
                const _ as usize } , 12usize , concat ! (
                "Alignment of field: " , stringify ! ( parse_stack ) , "::" ,
                stringify ! ( aliasspaceflag ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const parse_stack ) ) . incond as * const _ as
                usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( parse_stack ) , "::" ,
                stringify ! ( incond ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const parse_stack ) ) . inredir as * const _ as
                usize } , 20usize , concat ! (
                "Alignment of field: " , stringify ! ( parse_stack ) , "::" ,
                stringify ! ( inredir ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const parse_stack ) ) . incasepat as * const _
                as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( parse_stack ) , "::" ,
                stringify ! ( incasepat ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const parse_stack ) ) . isnewlin as * const _
                as usize } , 28usize , concat ! (
                "Alignment of field: " , stringify ! ( parse_stack ) , "::" ,
                stringify ! ( isnewlin ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const parse_stack ) ) . infor as * const _ as
                usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( parse_stack ) , "::" ,
                stringify ! ( infor ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const parse_stack ) ) . inrepeat_ as * const _
                as usize } , 36usize , concat ! (
                "Alignment of field: " , stringify ! ( parse_stack ) , "::" ,
                stringify ! ( inrepeat_ ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const parse_stack ) ) . intypeset as * const _
                as usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! ( parse_stack ) , "::" ,
                stringify ! ( intypeset ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const parse_stack ) ) . eclen as * const _ as
                usize } , 44usize , concat ! (
                "Alignment of field: " , stringify ! ( parse_stack ) , "::" ,
                stringify ! ( eclen ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const parse_stack ) ) . ecused as * const _ as
                usize } , 48usize , concat ! (
                "Alignment of field: " , stringify ! ( parse_stack ) , "::" ,
                stringify ! ( ecused ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const parse_stack ) ) . ecnpats as * const _ as
                usize } , 52usize , concat ! (
                "Alignment of field: " , stringify ! ( parse_stack ) , "::" ,
                stringify ! ( ecnpats ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const parse_stack ) ) . ecbuf as * const _ as
                usize } , 56usize , concat ! (
                "Alignment of field: " , stringify ! ( parse_stack ) , "::" ,
                stringify ! ( ecbuf ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const parse_stack ) ) . ecstrs as * const _ as
                usize } , 64usize , concat ! (
                "Alignment of field: " , stringify ! ( parse_stack ) , "::" ,
                stringify ! ( ecstrs ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const parse_stack ) ) . ecsoffs as * const _ as
                usize } , 72usize , concat ! (
                "Alignment of field: " , stringify ! ( parse_stack ) , "::" ,
                stringify ! ( ecsoffs ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const parse_stack ) ) . ecssub as * const _ as
                usize } , 76usize , concat ! (
                "Alignment of field: " , stringify ! ( parse_stack ) , "::" ,
                stringify ! ( ecssub ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const parse_stack ) ) . ecnfunc as * const _ as
                usize } , 80usize , concat ! (
                "Alignment of field: " , stringify ! ( parse_stack ) , "::" ,
                stringify ! ( ecnfunc ) ));
}
impl Clone for parse_stack {
    fn clone(&self) -> Self { *self }
}
pub const CASMOD_NONE: _bindgen_ty_33 = _bindgen_ty_33::CASMOD_NONE;
pub const CASMOD_UPPER: _bindgen_ty_33 = _bindgen_ty_33::CASMOD_UPPER;
pub const CASMOD_LOWER: _bindgen_ty_33 = _bindgen_ty_33::CASMOD_LOWER;
pub const CASMOD_CAPS: _bindgen_ty_33 = _bindgen_ty_33::CASMOD_CAPS;
#[repr(u32)]
/************************/
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_33 {
    CASMOD_NONE = 0,
    CASMOD_UPPER = 1,
    CASMOD_LOWER = 2,
    CASMOD_CAPS = 3,
}
pub const GETKEY_OCTAL_ESC: _bindgen_ty_34 = _bindgen_ty_34::GETKEY_OCTAL_ESC;
pub const GETKEY_EMACS: _bindgen_ty_34 = _bindgen_ty_34::GETKEY_EMACS;
pub const GETKEY_CTRL: _bindgen_ty_34 = _bindgen_ty_34::GETKEY_CTRL;
pub const GETKEY_BACKSLASH_C: _bindgen_ty_34 =
    _bindgen_ty_34::GETKEY_BACKSLASH_C;
pub const GETKEY_DOLLAR_QUOTE: _bindgen_ty_34 =
    _bindgen_ty_34::GETKEY_DOLLAR_QUOTE;
pub const GETKEY_BACKSLASH_MINUS: _bindgen_ty_34 =
    _bindgen_ty_34::GETKEY_BACKSLASH_MINUS;
pub const GETKEY_SINGLE_CHAR: _bindgen_ty_34 =
    _bindgen_ty_34::GETKEY_SINGLE_CHAR;
pub const GETKEY_UPDATE_OFFSET: _bindgen_ty_34 =
    _bindgen_ty_34::GETKEY_UPDATE_OFFSET;
pub const GETKEY_PRINTF_PERCENT: _bindgen_ty_34 =
    _bindgen_ty_34::GETKEY_PRINTF_PERCENT;
#[repr(u32)]
/*******************************************/
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_34 {
    GETKEY_OCTAL_ESC = 1,
    GETKEY_EMACS = 2,
    GETKEY_CTRL = 4,
    GETKEY_BACKSLASH_C = 8,
    GETKEY_DOLLAR_QUOTE = 16,
    GETKEY_BACKSLASH_MINUS = 32,
    GETKEY_SINGLE_CHAR = 64,
    GETKEY_UPDATE_OFFSET = 128,
    GETKEY_PRINTF_PERCENT = 256,
}
pub const ZLCON_LINE_START: _bindgen_ty_35 = _bindgen_ty_35::ZLCON_LINE_START;
pub const ZLCON_LINE_CONT: _bindgen_ty_35 = _bindgen_ty_35::ZLCON_LINE_CONT;
pub const ZLCON_SELECT: _bindgen_ty_35 = _bindgen_ty_35::ZLCON_SELECT;
pub const ZLCON_VARED: _bindgen_ty_35 = _bindgen_ty_35::ZLCON_VARED;
#[repr(u32)]
/***************************/
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_35 {
    ZLCON_LINE_START = 0,
    ZLCON_LINE_CONT = 1,
    ZLCON_SELECT = 2,
    ZLCON_VARED = 3,
}
/****************/
pub type CompctlReadFn =
    ::std::option::Option<unsafe extern "C" fn(arg1:
                                                   *mut ::std::os::raw::c_char,
                                               arg2:
                                                   *mut *mut ::std::os::raw::c_char,
                                               arg3: Options,
                                               arg4:
                                                   *mut ::std::os::raw::c_char)
                              -> ::std::os::raw::c_int>;
pub type ZleEntryPoint =
    ::std::option::Option<unsafe extern "C" fn(cmd: ::std::os::raw::c_int,
                                               ap: *mut __va_list_tag)
                              -> *mut ::std::os::raw::c_char>;
pub const ZLE_CMD_GET_LINE: _bindgen_ty_36 = _bindgen_ty_36::ZLE_CMD_GET_LINE;
pub const ZLE_CMD_READ: _bindgen_ty_36 = _bindgen_ty_36::ZLE_CMD_READ;
pub const ZLE_CMD_ADD_TO_LINE: _bindgen_ty_36 =
    _bindgen_ty_36::ZLE_CMD_ADD_TO_LINE;
pub const ZLE_CMD_TRASH: _bindgen_ty_36 = _bindgen_ty_36::ZLE_CMD_TRASH;
pub const ZLE_CMD_RESET_PROMPT: _bindgen_ty_36 =
    _bindgen_ty_36::ZLE_CMD_RESET_PROMPT;
pub const ZLE_CMD_REFRESH: _bindgen_ty_36 = _bindgen_ty_36::ZLE_CMD_REFRESH;
pub const ZLE_CMD_SET_KEYMAP: _bindgen_ty_36 =
    _bindgen_ty_36::ZLE_CMD_SET_KEYMAP;
pub const ZLE_CMD_GET_KEY: _bindgen_ty_36 = _bindgen_ty_36::ZLE_CMD_GET_KEY;
pub const ZLE_CMD_SET_HIST_LINE: _bindgen_ty_36 =
    _bindgen_ty_36::ZLE_CMD_SET_HIST_LINE;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_36 {
    ZLE_CMD_GET_LINE = 0,
    ZLE_CMD_READ = 1,
    ZLE_CMD_ADD_TO_LINE = 2,
    ZLE_CMD_TRASH = 3,
    ZLE_CMD_RESET_PROMPT = 4,
    ZLE_CMD_REFRESH = 5,
    ZLE_CMD_SET_KEYMAP = 6,
    ZLE_CMD_GET_KEY = 7,
    ZLE_CMD_SET_HIST_LINE = 8,
}
pub const NICEFLAG_HEAP: _bindgen_ty_37 = _bindgen_ty_37::NICEFLAG_HEAP;
pub const NICEFLAG_QUOTE: _bindgen_ty_37 = _bindgen_ty_37::NICEFLAG_QUOTE;
pub const NICEFLAG_NODUP: _bindgen_ty_37 = _bindgen_ty_37::NICEFLAG_NODUP;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_37 {
    NICEFLAG_HEAP = 1,
    NICEFLAG_QUOTE = 2,
    NICEFLAG_NODUP = 4,
}
pub type convchar_t = wint_t;
extern "C" {
    pub fn signal_block(arg1: sigset_t) -> sigset_t;
}
extern "C" {
    pub fn signal_unblock(arg1: sigset_t) -> sigset_t;
}
extern "C" {
    #[link_name = "builtintab"]
    pub static mut builtintab: HashTable;
}
extern "C" {
    pub fn createbuiltintable();
}
extern "C" {
    pub fn init_builtins();
}
extern "C" {
    pub fn execbuiltin(args: LinkList, assigns: LinkList, bn: Builtin)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bin_enable(name: *mut ::std::os::raw::c_char,
                      argv: *mut *mut ::std::os::raw::c_char, ops: Options,
                      func: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bin_set(nam: *mut ::std::os::raw::c_char,
                   args: *mut *mut ::std::os::raw::c_char, ops: Options,
                   func: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "doprintdir"]
    pub static mut doprintdir: ::std::os::raw::c_int;
}
extern "C" {
    pub fn bin_pwd(name: *mut ::std::os::raw::c_char,
                   argv: *mut *mut ::std::os::raw::c_char, ops: Options,
                   func: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "dirstack"]
    pub static mut dirstack: LinkList;
}
extern "C" {
    pub fn bin_dirs(name: *mut ::std::os::raw::c_char,
                    argv: *mut *mut ::std::os::raw::c_char, ops: Options,
                    func: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_pwd_env();
}
extern "C" {
    pub fn bin_cd(nam: *mut ::std::os::raw::c_char,
                  argv: *mut *mut ::std::os::raw::c_char, ops: Options,
                  func: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cd_able_vars(s: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fixdir(src: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn printqt(str: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn printif(str: *mut ::std::os::raw::c_char,
                   c: ::std::os::raw::c_int);
}
extern "C" {
    pub fn bin_fc(nam: *mut ::std::os::raw::c_char,
                  argv: *mut *mut ::std::os::raw::c_char, ops: Options,
                  func: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bin_typeset(name: *mut ::std::os::raw::c_char,
                       argv: *mut *mut ::std::os::raw::c_char,
                       assigns: LinkList, ops: Options,
                       func: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn eval_autoload(shf: Shfunc, name: *mut ::std::os::raw::c_char,
                         ops: Options, func: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bin_functions(name: *mut ::std::os::raw::c_char,
                         argv: *mut *mut ::std::os::raw::c_char, ops: Options,
                         func: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkautofn(shf: Shfunc) -> Eprog;
}
extern "C" {
    pub fn bin_unset(name: *mut ::std::os::raw::c_char,
                     argv: *mut *mut ::std::os::raw::c_char, ops: Options,
                     func: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bin_whence(nam: *mut ::std::os::raw::c_char,
                      argv: *mut *mut ::std::os::raw::c_char, ops: Options,
                      func: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bin_hash(name: *mut ::std::os::raw::c_char,
                    argv: *mut *mut ::std::os::raw::c_char, ops: Options,
                    func: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bin_unhash(name: *mut ::std::os::raw::c_char,
                      argv: *mut *mut ::std::os::raw::c_char, ops: Options,
                      func: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bin_alias(name: *mut ::std::os::raw::c_char,
                     argv: *mut *mut ::std::os::raw::c_char, ops: Options,
                     func: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bin_true(name: *mut ::std::os::raw::c_char,
                    argv: *mut *mut ::std::os::raw::c_char, ops: Options,
                    func: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bin_false(name: *mut ::std::os::raw::c_char,
                     argv: *mut *mut ::std::os::raw::c_char, ops: Options,
                     func: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "bufstack"]
    pub static mut bufstack: LinkList;
}
extern "C" {
    pub fn bin_print(name: *mut ::std::os::raw::c_char,
                     args: *mut *mut ::std::os::raw::c_char, ops: Options,
                     func: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bin_shift(name: *mut ::std::os::raw::c_char,
                     argv: *mut *mut ::std::os::raw::c_char, ops: Options,
                     func: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "optcind"]
    pub static mut optcind: ::std::os::raw::c_int;
}
extern "C" {
    pub fn bin_getopts(name: *mut ::std::os::raw::c_char,
                       argv: *mut *mut ::std::os::raw::c_char, ops: Options,
                       func: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "exit_pending"]
    pub static mut exit_pending: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "exit_level"]
    pub static mut exit_level: ::std::os::raw::c_int;
}
extern "C" {
    pub fn bin_break(name: *mut ::std::os::raw::c_char,
                     argv: *mut *mut ::std::os::raw::c_char, ops: Options,
                     func: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "stopmsg"]
    pub static mut stopmsg: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "shell_exiting"]
    pub static mut shell_exiting: ::std::os::raw::c_int;
}
extern "C" {
    pub fn zexit(val: ::std::os::raw::c_int,
                 from_where: ::std::os::raw::c_int);
}
extern "C" {
    pub fn bin_dot(name: *mut ::std::os::raw::c_char,
                   argv: *mut *mut ::std::os::raw::c_char, ops: Options,
                   func: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bin_emulate(nam: *mut ::std::os::raw::c_char,
                       argv: *mut *mut ::std::os::raw::c_char, ops: Options,
                       func: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "ineval"]
    pub static mut ineval: ::std::os::raw::c_int;
}
extern "C" {
    pub fn bin_eval(nam: *mut ::std::os::raw::c_char,
                    argv: *mut *mut ::std::os::raw::c_char, ops: Options,
                    func: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bin_read(name: *mut ::std::os::raw::c_char,
                    args: *mut *mut ::std::os::raw::c_char, ops: Options,
                    func: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "testargs"]
    pub static mut testargs: *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "curtestarg"]
    pub static mut curtestarg: *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn testlex();
}
extern "C" {
    pub fn bin_test(name: *mut ::std::os::raw::c_char,
                    argv: *mut *mut ::std::os::raw::c_char, ops: Options,
                    func: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bin_times(name: *mut ::std::os::raw::c_char,
                     argv: *mut *mut ::std::os::raw::c_char, ops: Options,
                     func: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bin_trap(name: *mut ::std::os::raw::c_char,
                    argv: *mut *mut ::std::os::raw::c_char, ops: Options,
                    func: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bin_ttyctl(name: *mut ::std::os::raw::c_char,
                      argv: *mut *mut ::std::os::raw::c_char, ops: Options,
                      func: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bin_let(name: *mut ::std::os::raw::c_char,
                   argv: *mut *mut ::std::os::raw::c_char, ops: Options,
                   func: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bin_umask(nam: *mut ::std::os::raw::c_char,
                     args: *mut *mut ::std::os::raw::c_char, ops: Options,
                     func: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bin_notavail(nam: *mut ::std::os::raw::c_char,
                        argv: *mut *mut ::std::os::raw::c_char, ops: Options,
                        func: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zpathmax(dir: *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn zopenmax() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn zgetdir(d: *mut dirsav) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn zgetcwd() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn zchdir(dir: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "tracingcond"]
    pub static mut tracingcond: ::std::os::raw::c_int;
}
extern "C" {
    pub fn evalcond(state: Estate, fromtest: *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cond_str(args: *mut *mut ::std::os::raw::c_char,
                    num: ::std::os::raw::c_int, raw: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn cond_val(args: *mut *mut ::std::os::raw::c_char,
                    num: ::std::os::raw::c_int) -> zlong;
}
extern "C" {
    pub fn cond_match(args: *mut *mut ::std::os::raw::c_char,
                      num: ::std::os::raw::c_int,
                      str: *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zcontext_save_partial(parts: ::std::os::raw::c_int);
}
extern "C" {
    pub fn zcontext_save();
}
extern "C" {
    pub fn zcontext_restore_partial(parts: ::std::os::raw::c_int);
}
extern "C" {
    pub fn zcontext_restore();
}
extern "C" {
    #[link_name = "noerrexit"]
    pub static mut noerrexit: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "this_noerrexit"]
    pub static mut this_noerrexit: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "noerrs"]
    pub static mut noerrs: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "nohistsave"]
    pub static mut nohistsave: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "errflag"]
    pub static mut errflag: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "trap_state"]
    pub static mut trap_state: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "trap_return"]
    pub static mut trap_return: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "subsh"]
    pub static mut subsh: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "retflag"]
    pub static mut retflag: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "lastval2"]
    pub static mut lastval2: ::std::os::raw::c_long;
}
extern "C" {
    #[link_name = "fdtable"]
    pub static mut fdtable: *mut ::std::os::raw::c_uchar;
}
extern "C" {
    #[link_name = "fdtable_size"]
    pub static mut fdtable_size: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "max_zsh_fd"]
    pub static mut max_zsh_fd: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "coprocin"]
    pub static mut coprocin: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "coprocout"]
    pub static mut coprocout: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "fdtable_flocks"]
    pub static mut fdtable_flocks: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "zleactive"]
    pub static mut zleactive: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "cmdoutpid"]
    pub static mut cmdoutpid: pid_t;
}
extern "C" {
    #[link_name = "cmdoutval"]
    pub static mut cmdoutval: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "use_cmdoutval"]
    pub static mut use_cmdoutval: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "sfcontext"]
    pub static mut sfcontext: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "exstack"]
    pub static mut exstack: *mut execstack;
}
extern "C" {
    #[link_name = "funcstack"]
    pub static mut funcstack: Funcstack;
}
extern "C" {
    pub fn parse_string(s: *mut ::std::os::raw::c_char,
                        reset_lineno: ::std::os::raw::c_int) -> Eprog;
}
extern "C" {
    #[link_name = "current_limits"]
    pub static mut current_limits: [rlimit; 16usize];
}
extern "C" {
    #[link_name = "limits"]
    pub static mut limits: [rlimit; 16usize];
}
extern "C" {
    pub fn zsetlimit(limnum: ::std::os::raw::c_int,
                     nam: *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setlimits(nam: *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "list_pipe"]
    pub static mut list_pipe: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "simple_pline"]
    pub static mut simple_pline: ::std::os::raw::c_int;
}
extern "C" {
    pub fn findcmd(arg0: *mut ::std::os::raw::c_char,
                   docopy: ::std::os::raw::c_int,
                   default_path: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn iscom(s: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isreallycom(cn: Cmdnam) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isrelative(s: *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn hashcmd(arg0: *mut ::std::os::raw::c_char,
                   pp: *mut *mut ::std::os::raw::c_char) -> Cmdnam;
}
extern "C" {
    #[link_name = "forklevel"]
    pub static mut forklevel: ::std::os::raw::c_int;
}
extern "C" {
    pub fn execstring(s: *mut ::std::os::raw::c_char,
                      dont_change_job: ::std::os::raw::c_int,
                      exiting: ::std::os::raw::c_int,
                      context: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn execode(p: Eprog, dont_change_job: ::std::os::raw::c_int,
                   exiting: ::std::os::raw::c_int,
                   context: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn execlist(state: Estate, dont_change_job: ::std::os::raw::c_int,
                    exiting: ::std::os::raw::c_int);
}
extern "C" {
    pub fn untokenize(s: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn quote_tokenized_output(str: *mut ::std::os::raw::c_char,
                                  file: *mut FILE);
}
extern "C" {
    pub fn setunderscore(str: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn execsubst(strs: LinkList);
}
extern "C" {
    pub fn closem(how: ::std::os::raw::c_int);
}
extern "C" {
    pub fn gethere(strp: *mut *mut ::std::os::raw::c_char,
                   typ: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getoutput(cmd: *mut ::std::os::raw::c_char,
                     qt: ::std::os::raw::c_int) -> LinkList;
}
extern "C" {
    pub fn readoutput(in_: ::std::os::raw::c_int, qt: ::std::os::raw::c_int)
     -> LinkList;
}
extern "C" {
    pub fn getoutputfile(cmd: *mut ::std::os::raw::c_char,
                         eptr: *mut *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getproc(cmd: *mut ::std::os::raw::c_char,
                   eptr: *mut *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn sticky_emulation_dup(src: Emulation_options,
                                useheap: ::std::os::raw::c_int)
     -> Emulation_options;
}
extern "C" {
    pub fn shfunc_set_sticky(shf: Shfunc);
}
extern "C" {
    pub fn loadautofn(shf: Shfunc, fksh: ::std::os::raw::c_int,
                      autol: ::std::os::raw::c_int,
                      current_fpath: ::std::os::raw::c_int) -> Shfunc;
}
extern "C" {
    pub fn sticky_emulation_differs(sticky2: Emulation_options)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn doshfunc(shfunc: Shfunc, doshargs: LinkList,
                    noreturnval: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn runshfunc(prog: Eprog, wrap: FuncWrap,
                     name: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn getfpfunc(s: *mut ::std::os::raw::c_char,
                     ksh: *mut ::std::os::raw::c_int,
                     fdir: *mut *mut ::std::os::raw::c_char,
                     alt_path: *mut *mut ::std::os::raw::c_char,
                     test_only: ::std::os::raw::c_int) -> Eprog;
}
extern "C" {
    pub fn stripkshdef(prog: Eprog, name: *mut ::std::os::raw::c_char)
     -> Eprog;
}
extern "C" {
    pub fn execsave();
}
extern "C" {
    pub fn execrestore();
}
extern "C" {
    #[link_name = "badcshglob"]
    pub static mut badcshglob: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "pathpos"]
    pub static mut pathpos: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "pathbuf"]
    pub static mut pathbuf: *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "glob_pre"]
    pub static mut glob_pre: *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "glob_suf"]
    pub static mut glob_suf: *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn checkglobqual(str: *mut ::std::os::raw::c_char,
                         sl: ::std::os::raw::c_int,
                         nobareglob: ::std::os::raw::c_int,
                         sp: *mut *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zglob(list: LinkList, np: LinkNode,
                 nountok: ::std::os::raw::c_int);
}
extern "C" {
    pub fn file_type(filemode: mode_t) -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn hasbraces(str: *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xpandredir(fn_: *mut redir, redirtab: LinkList)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xpandbraces(list: LinkList, np: *mut LinkNode);
}
extern "C" {
    pub fn matchpat(a: *mut ::std::os::raw::c_char,
                    b: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getmatch(sp: *mut *mut ::std::os::raw::c_char,
                    pat: *mut ::std::os::raw::c_char,
                    fl: ::std::os::raw::c_int, n: ::std::os::raw::c_int,
                    replstr: *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getmatcharr(ap: *mut *mut *mut ::std::os::raw::c_char,
                       pat: *mut ::std::os::raw::c_char,
                       fl: ::std::os::raw::c_int, n: ::std::os::raw::c_int,
                       replstr: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn getmatchlist(str: *mut ::std::os::raw::c_char, p: Patprog,
                        repllistp: *mut LinkList) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn freematchlist(repllist: LinkList);
}
extern "C" {
    pub fn tokenize(s: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn shtokenize(s: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn remnulargs(s: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn hasher(str: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn newhashtable(size: ::std::os::raw::c_int,
                        name: *const ::std::os::raw::c_char,
                        printinfo: PrintTableStats) -> HashTable;
}
extern "C" {
    pub fn deletehashtable(ht: HashTable);
}
extern "C" {
    pub fn addhashnode(ht: HashTable, nam: *mut ::std::os::raw::c_char,
                       nodeptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn addhashnode2(ht: HashTable, nam: *mut ::std::os::raw::c_char,
                        nodeptr: *mut ::std::os::raw::c_void) -> HashNode;
}
extern "C" {
    pub fn gethashnode(ht: HashTable, nam: *const ::std::os::raw::c_char)
     -> HashNode;
}
extern "C" {
    pub fn gethashnode2(ht: HashTable, nam: *const ::std::os::raw::c_char)
     -> HashNode;
}
extern "C" {
    pub fn removehashnode(ht: HashTable, nam: *const ::std::os::raw::c_char)
     -> HashNode;
}
extern "C" {
    pub fn disablehashnode(hn: HashNode, flags: ::std::os::raw::c_int);
}
extern "C" {
    pub fn enablehashnode(hn: HashNode, flags: ::std::os::raw::c_int);
}
extern "C" {
    pub fn scanmatchtable(ht: HashTable, pprog: Patprog,
                          sorted: ::std::os::raw::c_int,
                          flags1: ::std::os::raw::c_int,
                          flags2: ::std::os::raw::c_int, scanfunc: ScanFunc,
                          scanflags: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scanhashtable(ht: HashTable, sorted: ::std::os::raw::c_int,
                         flags1: ::std::os::raw::c_int,
                         flags2: ::std::os::raw::c_int, scanfunc: ScanFunc,
                         scanflags: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn emptyhashtable(ht: HashTable);
}
extern "C" {
    #[link_name = "cmdnamtab"]
    pub static mut cmdnamtab: HashTable;
}
extern "C" {
    #[link_name = "pathchecked"]
    pub static mut pathchecked: *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn createcmdnamtable();
}
extern "C" {
    pub fn hashdir(dirp: *mut *mut ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "shfunctab"]
    pub static mut shfunctab: HashTable;
}
extern "C" {
    pub fn createshfunctable();
}
extern "C" {
    pub fn scanmatchshfunc(pprog: Patprog, sorted: ::std::os::raw::c_int,
                           flags1: ::std::os::raw::c_int,
                           flags2: ::std::os::raw::c_int, scanfunc: ScanFunc,
                           scanflags: ::std::os::raw::c_int,
                           expand: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scanshfunc(sorted: ::std::os::raw::c_int,
                      flags1: ::std::os::raw::c_int,
                      flags2: ::std::os::raw::c_int, scanfunc: ScanFunc,
                      scanflags: ::std::os::raw::c_int,
                      expand: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn printshfuncexpand(hn: HashNode, printflags: ::std::os::raw::c_int,
                             expand: ::std::os::raw::c_int);
}
extern "C" {
    pub fn getshfuncfile(shf: Shfunc) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "reswdtab"]
    pub static mut reswdtab: HashTable;
}
extern "C" {
    pub fn createreswdtable();
}
extern "C" {
    #[link_name = "aliastab"]
    pub static mut aliastab: HashTable;
}
extern "C" {
    #[link_name = "sufaliastab"]
    pub static mut sufaliastab: HashTable;
}
extern "C" {
    pub fn createaliastable(ht: HashTable);
}
extern "C" {
    pub fn createaliastables();
}
extern "C" {
    pub fn createaliasnode(txt: *mut ::std::os::raw::c_char,
                           flags: ::std::os::raw::c_int) -> Alias;
}
extern "C" {
    pub fn createhisttable();
}
extern "C" {
    pub fn histhasher(str: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn emptyhisttable(ht: HashTable);
}
extern "C" {
    pub fn histstrcmp(str1: *const ::std::os::raw::c_char,
                      str2: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn addhistnode(ht: HashTable, nam: *mut ::std::os::raw::c_char,
                       nodeptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn freehistnode(nodeptr: HashNode);
}
extern "C" {
    pub fn freehistdata(he: Histent, unlink: ::std::os::raw::c_int);
}
extern "C" {
    pub fn dircache_set(name: *mut *mut ::std::os::raw::c_char,
                        value: *mut ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "nameddirtab"]
    pub static mut nameddirtab: HashTable;
}
extern "C" {
    pub fn createnameddirtable();
}
extern "C" {
    #[link_name = "hgetc"]
    pub static mut hgetc:
               ::std::option::Option<unsafe extern "C" fn()
                                         -> ::std::os::raw::c_int>;
}
extern "C" {
    #[link_name = "hungetc"]
    pub static mut hungetc:
               ::std::option::Option<unsafe extern "C" fn(arg1:
                                                              ::std::os::raw::c_int)>;
}
extern "C" {
    #[link_name = "hwaddc"]
    pub static mut hwaddc:
               ::std::option::Option<unsafe extern "C" fn(arg1:
                                                              ::std::os::raw::c_int)>;
}
extern "C" {
    #[link_name = "hwbegin"]
    pub static mut hwbegin:
               ::std::option::Option<unsafe extern "C" fn(arg1:
                                                              ::std::os::raw::c_int)>;
}
extern "C" {
    #[link_name = "hwend"]
    pub static mut hwend: ::std::option::Option<unsafe extern "C" fn()>;
}
extern "C" {
    #[link_name = "addtoline"]
    pub static mut addtoline:
               ::std::option::Option<unsafe extern "C" fn(arg1:
                                                              ::std::os::raw::c_int)>;
}
extern "C" {
    #[link_name = "stophist"]
    pub static mut stophist: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "expanding"]
    pub static mut expanding: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "excs"]
    pub static mut excs: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "exlast"]
    pub static mut exlast: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "curhist"]
    pub static mut curhist: zlong;
}
extern "C" {
    #[link_name = "curline"]
    pub static mut curline: histent;
}
extern "C" {
    #[link_name = "histlinect"]
    pub static mut histlinect: zlong;
}
extern "C" {
    #[link_name = "histtab"]
    pub static mut histtab: HashTable;
}
extern "C" {
    #[link_name = "hist_ring"]
    pub static mut hist_ring: Histent;
}
extern "C" {
    #[link_name = "histsiz"]
    pub static mut histsiz: zlong;
}
extern "C" {
    #[link_name = "savehistsiz"]
    pub static mut savehistsiz: zlong;
}
extern "C" {
    #[link_name = "histdone"]
    pub static mut histdone: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "histactive"]
    pub static mut histactive: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "hist_ignore_all_dups"]
    pub static mut hist_ignore_all_dups: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "hist_skip_flags"]
    pub static mut hist_skip_flags: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "chwords"]
    pub static mut chwords: *mut ::std::os::raw::c_short;
}
extern "C" {
    #[link_name = "chwordlen"]
    pub static mut chwordlen: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "chwordpos"]
    pub static mut chwordpos: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "hsubl"]
    pub static mut hsubl: *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "hsubr"]
    pub static mut hsubr: *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "hptr"]
    pub static mut hptr: *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "chline"]
    pub static mut chline: *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "zle_chline"]
    pub static mut zle_chline: *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "qbang"]
    pub static mut qbang: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "hlinesz"]
    pub static mut hlinesz: ::std::os::raw::c_int;
}
extern "C" {
    pub fn hist_context_save(hs: *mut hist_stack,
                             toplevel: ::std::os::raw::c_int);
}
extern "C" {
    pub fn hist_context_restore(hs: *const hist_stack,
                                toplevel: ::std::os::raw::c_int);
}
extern "C" {
    pub fn hist_in_word(yesno: ::std::os::raw::c_int);
}
extern "C" {
    pub fn iaddtoline(c: ::std::os::raw::c_int);
}
extern "C" {
    pub fn herrflush();
}
extern "C" {
    pub fn strinbeg(dohist: ::std::os::raw::c_int);
}
extern "C" {
    pub fn strinend();
}
extern "C" {
    pub fn hbegin(dohist: ::std::os::raw::c_int);
}
extern "C" {
    pub fn histreduceblanks();
}
extern "C" {
    pub fn histremovedups();
}
extern "C" {
    pub fn addhistnum(hl: zlong, n: ::std::os::raw::c_int,
                      xflags: ::std::os::raw::c_int) -> zlong;
}
extern "C" {
    pub fn movehistent(he: Histent, n: ::std::os::raw::c_int,
                       xflags: ::std::os::raw::c_int) -> Histent;
}
extern "C" {
    pub fn up_histent(he: Histent) -> Histent;
}
extern "C" {
    pub fn down_histent(he: Histent) -> Histent;
}
extern "C" {
    pub fn gethistent(ev: zlong, nearmatch: ::std::os::raw::c_int) -> Histent;
}
extern "C" {
    pub fn prepnexthistent() -> Histent;
}
extern "C" {
    pub fn hend(prog: Eprog) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ihwbegin(offset: ::std::os::raw::c_int);
}
extern "C" {
    pub fn ihwend();
}
extern "C" {
    pub fn histbackword();
}
extern "C" {
    pub fn hwrep(rep: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn hgetline() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn hcomsearch(str: *mut ::std::os::raw::c_char) -> zlong;
}
extern "C" {
    pub fn chabspath(junkptr: *mut *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chrealpath(junkptr: *mut *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn remtpath(junkptr: *mut *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn remtext(junkptr: *mut *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rembutext(junkptr: *mut *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn remlpaths(junkptr: *mut *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn casemodify(str: *mut ::std::os::raw::c_char,
                      how: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn subst(strptr: *mut *mut ::std::os::raw::c_char,
                 in_: *mut ::std::os::raw::c_char,
                 out: *mut ::std::os::raw::c_char,
                 gbal: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn checkcurline(he: Histent);
}
extern "C" {
    pub fn quietgethist(ev: ::std::os::raw::c_int) -> Histent;
}
extern "C" {
    pub fn inithist();
}
extern "C" {
    pub fn resizehistents();
}
extern "C" {
    pub fn readhistfile(fn_: *mut ::std::os::raw::c_char,
                        err: ::std::os::raw::c_int,
                        readflags: ::std::os::raw::c_int);
}
extern "C" {
    pub fn savehistfile(fn_: *mut ::std::os::raw::c_char,
                        err: ::std::os::raw::c_int,
                        writeflags: ::std::os::raw::c_int);
}
extern "C" {
    pub fn lockhistfile(fn_: *mut ::std::os::raw::c_char,
                        keep_trying: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unlockhistfile(fn_: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn histfileIsLocked() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bufferwords(list: LinkList, buf: *mut ::std::os::raw::c_char,
                       index: *mut ::std::os::raw::c_int,
                       flags: ::std::os::raw::c_int) -> LinkList;
}
extern "C" {
    pub fn histsplitwords(lineptr: *mut ::std::os::raw::c_char,
                          wordsp: *mut *mut ::std::os::raw::c_short,
                          nwordsp: *mut ::std::os::raw::c_int,
                          nwordposp: *mut ::std::os::raw::c_int,
                          uselex: ::std::os::raw::c_int);
}
extern "C" {
    pub fn pushhiststack(hf: *mut ::std::os::raw::c_char, hs: zlong,
                         shs: zlong, level: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pophiststack() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn saveandpophiststack(pop_through: ::std::os::raw::c_int,
                               writeflags: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "noexitct"]
    pub static mut noexitct: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "zunderscore"]
    pub static mut zunderscore: *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "underscorelen"]
    pub static mut underscorelen: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "underscoreused"]
    pub static mut underscoreused: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "sourcelevel"]
    pub static mut sourcelevel: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "SHTTY"]
    pub static mut SHTTY: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "shout"]
    pub static mut shout: *mut FILE;
}
extern "C" {
    #[link_name = "tcstr"]
    pub static mut tcstr: [*mut ::std::os::raw::c_char; 34usize];
}
extern "C" {
    #[link_name = "tclen"]
    pub static mut tclen: [::std::os::raw::c_int; 34usize];
}
extern "C" {
    #[link_name = "tclines"]
    pub static mut tclines: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "tccolumns"]
    pub static mut tccolumns: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "hasam"]
    pub static mut hasam: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "hasbw"]
    pub static mut hasbw: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "hasxn"]
    pub static mut hasxn: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "hasye"]
    pub static mut hasye: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "tccolours"]
    pub static mut tccolours: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "sigchld_mask"]
    pub static mut sigchld_mask: sigset_t;
}
extern "C" {
    #[link_name = "zshhooks"]
    pub static mut zshhooks: [hookdef; 0usize];
}
extern "C" {
    #[link_name = "loop"]
    pub fn loop_(toplevel: ::std::os::raw::c_int,
                 justonce: ::std::os::raw::c_int) -> loop_return;
}
extern "C" {
    pub fn parseopts(nam: *mut ::std::os::raw::c_char,
                     argvp: *mut *mut *mut ::std::os::raw::c_char,
                     new_opts: *mut ::std::os::raw::c_char,
                     cmdp: *mut *mut ::std::os::raw::c_char,
                     optlist: LinkList) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn init_io(cmd: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn init_shout();
}
extern "C" {
    pub fn tccap_get_name(cap: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn init_term() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setupvals(cmd: *mut ::std::os::raw::c_char,
                     runscript: *mut ::std::os::raw::c_char,
                     zsh_name: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn init_signals();
}
extern "C" {
    pub fn run_init_scripts();
}
extern "C" {
    pub fn init_misc(cmd: *mut ::std::os::raw::c_char,
                     zsh_name: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn source(s: *mut ::std::os::raw::c_char) -> source_return;
}
extern "C" {
    pub fn sourcehome(s: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn init_bltinmods();
}
extern "C" {
    pub fn noop_function();
}
extern "C" {
    pub fn noop_function_int(nothing: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "zle_entry_ptr"]
    pub static mut zle_entry_ptr: ZleEntryPoint;
}
extern "C" {
    #[link_name = "zle_load_state"]
    pub static mut zle_load_state: ::std::os::raw::c_int;
}
extern "C" {
    pub fn zleentry(cmd: ::std::os::raw::c_int, ...)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "compctlreadptr"]
    pub static mut compctlreadptr: CompctlReadFn;
}
extern "C" {
    pub fn fallback_compctlread(name: *mut ::std::os::raw::c_char,
                                args: *mut *mut ::std::os::raw::c_char,
                                ops: Options,
                                reply: *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "use_exit_printed"]
    pub static mut use_exit_printed: ::std::os::raw::c_int;
}
extern "C" {
    pub fn zsh_main(argc: ::std::os::raw::c_int,
                    argv: *mut *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "SHIN"]
    pub static mut SHIN: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "bshin"]
    pub static mut bshin: *mut FILE;
}
extern "C" {
    #[link_name = "strin"]
    pub static mut strin: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "inbufct"]
    pub static mut inbufct: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "inbufflags"]
    pub static mut inbufflags: ::std::os::raw::c_int;
}
extern "C" {
    pub fn shingetline() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ingetc() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inungetc(c: ::std::os::raw::c_int);
}
extern "C" {
    pub fn stuff(fn_: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inerrflush();
}
extern "C" {
    pub fn inpush(str: *mut ::std::os::raw::c_char,
                  flags: ::std::os::raw::c_int, inalias: Alias);
}
extern "C" {
    pub fn inpop();
}
extern "C" {
    pub fn inpopalias();
}
extern "C" {
    pub fn ingetptr() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn input_hasalias() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "origpgrp"]
    pub static mut origpgrp: pid_t;
}
extern "C" {
    #[link_name = "mypgrp"]
    pub static mut mypgrp: pid_t;
}
extern "C" {
    #[link_name = "thisjob"]
    pub static mut thisjob: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "curjob"]
    pub static mut curjob: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "prevjob"]
    pub static mut prevjob: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "jobtab"]
    pub static mut jobtab: *mut job;
}
extern "C" {
    #[link_name = "jobtabsize"]
    pub static mut jobtabsize: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "maxjob"]
    pub static mut maxjob: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "ttyfrozen"]
    pub static mut ttyfrozen: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "prev_errflag"]
    pub static mut prev_errflag: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "prev_breaks"]
    pub static mut prev_breaks: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "errbrk_saved"]
    pub static mut errbrk_saved: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "numpipestats"]
    pub static mut numpipestats: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "pipestats"]
    pub static mut pipestats: [::std::os::raw::c_int; 256usize];
}
extern "C" {
    pub fn makerunning(jn: Job);
}
extern "C" {
    pub fn findproc(pid: pid_t, jptr: *mut Job, pptr: *mut Process,
                    aux: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn hasprocs(job: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_usage();
}
extern "C" {
    pub fn update_process(pn: Process, status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn check_cursh_sig(sig: ::std::os::raw::c_int);
}
extern "C" {
    pub fn storepipestats(jn: Job, inforeground: ::std::os::raw::c_int,
                          fixlastval: ::std::os::raw::c_int);
}
extern "C" {
    pub fn update_job(jn: Job);
}
extern "C" {
    pub fn get_clktck() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn printjob(jn: Job, lng: ::std::os::raw::c_int,
                    synch: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn addfilelist(name: *const ::std::os::raw::c_char,
                       fd: ::std::os::raw::c_int);
}
extern "C" {
    pub fn pipecleanfilelist(filelist: LinkList,
                             proc_subst_only: ::std::os::raw::c_int);
}
extern "C" {
    pub fn deletefilelist(file_list: LinkList,
                          disowning: ::std::os::raw::c_int);
}
extern "C" {
    pub fn freejob(jn: Job, deleting: ::std::os::raw::c_int);
}
extern "C" {
    pub fn deletejob(jn: Job, disowning: ::std::os::raw::c_int);
}
extern "C" {
    pub fn addproc(pid: pid_t, text: *mut ::std::os::raw::c_char,
                   aux: ::std::os::raw::c_int, bgtime: *mut timeval);
}
extern "C" {
    pub fn havefiles() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn waitforpid(pid: pid_t, wait_cmd: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn waitjobs();
}
extern "C" {
    pub fn clearjobtab(monitor: ::std::os::raw::c_int);
}
extern "C" {
    pub fn initjob() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setjobpwd();
}
extern "C" {
    pub fn spawnjob();
}
extern "C" {
    pub fn shelltime();
}
extern "C" {
    pub fn scanjobs();
}
extern "C" {
    pub fn getjob(s: *const ::std::os::raw::c_char,
                  prog: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn init_jobs(argv: *mut *mut ::std::os::raw::c_char,
                     envp: *mut *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn expandjobtab() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn maybeshrinkjobtab();
}
extern "C" {
    pub fn addbgstatus(pid: pid_t, status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn bin_fg(name: *mut ::std::os::raw::c_char,
                  argv: *mut *mut ::std::os::raw::c_char, ops: Options,
                  func: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bin_kill(nam: *mut ::std::os::raw::c_char,
                    argv: *mut *mut ::std::os::raw::c_char, ops: Options,
                    func: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getsignum(s: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getsigname(sig: ::std::os::raw::c_int)
     -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn gettrapnode(sig: ::std::os::raw::c_int,
                       ignoredisable: ::std::os::raw::c_int) -> HashNode;
}
extern "C" {
    pub fn removetrapnode(sig: ::std::os::raw::c_int);
}
extern "C" {
    pub fn bin_suspend(name: *mut ::std::os::raw::c_char,
                       argv: *mut *mut ::std::os::raw::c_char, ops: Options,
                       func: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn findjobnam(s: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acquire_pgrp();
}
extern "C" {
    pub fn release_pgrp();
}
extern "C" {
    #[link_name = "ztokens"]
    pub static mut ztokens: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    #[link_name = "zshlextext"]
    pub static mut zshlextext: *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "tokstr"]
    pub static mut tokstr: *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "tok"]
    pub static mut tok: lextok;
}
extern "C" {
    #[link_name = "tokfd"]
    pub static mut tokfd: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "toklineno"]
    pub static mut toklineno: zlong;
}
extern "C" {
    #[link_name = "lexstop"]
    pub static mut lexstop: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "isfirstln"]
    pub static mut isfirstln: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "isfirstch"]
    pub static mut isfirstch: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "inalmore"]
    pub static mut inalmore: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "nocorrect"]
    pub static mut nocorrect: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "zlemetacs"]
    pub static mut zlemetacs: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "zlemetall"]
    pub static mut zlemetall: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "inwhat"]
    pub static mut inwhat: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "addedx"]
    pub static mut addedx: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "wb"]
    pub static mut wb: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "we"]
    pub static mut we: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "wordbeg"]
    pub static mut wordbeg: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "parbegin"]
    pub static mut parbegin: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "parend"]
    pub static mut parend: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "noaliases"]
    pub static mut noaliases: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "lexflags"]
    pub static mut lexflags: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "nocomments"]
    pub static mut nocomments: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "tokstrings"]
    pub static mut tokstrings: [*mut ::std::os::raw::c_char; 63usize];
}
extern "C" {
    pub fn lex_context_save(ls: *mut lex_stack,
                            toplevel: ::std::os::raw::c_int);
}
extern "C" {
    pub fn lex_context_restore(ls: *const lex_stack,
                               toplevel: ::std::os::raw::c_int);
}
extern "C" {
    pub fn zshlex();
}
extern "C" {
    pub fn ctxtlex();
}
extern "C" {
    pub fn initlextabs();
}
extern "C" {
    pub fn lexinit();
}
extern "C" {
    pub fn add(c: ::std::os::raw::c_int);
}
extern "C" {
    pub fn parsestr(s: *mut *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn parsestrnoerr(s: *mut *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn parse_subscript(s: *mut ::std::os::raw::c_char,
                           sub: ::std::os::raw::c_int,
                           endchar: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn parse_subst_string(s: *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn exalias() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zshlex_raw_add(c: ::std::os::raw::c_int);
}
extern "C" {
    pub fn zshlex_raw_back();
}
extern "C" {
    pub fn zshlex_raw_mark(offset: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zshlex_raw_back_to_mark(mark: ::std::os::raw::c_int);
}
extern "C" {
    pub fn newlinklist() -> LinkList;
}
extern "C" {
    pub fn znewlinklist() -> LinkList;
}
extern "C" {
    pub fn insertlinknode(list: LinkList, node: LinkNode,
                          dat: *mut ::std::os::raw::c_void) -> LinkNode;
}
extern "C" {
    pub fn zinsertlinknode(list: LinkList, node: LinkNode,
                           dat: *mut ::std::os::raw::c_void) -> LinkNode;
}
extern "C" {
    pub fn uinsertlinknode(list: LinkList, node: LinkNode, new: LinkNode)
     -> LinkNode;
}
extern "C" {
    pub fn insertlinklist(l: LinkList, where_: LinkNode, x: LinkList);
}
extern "C" {
    pub fn getlinknode(list: LinkList) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn ugetnode(list: LinkList) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn remnode(list: LinkList, nd: LinkNode)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn uremnode(list: LinkList, nd: LinkNode)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn freelinklist(list: LinkList, freefunc: FreeFunc);
}
extern "C" {
    pub fn countlinknodes(list: LinkList) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rolllist(l: LinkList, nd: LinkNode);
}
extern "C" {
    pub fn newsizedlist(size: ::std::os::raw::c_int) -> LinkList;
}
extern "C" {
    pub fn joinlists(first: LinkList, second: LinkList) -> LinkList;
}
extern "C" {
    pub fn linknodebydatum(list: LinkList, dat: *mut ::std::os::raw::c_void)
     -> LinkNode;
}
extern "C" {
    pub fn linknodebystring(list: LinkList, dat: *mut ::std::os::raw::c_char)
     -> LinkNode;
}
extern "C" {
    pub fn hlinklist2array(list: LinkList, copy: ::std::os::raw::c_int)
     -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn zlinklist2array(list: LinkList)
     -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "loops"]
    pub static mut loops: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "contflag"]
    pub static mut contflag: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "breaks"]
    pub static mut breaks: ::std::os::raw::c_int;
}
extern "C" {
    pub fn execfor(state: Estate, do_exec: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execselect(state: Estate, do_exec: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn selectlist(l: LinkList, start: usize) -> usize;
}
extern "C" {
    pub fn execwhile(state: Estate, do_exec: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execrepeat(state: Estate, do_exec: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execif(state: Estate, do_exec: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execcase(state: Estate, do_exec: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "try_errflag"]
    pub static mut try_errflag: zlong;
}
extern "C" {
    #[link_name = "try_interrupt"]
    pub static mut try_interrupt: zlong;
}
extern "C" {
    #[link_name = "try_tryflag"]
    pub static mut try_tryflag: zlong;
}
extern "C" {
    pub fn exectry(state: Estate, do_exec: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "noeval"]
    pub static mut noeval: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "zero_mnumber"]
    pub static mut zero_mnumber: mnumber;
}
extern "C" {
    #[link_name = "lastmathval"]
    pub static mut lastmathval: mnumber;
}
extern "C" {
    #[link_name = "lastbase"]
    pub static mut lastbase: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "outputradix"]
    pub static mut outputradix: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "outputunderscore"]
    pub static mut outputunderscore: ::std::os::raw::c_int;
}
extern "C" {
    pub fn op(what: ::std::os::raw::c_int);
}
extern "C" {
    pub fn matheval(s: *mut ::std::os::raw::c_char) -> mnumber;
}
extern "C" {
    pub fn mathevali(s: *mut ::std::os::raw::c_char) -> zlong;
}
extern "C" {
    pub fn mathevalarg(s: *mut ::std::os::raw::c_char,
                       ss: *mut *mut ::std::os::raw::c_char) -> zlong;
}
extern "C" {
    pub fn new_heaps() -> Heap;
}
extern "C" {
    pub fn old_heaps(old: Heap);
}
extern "C" {
    pub fn switch_heaps(new: Heap) -> Heap;
}
extern "C" {
    pub fn pushheap();
}
extern "C" {
    pub fn freeheap();
}
extern "C" {
    pub fn popheap();
}
extern "C" {
    pub fn zheapptr(p: *mut ::std::os::raw::c_void)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn zhalloc(size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn hrealloc(p: *mut ::std::os::raw::c_char, old: usize, new: usize)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn hcalloc(size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn zalloc(size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn zshcalloc(size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn zrealloc(ptr: *mut ::std::os::raw::c_void, size: usize)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn zfree(p: *mut ::std::os::raw::c_void, sz: ::std::os::raw::c_int);
}
extern "C" {
    pub fn zsfree(p: *mut ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "linkedmodules"]
    pub static mut linkedmodules: LinkList;
}
extern "C" {
    #[link_name = "module_path"]
    pub static mut module_path: *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "modulestab"]
    pub static mut modulestab: HashTable;
}
extern "C" {
    pub fn newmoduletable(size: ::std::os::raw::c_int,
                          name: *const ::std::os::raw::c_char) -> HashTable;
}
extern "C" {
    pub fn setup_zshQsmain(m: Module) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn features_zshQsmain(m: Module,
                              features: *mut *mut *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn enables_zshQsmain(m: Module,
                             enables: *mut *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn boot_zshQsmain(m: Module) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cleanup_zshQsmain(m: Module) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn finish_zshQsmain(m: Module) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn register_module(n: *mut ::std::os::raw::c_char,
                           setup: Module_void_func,
                           features: Module_features_func,
                           enables: Module_enables_func,
                           boot: Module_void_func, cleanup: Module_void_func,
                           finish: Module_void_func);
}
extern "C" {
    pub fn module_linked(name: *const ::std::os::raw::c_char) -> Linkedmod;
}
extern "C" {
    pub fn deletebuiltin(nam: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn addbuiltins(nam: *const ::std::os::raw::c_char, binl: Builtin,
                       size: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "wrappers"]
    pub static mut wrappers: FuncWrap;
}
extern "C" {
    pub fn addwrapper(m: Module, w: FuncWrap) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn deletewrapper(m: Module, w: FuncWrap) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "condtab"]
    pub static mut condtab: Conddef;
}
extern "C" {
    pub fn getconddef(inf: ::std::os::raw::c_int,
                      name: *const ::std::os::raw::c_char,
                      autol: ::std::os::raw::c_int) -> Conddef;
}
extern "C" {
    pub fn deleteconddef(c: Conddef) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "hooktab"]
    pub static mut hooktab: Hookdef;
}
extern "C" {
    pub fn gethookdef(n: *mut ::std::os::raw::c_char) -> Hookdef;
}
extern "C" {
    pub fn addhookdef(h: Hookdef) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn addhookdefs(m: Module, h: Hookdef, size: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn deletehookdef(h: Hookdef) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn deletehookdefs(m: Module, h: Hookdef, size: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn addhookdeffunc(h: Hookdef, f: Hookfn) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn addhookfunc(n: *mut ::std::os::raw::c_char, f: Hookfn)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn deletehookdeffunc(h: Hookdef, f: Hookfn) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn deletehookfunc(n: *mut ::std::os::raw::c_char, f: Hookfn)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn runhookdef(h: Hookdef, d: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn addparamdef(d: Paramdef) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn deleteparamdef(d: Paramdef) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "mathfuncs"]
    pub static mut mathfuncs: MathFunc;
}
extern "C" {
    pub fn removemathfunc(previous: MathFunc, current: MathFunc);
}
extern "C" {
    pub fn getmathfunc(name: *const ::std::os::raw::c_char,
                       autol: ::std::os::raw::c_int) -> MathFunc;
}
extern "C" {
    pub fn deletemathfunc(f: MathFunc) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn module_loaded(name: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn load_module(name: *const ::std::os::raw::c_char,
                       enablesarr: Feature_enables,
                       silent: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn require_module(module: *const ::std::os::raw::c_char,
                          features: Feature_enables,
                          silent: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn add_dep(name: *const ::std::os::raw::c_char,
                   from: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn bin_zmodload(nam: *mut ::std::os::raw::c_char,
                        args: *mut *mut ::std::os::raw::c_char, ops: Options,
                        func: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unload_module(m: Module) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unload_named_module(modname: *mut ::std::os::raw::c_char,
                               nam: *mut ::std::os::raw::c_char,
                               silent: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn featuresarray(m: Module, f: Features)
     -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getfeatureenables(m: Module, f: Features)
     -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn setfeatureenables(m: Module, f: Features,
                             e: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn handlefeatures(m: Module, f: Features,
                          enables: *mut *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ensurefeature(modname: *const ::std::os::raw::c_char,
                         prefix: *const ::std::os::raw::c_char,
                         feature: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn autofeatures(cmdnam: *const ::std::os::raw::c_char,
                        module: *const ::std::os::raw::c_char,
                        features: *mut *mut ::std::os::raw::c_char,
                        prefchar: ::std::os::raw::c_int,
                        defflags: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "emulation"]
    pub static mut emulation: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "sticky"]
    pub static mut sticky: Emulation_options;
}
extern "C" {
    #[link_name = "opts"]
    pub static mut opts: [::std::os::raw::c_char; 180usize];
}
extern "C" {
    #[link_name = "optiontab"]
    pub static mut optiontab: HashTable;
}
extern "C" {
    pub fn createoptiontable();
}
extern "C" {
    pub fn installemulation(new_emulation: ::std::os::raw::c_int,
                            new_opts: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn emulate(zsh_name: *const ::std::os::raw::c_char,
                   fully: ::std::os::raw::c_int,
                   new_emulation: *mut ::std::os::raw::c_int,
                   new_opts: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn bin_setopt(nam: *mut ::std::os::raw::c_char,
                      args: *mut *mut ::std::os::raw::c_char, ops: Options,
                      isun: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn optlookup(name: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn optlookupc(c: ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dosetopt(optno: ::std::os::raw::c_int,
                    value: ::std::os::raw::c_int,
                    force: ::std::os::raw::c_int,
                    new_opts: *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dashgetfn(pm: Param) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn printoptionstates(hadplus: ::std::os::raw::c_int);
}
extern "C" {
    pub fn printoptionlist();
}
extern "C" {
    pub fn list_emulate_options(cmdopts: *mut ::std::os::raw::c_char,
                                fully: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "locallevel"]
    pub static mut locallevel: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "pparams"]
    pub static mut pparams: *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "cdpath"]
    pub static mut cdpath: *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "fpath"]
    pub static mut fpath: *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "mailpath"]
    pub static mut mailpath: *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "manpath"]
    pub static mut manpath: *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "psvar"]
    pub static mut psvar: *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "watch"]
    pub static mut watch: *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "zsh_eval_context"]
    pub static mut zsh_eval_context: *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "path"]
    pub static mut path: *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "fignore"]
    pub static mut fignore: *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "argzero"]
    pub static mut argzero: *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "posixzero"]
    pub static mut posixzero: *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "home"]
    pub static mut home: *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "nullcmd"]
    pub static mut nullcmd: *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "oldpwd"]
    pub static mut oldpwd: *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "zoptarg"]
    pub static mut zoptarg: *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "prompt"]
    pub static mut prompt: *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "prompt2"]
    pub static mut prompt2: *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "prompt3"]
    pub static mut prompt3: *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "prompt4"]
    pub static mut prompt4: *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "readnullcmd"]
    pub static mut readnullcmd: *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "rprompt"]
    pub static mut rprompt: *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "rprompt2"]
    pub static mut rprompt2: *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "sprompt"]
    pub static mut sprompt: *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "wordchars"]
    pub static mut wordchars: *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "ifs"]
    pub static mut ifs: *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "postedit"]
    pub static mut postedit: *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "term"]
    pub static mut term: *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "zsh_terminfo"]
    pub static mut zsh_terminfo: *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "zsh_terminfodirs"]
    pub static mut zsh_terminfodirs: *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "ttystrname"]
    pub static mut ttystrname: *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "pwd"]
    pub static mut pwd: *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "lastval"]
    pub static mut lastval: zlong;
}
extern "C" {
    #[link_name = "mypid"]
    pub static mut mypid: zlong;
}
extern "C" {
    #[link_name = "lastpid"]
    pub static mut lastpid: zlong;
}
extern "C" {
    #[link_name = "zterm_columns"]
    pub static mut zterm_columns: zlong;
}
extern "C" {
    #[link_name = "zterm_lines"]
    pub static mut zterm_lines: zlong;
}
extern "C" {
    #[link_name = "rprompt_indent"]
    pub static mut rprompt_indent: zlong;
}
extern "C" {
    #[link_name = "ppid"]
    pub static mut ppid: zlong;
}
extern "C" {
    #[link_name = "zsh_subshell"]
    pub static mut zsh_subshell: zlong;
}
extern "C" {
    #[link_name = "lineno"]
    pub static mut lineno: zlong;
}
extern "C" {
    #[link_name = "zoptind"]
    pub static mut zoptind: zlong;
}
extern "C" {
    #[link_name = "shlvl"]
    pub static mut shlvl: zlong;
}
extern "C" {
    #[link_name = "bangchar"]
    pub static mut bangchar: ::std::os::raw::c_uchar;
}
extern "C" {
    #[link_name = "hatchar"]
    pub static mut hatchar: ::std::os::raw::c_uchar;
}
extern "C" {
    #[link_name = "hashchar"]
    pub static mut hashchar: ::std::os::raw::c_uchar;
}
extern "C" {
    #[link_name = "keyboardhackchar"]
    pub static mut keyboardhackchar: ::std::os::raw::c_uchar;
}
extern "C" {
    #[link_name = "shtimer"]
    pub static mut shtimer: timeval;
}
extern "C" {
    #[link_name = "termflags"]
    pub static mut termflags: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "stdscalar_gsu"]
    pub static stdscalar_gsu: gsu_scalar;
}
extern "C" {
    #[link_name = "varscalar_gsu"]
    pub static varscalar_gsu: gsu_scalar;
}
extern "C" {
    #[link_name = "nullsetscalar_gsu"]
    pub static nullsetscalar_gsu: gsu_scalar;
}
extern "C" {
    #[link_name = "stdinteger_gsu"]
    pub static stdinteger_gsu: gsu_integer;
}
extern "C" {
    #[link_name = "varinteger_gsu"]
    pub static varinteger_gsu: gsu_integer;
}
extern "C" {
    #[link_name = "nullsetinteger_gsu"]
    pub static nullsetinteger_gsu: gsu_integer;
}
extern "C" {
    #[link_name = "stdfloat_gsu"]
    pub static stdfloat_gsu: gsu_float;
}
extern "C" {
    #[link_name = "stdarray_gsu"]
    pub static stdarray_gsu: gsu_array;
}
extern "C" {
    #[link_name = "vararray_gsu"]
    pub static vararray_gsu: gsu_array;
}
extern "C" {
    #[link_name = "stdhash_gsu"]
    pub static stdhash_gsu: gsu_hash;
}
extern "C" {
    #[link_name = "nullsethash_gsu"]
    pub static nullsethash_gsu: gsu_hash;
}
extern "C" {
    #[link_name = "paramtab"]
    pub static mut paramtab: HashTable;
}
extern "C" {
    #[link_name = "realparamtab"]
    pub static mut realparamtab: HashTable;
}
extern "C" {
    pub fn newparamtable(size: ::std::os::raw::c_int,
                         name: *const ::std::os::raw::c_char) -> HashTable;
}
extern "C" {
    pub fn copyparamtable(ht: HashTable, name: *mut ::std::os::raw::c_char)
     -> HashTable;
}
extern "C" {
    pub fn deleteparamtable(t: HashTable);
}
extern "C" {
    pub fn scancountparams(hn: HashNode, flags: ::std::os::raw::c_int);
}
extern "C" {
    pub fn paramvalarr(ht: HashTable, flags: ::std::os::raw::c_int)
     -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn issetvar(name: *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn createparamtable();
}
extern "C" {
    pub fn assigngetset(pm: Param);
}
extern "C" {
    pub fn createparam(name: *mut ::std::os::raw::c_char,
                       flags: ::std::os::raw::c_int) -> Param;
}
extern "C" {
    pub fn createspecialhash(name: *mut ::std::os::raw::c_char,
                             get: GetNodeFunc, scan: ScanTabFunc,
                             flags: ::std::os::raw::c_int) -> Param;
}
extern "C" {
    pub fn copyparam(tpm: Param, pm: Param, fakecopy: ::std::os::raw::c_int);
}
extern "C" {
    pub fn isident(s: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getindex(pptr: *mut *mut ::std::os::raw::c_char, v: Value,
                    flags: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getvalue(v: Value, pptr: *mut *mut ::std::os::raw::c_char,
                    bracks: ::std::os::raw::c_int) -> Value;
}
extern "C" {
    pub fn fetchvalue(v: Value, pptr: *mut *mut ::std::os::raw::c_char,
                      bracks: ::std::os::raw::c_int,
                      flags: ::std::os::raw::c_int) -> Value;
}
extern "C" {
    pub fn getstrvalue(v: Value) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getarrvalue(v: Value) -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getintvalue(v: Value) -> zlong;
}
extern "C" {
    pub fn getnumvalue(v: Value) -> mnumber;
}
extern "C" {
    pub fn export_param(pm: Param);
}
extern "C" {
    pub fn setstrvalue(v: Value, val: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn assignstrvalue(v: Value, val: *mut ::std::os::raw::c_char,
                          flags: ::std::os::raw::c_int);
}
extern "C" {
    pub fn setnumvalue(v: Value, val: mnumber);
}
extern "C" {
    pub fn setarrvalue(v: Value, val: *mut *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn getiparam(s: *mut ::std::os::raw::c_char) -> zlong;
}
extern "C" {
    pub fn getnparam(s: *mut ::std::os::raw::c_char) -> mnumber;
}
extern "C" {
    pub fn getsparam(s: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getsparam_u(s: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getaparam(s: *mut ::std::os::raw::c_char)
     -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn gethparam(s: *mut ::std::os::raw::c_char)
     -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn gethkparam(s: *mut ::std::os::raw::c_char)
     -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn assignsparam(s: *mut ::std::os::raw::c_char,
                        val: *mut ::std::os::raw::c_char,
                        flags: ::std::os::raw::c_int) -> Param;
}
extern "C" {
    pub fn setsparam(s: *mut ::std::os::raw::c_char,
                     val: *mut ::std::os::raw::c_char) -> Param;
}
extern "C" {
    pub fn assignaparam(s: *mut ::std::os::raw::c_char,
                        val: *mut *mut ::std::os::raw::c_char,
                        flags: ::std::os::raw::c_int) -> Param;
}
extern "C" {
    pub fn setaparam(s: *mut ::std::os::raw::c_char,
                     aval: *mut *mut ::std::os::raw::c_char) -> Param;
}
extern "C" {
    pub fn sethparam(s: *mut ::std::os::raw::c_char,
                     val: *mut *mut ::std::os::raw::c_char) -> Param;
}
extern "C" {
    pub fn assignnparam(s: *mut ::std::os::raw::c_char, val: mnumber,
                        flags: ::std::os::raw::c_int) -> Param;
}
extern "C" {
    pub fn setnparam(s: *mut ::std::os::raw::c_char, val: mnumber) -> Param;
}
extern "C" {
    pub fn assigniparam(s: *mut ::std::os::raw::c_char, val: zlong,
                        flags: ::std::os::raw::c_int) -> Param;
}
extern "C" {
    pub fn setiparam(s: *mut ::std::os::raw::c_char, val: zlong) -> Param;
}
extern "C" {
    pub fn setiparam_no_convert(s: *mut ::std::os::raw::c_char, val: zlong)
     -> Param;
}
extern "C" {
    pub fn unsetparam(s: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn unsetparam_pm(pm: Param, altflag: ::std::os::raw::c_int,
                         exp: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn stdunsetfn(pm: Param, exp: ::std::os::raw::c_int);
}
extern "C" {
    pub fn intgetfn(pm: Param) -> zlong;
}
extern "C" {
    pub fn strgetfn(pm: Param) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strsetfn(pm: Param, x: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn arrgetfn(pm: Param) -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn arrsetfn(pm: Param, x: *mut *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn hashgetfn(pm: Param) -> HashTable;
}
extern "C" {
    pub fn hashsetfn(pm: Param, x: HashTable);
}
extern "C" {
    pub fn nullsethashfn(pm: Param, x: HashTable);
}
extern "C" {
    pub fn arrhashsetfn(pm: Param, val: *mut *mut ::std::os::raw::c_char,
                        augment: ::std::os::raw::c_int);
}
extern "C" {
    pub fn nullstrsetfn(pm: Param, x: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn nullintsetfn(pm: Param, x: zlong);
}
extern "C" {
    pub fn nullunsetfn(pm: Param, exp: ::std::os::raw::c_int);
}
extern "C" {
    pub fn intvargetfn(pm: Param) -> zlong;
}
extern "C" {
    pub fn intvarsetfn(pm: Param, x: zlong);
}
extern "C" {
    pub fn zlevarsetfn(pm: Param, x: zlong);
}
extern "C" {
    pub fn strvarsetfn(pm: Param, x: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn strvargetfn(pm: Param) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn arrvargetfn(pm: Param) -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn arrvarsetfn(pm: Param, x: *mut *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn colonarrgetfn(pm: Param) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn colonarrsetfn(pm: Param, x: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn tiedarrgetfn(pm: Param) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tiedarrsetfn(pm: Param, x: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn tiedarrunsetfn(pm: Param, exp: ::std::os::raw::c_int);
}
extern "C" {
    pub fn newuniqtable(size: zlong) -> HashTable;
}
extern "C" {
    pub fn uniqarray(x: *mut *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn zhuniqarray(x: *mut *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn poundgetfn(pm: Param) -> zlong;
}
extern "C" {
    pub fn randomgetfn(pm: Param) -> zlong;
}
extern "C" {
    pub fn randomsetfn(pm: Param, v: zlong);
}
extern "C" {
    pub fn intsecondsgetfn(pm: Param) -> zlong;
}
extern "C" {
    pub fn intsecondssetfn(pm: Param, x: zlong);
}
extern "C" {
    pub fn floatsecondsgetfn(pm: Param) -> f64;
}
extern "C" {
    pub fn floatsecondssetfn(pm: Param, x: f64);
}
extern "C" {
    pub fn getrawseconds() -> f64;
}
extern "C" {
    pub fn setrawseconds(x: f64);
}
extern "C" {
    pub fn setsecondstype(pm: Param, on: ::std::os::raw::c_int,
                          off: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn usernamegetfn(pm: Param) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn usernamesetfn(pm: Param, x: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn uidgetfn(pm: Param) -> zlong;
}
extern "C" {
    pub fn uidsetfn(pm: Param, x: zlong);
}
extern "C" {
    pub fn euidgetfn(pm: Param) -> zlong;
}
extern "C" {
    pub fn euidsetfn(pm: Param, x: zlong);
}
extern "C" {
    pub fn gidgetfn(pm: Param) -> zlong;
}
extern "C" {
    pub fn gidsetfn(pm: Param, x: zlong);
}
extern "C" {
    pub fn egidgetfn(pm: Param) -> zlong;
}
extern "C" {
    pub fn egidsetfn(pm: Param, x: zlong);
}
extern "C" {
    pub fn ttyidlegetfn(pm: Param) -> zlong;
}
extern "C" {
    pub fn ifsgetfn(pm: Param) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ifssetfn(pm: Param, x: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn lc_allsetfn(pm: Param, x: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn langsetfn(pm: Param, x: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn lcsetfn(pm: Param, x: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn histsizegetfn(pm: Param) -> zlong;
}
extern "C" {
    pub fn histsizesetfn(pm: Param, v: zlong);
}
extern "C" {
    pub fn savehistsizegetfn(pm: Param) -> zlong;
}
extern "C" {
    pub fn savehistsizesetfn(pm: Param, v: zlong);
}
extern "C" {
    pub fn errnosetfn(pm: Param, x: zlong);
}
extern "C" {
    pub fn errnogetfn(pm: Param) -> zlong;
}
extern "C" {
    pub fn keyboardhackgetfn(pm: Param) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn keyboardhacksetfn(pm: Param, x: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn histcharsgetfn(pm: Param) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn histcharssetfn(pm: Param, x: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn homegetfn(pm: Param) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn homesetfn(pm: Param, x: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn wordcharsgetfn(pm: Param) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn wordcharssetfn(pm: Param, x: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn underscoregetfn(pm: Param) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn termgetfn(pm: Param) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn termsetfn(pm: Param, x: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn terminfogetfn(pm: Param) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn terminfosetfn(pm: Param, x: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn terminfodirsgetfn(pm: Param) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn terminfodirssetfn(pm: Param, x: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn arrfixenv(s: *mut ::std::os::raw::c_char,
                     t: *mut *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn zputenv(str: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zgetenv(name: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn addenv(pm: Param, value: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn delenvvalue(x: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn delenv(pm: Param);
}
extern "C" {
    pub fn convbase_ptr(s: *mut ::std::os::raw::c_char, v: zlong,
                        base: ::std::os::raw::c_int,
                        ndigits: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn convbase(s: *mut ::std::os::raw::c_char, v: zlong,
                    base: ::std::os::raw::c_int);
}
extern "C" {
    pub fn convbase_underscore(s: *mut ::std::os::raw::c_char, v: zlong,
                               base: ::std::os::raw::c_int,
                               underscore: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn convfloat(dval: f64, digits: ::std::os::raw::c_int,
                     flags: ::std::os::raw::c_int, fout: *mut FILE)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn convfloat_underscore(dval: f64, underscore: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn startparamscope();
}
extern "C" {
    pub fn endparamscope();
}
extern "C" {
    pub fn freeparamnode(hn: HashNode);
}
extern "C" {
    pub fn printparamnode(hn: HashNode, printflags: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "incmdpos"]
    pub static mut incmdpos: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "aliasspaceflag"]
    pub static mut aliasspaceflag: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "incond"]
    pub static mut incond: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "inredir"]
    pub static mut inredir: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "incasepat"]
    pub static mut incasepat: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "isnewlin"]
    pub static mut isnewlin: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "infor"]
    pub static mut infor: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "inrepeat_"]
    pub static mut inrepeat_: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "intypeset"]
    pub static mut intypeset: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "hdocs"]
    pub static mut hdocs: *mut heredocs;
}
extern "C" {
    #[link_name = "eclen"]
    pub static mut eclen: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "ecused"]
    pub static mut ecused: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "ecnpats"]
    pub static mut ecnpats: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "ecbuf"]
    pub static mut ecbuf: Wordcode;
}
extern "C" {
    #[link_name = "ecstrs"]
    pub static mut ecstrs: Eccstr;
}
extern "C" {
    #[link_name = "ecsoffs"]
    pub static mut ecsoffs: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "ecssub"]
    pub static mut ecssub: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "ecnfunc"]
    pub static mut ecnfunc: ::std::os::raw::c_int;
}
extern "C" {
    pub fn parse_context_save(ps: *mut parse_stack,
                              toplevel: ::std::os::raw::c_int);
}
extern "C" {
    pub fn parse_context_restore(ps: *const parse_stack,
                                 toplevel: ::std::os::raw::c_int);
}
extern "C" {
    pub fn init_parse_status();
}
extern "C" {
    pub fn init_parse();
}
extern "C" {
    pub fn empty_eprog(p: Eprog) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn parse_event(endtok: ::std::os::raw::c_int) -> Eprog;
}
extern "C" {
    pub fn par_event(endtok: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn parse_list() -> Eprog;
}
extern "C" {
    pub fn parse_cond() -> Eprog;
}
extern "C" {
    pub fn setheredoc(pc: ::std::os::raw::c_int, type_: ::std::os::raw::c_int,
                      str: *mut ::std::os::raw::c_char,
                      termstr: *mut ::std::os::raw::c_char,
                      munged_termstr: *mut ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "condlex"]
    pub static mut condlex: ::std::option::Option<unsafe extern "C" fn()>;
}
extern "C" {
    pub fn dupeprog(p: Eprog, heap: ::std::os::raw::c_int) -> Eprog;
}
extern "C" {
    pub fn useeprog(p: Eprog);
}
extern "C" {
    pub fn freeeprog(p: Eprog);
}
extern "C" {
    pub fn ecgetstr(s: Estate, dup: ::std::os::raw::c_int,
                    tokflag: *mut ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecrawstr(p: Eprog, pc: Wordcode,
                    tokflag: *mut ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecgetarr(s: Estate, num: ::std::os::raw::c_int,
                    dup: ::std::os::raw::c_int,
                    tokflag: *mut ::std::os::raw::c_int)
     -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecgetlist(s: Estate, num: ::std::os::raw::c_int,
                     dup: ::std::os::raw::c_int,
                     tokflag: *mut ::std::os::raw::c_int) -> LinkList;
}
extern "C" {
    pub fn ecgetredirs(s: Estate) -> LinkList;
}
extern "C" {
    pub fn eccopyredirs(s: Estate) -> Eprog;
}
extern "C" {
    #[link_name = "dummy_eprog"]
    pub static mut dummy_eprog: eprog;
}
extern "C" {
    pub fn init_eprog();
}
extern "C" {
    pub fn bin_zcompile(nam: *mut ::std::os::raw::c_char,
                        args: *mut *mut ::std::os::raw::c_char, ops: Options,
                        func: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn try_dump_file(path: *mut ::std::os::raw::c_char,
                         name: *mut ::std::os::raw::c_char,
                         file: *mut ::std::os::raw::c_char,
                         ksh: *mut ::std::os::raw::c_int,
                         test_only: ::std::os::raw::c_int) -> Eprog;
}
extern "C" {
    pub fn try_source_file(file: *mut ::std::os::raw::c_char) -> Eprog;
}
extern "C" {
    pub fn incrdumpcount(f: FuncDump);
}
extern "C" {
    pub fn decrdumpcount(f: FuncDump);
}
extern "C" {
    pub fn closedumps();
}
extern "C" {
    pub fn dump_autoload(nam: *mut ::std::os::raw::c_char,
                         file: *mut ::std::os::raw::c_char,
                         on: ::std::os::raw::c_int, ops: Options,
                         func: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "zpc_strings"]
    pub static mut zpc_strings: [*const ::std::os::raw::c_char; 19usize];
}
extern "C" {
    #[link_name = "zpc_disables"]
    pub static mut zpc_disables: [::std::os::raw::c_char; 19usize];
}
extern "C" {
    #[link_name = "zpc_special"]
    pub static mut zpc_special: [::std::os::raw::c_char; 19usize];
}
extern "C" {
    pub fn patcompstart();
}
extern "C" {
    pub fn patcompile(exp: *mut ::std::os::raw::c_char,
                      inflags: ::std::os::raw::c_int,
                      endexp: *mut *mut ::std::os::raw::c_char) -> Patprog;
}
extern "C" {
    pub fn patgetglobflags(strp: *mut *mut ::std::os::raw::c_char,
                           assertp: *mut ::std::os::raw::c_long,
                           ignore: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn range_type(start: *mut ::std::os::raw::c_char,
                      len: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pattern_range_to_string(rangestr: *mut ::std::os::raw::c_char,
                                   outstr: *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "errsfound"]
    pub static mut errsfound: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "forceerrs"]
    pub static mut forceerrs: ::std::os::raw::c_int;
}
extern "C" {
    pub fn pattrystart();
}
extern "C" {
    pub fn patallocstr(prog: Patprog, string: *mut ::std::os::raw::c_char,
                       stringlen: ::std::os::raw::c_int,
                       unmetalen: ::std::os::raw::c_int,
                       force: ::std::os::raw::c_int, patstralloc: Patstralloc)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn pattry(prog: Patprog, string: *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pattrylen(prog: Patprog, string: *mut ::std::os::raw::c_char,
                     len: ::std::os::raw::c_int,
                     unmetalen: ::std::os::raw::c_int,
                     patstralloc: Patstralloc, offset: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pattryrefs(prog: Patprog, string: *mut ::std::os::raw::c_char,
                      stringlen: ::std::os::raw::c_int,
                      unmetalenin: ::std::os::raw::c_int,
                      patstralloc: Patstralloc,
                      patoffset: ::std::os::raw::c_int,
                      nump: *mut ::std::os::raw::c_int,
                      begp: *mut ::std::os::raw::c_int,
                      endp: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn patmatchlen() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mb_patmatchrange(range: *mut ::std::os::raw::c_char, ch: wchar_t,
                            zmb_ind: ::std::os::raw::c_int,
                            indptr: *mut wint_t,
                            mtp: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mb_patmatchindex(range: *mut ::std::os::raw::c_char, ind: wint_t,
                            chr: *mut wint_t, mtp: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn patmatchrange(range: *mut ::std::os::raw::c_char,
                         ch: ::std::os::raw::c_int,
                         indptr: *mut ::std::os::raw::c_int,
                         mtp: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn freepatprog(prog: Patprog);
}
extern "C" {
    pub fn pat_enables(cmd: *const ::std::os::raw::c_char,
                       patp: *mut *mut ::std::os::raw::c_char,
                       enable: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn savepatterndisables() -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn startpatternscope();
}
extern "C" {
    pub fn restorepatterndisables(disables: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn endpatternscope();
}
extern "C" {
    pub fn clearpatterndisables();
}
extern "C" {
    pub fn haswilds(str: *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "txtattrmask"]
    pub static mut txtattrmask: ::std::os::raw::c_uint;
}
extern "C" {
    #[link_name = "cmdstack"]
    pub static mut cmdstack: *mut ::std::os::raw::c_uchar;
}
extern "C" {
    #[link_name = "cmdsp"]
    pub static mut cmdsp: ::std::os::raw::c_int;
}
extern "C" {
    pub fn promptexpand(s: *mut ::std::os::raw::c_char,
                        ns: ::std::os::raw::c_int,
                        rs: *mut ::std::os::raw::c_char,
                        Rs: *mut ::std::os::raw::c_char,
                        txtchangep: *mut ::std::os::raw::c_uint)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn stradd(d: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn tsetcap(cap: ::std::os::raw::c_int, flags: ::std::os::raw::c_int);
}
extern "C" {
    pub fn putstr(d: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn countprompt(str: *mut ::std::os::raw::c_char,
                       wp: *mut ::std::os::raw::c_int,
                       hp: *mut ::std::os::raw::c_int,
                       overf: ::std::os::raw::c_int);
}
extern "C" {
    pub fn cmdpush(cmdtok: ::std::os::raw::c_int);
}
extern "C" {
    pub fn cmdpop();
}
extern "C" {
    pub fn match_colour(teststrp: *mut *const ::std::os::raw::c_char,
                        is_fg: ::std::os::raw::c_int,
                        colour: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn match_highlight(teststr: *const ::std::os::raw::c_char,
                           on_var: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn output_highlight(atr: ::std::os::raw::c_int,
                            buf: *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_default_colour_sequences();
}
extern "C" {
    pub fn allocate_colour_buffer();
}
extern "C" {
    pub fn free_colour_buffer();
}
extern "C" {
    pub fn set_colour_attribute(atr: ::std::os::raw::c_int,
                                fg_bg: ::std::os::raw::c_int,
                                flags: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "sigtrapped"]
    pub static mut sigtrapped: [::std::os::raw::c_int; 34usize];
}
extern "C" {
    #[link_name = "siglists"]
    pub static mut siglists: [Eprog; 34usize];
}
extern "C" {
    #[link_name = "nsigtrapped"]
    pub static mut nsigtrapped: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "in_exit_trap"]
    pub static mut in_exit_trap: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "queueing_enabled"]
    pub static mut queueing_enabled: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "queue_front"]
    pub static mut queue_front: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "queue_rear"]
    pub static mut queue_rear: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "signal_queue"]
    pub static mut signal_queue: [::std::os::raw::c_int; 128usize];
}
extern "C" {
    #[link_name = "signal_mask_queue"]
    pub static mut signal_mask_queue: [sigset_t; 128usize];
}
extern "C" {
    #[link_name = "queue_in"]
    pub static mut queue_in: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "trap_queueing_enabled"]
    pub static mut trap_queueing_enabled: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "trap_queue_front"]
    pub static mut trap_queue_front: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "trap_queue_rear"]
    pub static mut trap_queue_rear: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "trap_queue"]
    pub static mut trap_queue: [::std::os::raw::c_int; 128usize];
}
extern "C" {
    pub fn install_handler(sig: ::std::os::raw::c_int);
}
extern "C" {
    pub fn intr();
}
extern "C" {
    pub fn holdintr();
}
extern "C" {
    pub fn noholdintr();
}
extern "C" {
    pub fn signal_mask(sig: ::std::os::raw::c_int) -> sigset_t;
}
extern "C" {
    pub fn signal_setmask(set: sigset_t) -> sigset_t;
}
extern "C" {
    pub fn signal_suspend(sig: ::std::os::raw::c_int,
                          wait_cmd: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "last_signal"]
    pub static mut last_signal: ::std::os::raw::c_int;
}
extern "C" {
    pub fn wait_for_processes();
}
extern "C" {
    pub fn zhandler(sig: ::std::os::raw::c_int);
}
extern "C" {
    pub fn killrunjobs(from_signal: ::std::os::raw::c_int);
}
extern "C" {
    pub fn killjb(jn: Job, sig: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn settrap(sig: ::std::os::raw::c_int, l: Eprog,
                   flags: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unsettrap(sig: ::std::os::raw::c_int);
}
extern "C" {
    pub fn removetrap(sig: ::std::os::raw::c_int) -> HashNode;
}
extern "C" {
    pub fn starttrapscope();
}
extern "C" {
    pub fn endtrapscope();
}
extern "C" {
    pub fn queue_traps(wait_cmd: ::std::os::raw::c_int);
}
extern "C" {
    pub fn unqueue_traps();
}
extern "C" {
    #[link_name = "intrap"]
    pub static mut intrap: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "trapisfunc"]
    pub static mut trapisfunc: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "traplocallevel"]
    pub static mut traplocallevel: ::std::os::raw::c_int;
}
extern "C" {
    pub fn dotrap(sig: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "sig_msg"]
    pub static mut sig_msg: [*mut ::std::os::raw::c_char; 33usize];
}
extern "C" {
    #[link_name = "sigs"]
    pub static mut sigs: [*mut ::std::os::raw::c_char; 35usize];
}
extern "C" {
    pub fn zstrcmp(as_: *const ::std::os::raw::c_char,
                   bs: *const ::std::os::raw::c_char,
                   sortflags: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strmetasort(array: *mut *mut ::std::os::raw::c_char,
                       sortwhat: ::std::os::raw::c_int,
                       unmetalenp: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn dupstring(s: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn dupstring_wlen(s: *const ::std::os::raw::c_char,
                          len: ::std::os::raw::c_uint)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn dupstring_glen(s: *const ::std::os::raw::c_char,
                          len_ret: *mut ::std::os::raw::c_uint)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ztrdup(s: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn wcs_ztrdup(s: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn tricat(s1: *const ::std::os::raw::c_char,
                  s2: *const ::std::os::raw::c_char,
                  s3: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn zhtricat(s1: *const ::std::os::raw::c_char,
                    s2: *const ::std::os::raw::c_char,
                    s3: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn dyncat(s1: *const ::std::os::raw::c_char,
                  s2: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn bicat(s1: *const ::std::os::raw::c_char,
                 s2: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn dupstrpfx(s: *const ::std::os::raw::c_char,
                     len: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ztrduppfx(s: *const ::std::os::raw::c_char,
                     len: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn appstr(base: *mut ::std::os::raw::c_char,
                  append: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strend(str: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "nulstring"]
    pub static mut nulstring: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub fn prefork(list: LinkList, flags: ::std::os::raw::c_int,
                   ret_flags: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn quotesubst(str: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn globlist(list: LinkList, nountok: ::std::os::raw::c_int);
}
extern "C" {
    pub fn singsub(s: *mut *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn filesub(namptr: *mut *mut ::std::os::raw::c_char,
                   assign: ::std::os::raw::c_int);
}
extern "C" {
    pub fn equalsubstr(str: *mut ::std::os::raw::c_char,
                       assign: ::std::os::raw::c_int,
                       nomatch: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn filesubstr(namptr: *mut *mut ::std::os::raw::c_char,
                      assign: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_strarg(s: *mut ::std::os::raw::c_char,
                      lenp: *mut ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn modify(str: *mut *mut ::std::os::raw::c_char,
                  ptr: *mut *mut ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "text_expand_tabs"]
    pub static mut text_expand_tabs: ::std::os::raw::c_int;
}
extern "C" {
    pub fn is_cond_binary_op(str: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zoutputtab(outf: *mut FILE);
}
extern "C" {
    pub fn getpermtext(prog: Eprog, c: Wordcode,
                       start_indent: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getjobtext(prog: Eprog, c: Wordcode)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getredirs(redirs: LinkList);
}
extern "C" {
    #[link_name = "scriptname"]
    pub static mut scriptname: *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "scriptfilename"]
    pub static mut scriptfilename: *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "incompfunc"]
    pub static mut incompfunc: ::std::os::raw::c_int;
}
extern "C" {
    pub fn zerr(fmt: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn zerrnam(cmd: *const ::std::os::raw::c_char,
                   fmt: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn zwarn(fmt: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn zwarnnam(cmd: *const ::std::os::raw::c_char,
                    fmt: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn dputs(message: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn zerrmsg(file: *mut FILE, fmt: *const ::std::os::raw::c_char,
                   ap: *mut __va_list_tag);
}
extern "C" {
    pub fn putraw(c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putshout(c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nicechar_sel(c: ::std::os::raw::c_int,
                        quotable: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn nicechar(c: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn is_nicechar(c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mb_charinit();
}
extern "C" {
    pub fn wcs_nicechar_sel(c: wchar_t, widthp: *mut usize,
                            swidep: *mut *mut ::std::os::raw::c_char,
                            quotable: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn wcs_nicechar(c: wchar_t, widthp: *mut usize,
                        swidep: *mut *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn is_wcs_nicechar(c: wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zwcwidth(wc: wint_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pathprog(prog: *mut ::std::os::raw::c_char,
                    namep: *mut *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn findpwd(s: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ispwd(s: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xsymlink(s: *mut ::std::os::raw::c_char,
                    heap: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn print_if_link(s: *mut ::std::os::raw::c_char,
                         all: ::std::os::raw::c_int);
}
extern "C" {
    pub fn fprintdir(s: *mut ::std::os::raw::c_char, f: *mut FILE);
}
extern "C" {
    pub fn substnamedir(s: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "cached_uid"]
    pub static mut cached_uid: uid_t;
}
extern "C" {
    #[link_name = "cached_username"]
    pub static mut cached_username: *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn get_username() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn finddir(s: *mut ::std::os::raw::c_char) -> Nameddir;
}
extern "C" {
    pub fn adduserdir(s: *mut ::std::os::raw::c_char,
                      t: *mut ::std::os::raw::c_char,
                      flags: ::std::os::raw::c_int,
                      always: ::std::os::raw::c_int);
}
extern "C" {
    pub fn getnameddir(name: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn addprepromptfn(func: voidvoidfnptr_t);
}
extern "C" {
    pub fn delprepromptfn(func: voidvoidfnptr_t);
}
extern "C" {
    #[link_name = "timedfns"]
    pub static mut timedfns: LinkList;
}
extern "C" {
    pub fn addtimedfn(func: voidvoidfnptr_t, when: time_t);
}
extern "C" {
    pub fn deltimedfn(func: voidvoidfnptr_t);
}
extern "C" {
    #[link_name = "lastmailcheck"]
    pub static mut lastmailcheck: time_t;
}
extern "C" {
    #[link_name = "lastwatch"]
    pub static mut lastwatch: time_t;
}
extern "C" {
    pub fn callhookfunc(name: *mut ::std::os::raw::c_char, lnklst: LinkList,
                        arrayp: ::std::os::raw::c_int,
                        retval: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn preprompt();
}
extern "C" {
    #[link_name = "xtrerr"]
    pub static mut xtrerr: *mut FILE;
}
extern "C" {
    pub fn printprompt4();
}
extern "C" {
    pub fn freestr(a: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn gettyinfo(ti: *mut ttyinfo);
}
extern "C" {
    pub fn settyinfo(ti: *mut ttyinfo);
}
extern "C" {
    #[link_name = "shttyinfo"]
    pub static mut shttyinfo: ttyinfo;
}
extern "C" {
    #[link_name = "resetneeded"]
    pub static mut resetneeded: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "winchanged"]
    pub static mut winchanged: ::std::os::raw::c_int;
}
extern "C" {
    pub fn adjustwinsize(from: ::std::os::raw::c_int);
}
extern "C" {
    pub fn movefd(fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn redup(x: ::std::os::raw::c_int, y: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn addmodulefd(fd: ::std::os::raw::c_int, fdt: ::std::os::raw::c_int);
}
extern "C" {
    pub fn addlockfd(fd: ::std::os::raw::c_int,
                     cloexec: ::std::os::raw::c_int);
}
extern "C" {
    pub fn zclose(fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zcloselockfd(fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gettempname(prefix: *const ::std::os::raw::c_char,
                       use_heap: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn gettempfile(prefix: *const ::std::os::raw::c_char,
                       use_heap: ::std::os::raw::c_int,
                       tempname: *mut *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn has_token(s: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chuck(str: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn tulower(c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tuupper(c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ztrncpy(s: *mut ::std::os::raw::c_char,
                   t: *mut ::std::os::raw::c_char,
                   len: ::std::os::raw::c_int);
}
extern "C" {
    pub fn strucpy(s: *mut *mut ::std::os::raw::c_char,
                   t: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn struncpy(s: *mut *mut ::std::os::raw::c_char,
                    t: *mut ::std::os::raw::c_char, n: ::std::os::raw::c_int);
}
extern "C" {
    pub fn arrlen(s: *mut *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn arrlen_ge(s: *mut *mut ::std::os::raw::c_char,
                     lower_bound: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn arrlen_gt(s: *mut *mut ::std::os::raw::c_char,
                     lower_bound: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn arrlen_le(s: *mut *mut ::std::os::raw::c_char,
                     upper_bound: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn arrlen_lt(s: *mut *mut ::std::os::raw::c_char,
                     upper_bound: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn skipparens(inpar: ::std::os::raw::c_char,
                      outpar: ::std::os::raw::c_char,
                      s: *mut *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zstrtol(s: *const ::std::os::raw::c_char,
                   t: *mut *mut ::std::os::raw::c_char,
                   base: ::std::os::raw::c_int) -> zlong;
}
extern "C" {
    pub fn zstrtol_underscore(s: *const ::std::os::raw::c_char,
                              t: *mut *mut ::std::os::raw::c_char,
                              base: ::std::os::raw::c_int,
                              underscore: ::std::os::raw::c_int) -> zlong;
}
extern "C" {
    pub fn setblock_fd(turnonblocking: ::std::os::raw::c_int,
                       fd: ::std::os::raw::c_int,
                       modep: *mut ::std::os::raw::c_long)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setblock_stdin() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn read_poll(fd: ::std::os::raw::c_int,
                     readchar: *mut ::std::os::raw::c_int,
                     polltty: ::std::os::raw::c_int, microseconds: zlong)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zsleep(us: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zsleep_random(max_us: ::std::os::raw::c_long, end_time: time_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn checkrmall(s: *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn read_loop(fd: ::std::os::raw::c_int,
                     buf: *mut ::std::os::raw::c_char, len: usize) -> isize;
}
extern "C" {
    pub fn write_loop(fd: ::std::os::raw::c_int,
                      buf: *const ::std::os::raw::c_char, len: usize)
     -> isize;
}
extern "C" {
    pub fn noquery(purge: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getquery(valid_chars: *mut ::std::os::raw::c_char,
                    purge: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn spckword(s: *mut *mut ::std::os::raw::c_char,
                    hist: ::std::os::raw::c_int, cmd: ::std::os::raw::c_int,
                    ask: ::std::os::raw::c_int);
}
extern "C" {
    pub fn ztrftime(buf: *mut ::std::os::raw::c_char,
                    bufsize: ::std::os::raw::c_int,
                    fmt: *mut ::std::os::raw::c_char, tm: *mut tm,
                    usec: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zjoin(arr: *mut *mut ::std::os::raw::c_char,
                 delim: ::std::os::raw::c_int, heap: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn colonsplit(s: *mut ::std::os::raw::c_char,
                      uniq: ::std::os::raw::c_int)
     -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn spacesplit(s: *mut ::std::os::raw::c_char,
                      allownull: ::std::os::raw::c_int,
                      heap: ::std::os::raw::c_int,
                      quote: ::std::os::raw::c_int)
     -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn findword(s: *mut *mut ::std::os::raw::c_char,
                    sep: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn wordcount(s: *mut ::std::os::raw::c_char,
                     sep: *mut ::std::os::raw::c_char,
                     mul: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sepjoin(s: *mut *mut ::std::os::raw::c_char,
                   sep: *mut ::std::os::raw::c_char,
                   heap: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn sepsplit(s: *mut ::std::os::raw::c_char,
                    sep: *mut ::std::os::raw::c_char,
                    allownull: ::std::os::raw::c_int,
                    heap: ::std::os::raw::c_int)
     -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getshfunc(nam: *mut ::std::os::raw::c_char) -> Shfunc;
}
extern "C" {
    pub fn subst_string_by_func(func: Shfunc,
                                arg1: *mut ::std::os::raw::c_char,
                                orig: *mut ::std::os::raw::c_char)
     -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn subst_string_by_hook(name: *mut ::std::os::raw::c_char,
                                arg1: *mut ::std::os::raw::c_char,
                                orig: *mut ::std::os::raw::c_char)
     -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mkarray(s: *mut ::std::os::raw::c_char)
     -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn hmkarray(s: *mut ::std::os::raw::c_char)
     -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn zbeep();
}
extern "C" {
    pub fn freearray(s: *mut *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn equalsplit(s: *mut ::std::os::raw::c_char,
                      t: *mut *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "typtab"]
    pub static mut typtab: [::std::os::raw::c_short; 256usize];
}
extern "C" {
    pub fn inittyptab();
}
extern "C" {
    pub fn makecommaspecial(yesno: ::std::os::raw::c_int);
}
extern "C" {
    pub fn makebangspecial(yesno: ::std::os::raw::c_int);
}
extern "C" {
    pub fn wcsiblank(wc: wint_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsitype(c: wchar_t, itype: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn itype_end(ptr: *const ::std::os::raw::c_char,
                     itype: ::std::os::raw::c_int,
                     once: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn arrdup(s: *mut *mut ::std::os::raw::c_char)
     -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn arrdup_max(s: *mut *mut ::std::os::raw::c_char,
                      max: ::std::os::raw::c_uint)
     -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn zarrdup(s: *mut *mut ::std::os::raw::c_char)
     -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn wcs_zarrdup(s: *mut *mut wchar_t) -> *mut *mut wchar_t;
}
extern "C" {
    pub fn setcbreak();
}
extern "C" {
    pub fn attachtty(pgrp: pid_t);
}
extern "C" {
    pub fn gettygrp() -> pid_t;
}
extern "C" {
    pub fn metafy(buf: *mut ::std::os::raw::c_char,
                  len: ::std::os::raw::c_int, heap: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ztrdup_metafy(s: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn unmetafy(s: *mut ::std::os::raw::c_char,
                    len: *mut ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn metalen(s: *const ::std::os::raw::c_char,
                   len: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unmeta(file_name: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn unmeta_one(in_: *const ::std::os::raw::c_char,
                      sz: *mut ::std::os::raw::c_int) -> convchar_t;
}
extern "C" {
    pub fn ztrcmp(s1: *const ::std::os::raw::c_char,
                  s2: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ztrlen(s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ztrlenend(s: *const ::std::os::raw::c_char,
                     eptr: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ztrsub(t: *const ::std::os::raw::c_char,
                  s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zreaddir(dir: *mut DIR, ignoredots: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn zputs(s: *const ::std::os::raw::c_char, stream: *mut FILE)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nicedup(s: *const ::std::os::raw::c_char,
                   heap: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn nicedupstring(s: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn nicezputs(s: *const ::std::os::raw::c_char, stream: *mut FILE)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn niceztrlen(s: *const ::std::os::raw::c_char) -> usize;
}
extern "C" {
    pub fn mb_niceformat(s: *const ::std::os::raw::c_char, stream: *mut FILE,
                         outstrp: *mut *mut ::std::os::raw::c_char,
                         flags: ::std::os::raw::c_int) -> usize;
}
extern "C" {
    pub fn is_mb_niceformat(s: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mb_metacharlenconv_r(s: *const ::std::os::raw::c_char,
                                wcp: *mut wint_t, mbsp: *mut mbstate_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mb_metacharlenconv(s: *const ::std::os::raw::c_char,
                              wcp: *mut wint_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mb_metastrlenend(ptr: *mut ::std::os::raw::c_char,
                            width: ::std::os::raw::c_int,
                            eptr: *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mb_charlenconv_r(s: *const ::std::os::raw::c_char,
                            slen: ::std::os::raw::c_int, wcp: *mut wint_t,
                            mbsp: *mut mbstate_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mb_charlenconv(s: *const ::std::os::raw::c_char,
                          slen: ::std::os::raw::c_int, wcp: *mut wint_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zexpandtabs(s: *const ::std::os::raw::c_char,
                       len: ::std::os::raw::c_int,
                       width: ::std::os::raw::c_int,
                       startpos: ::std::os::raw::c_int, fout: *mut FILE,
                       all: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn hasspecial(s: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn quotestring(s: *const ::std::os::raw::c_char,
                       instring: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn quotedzputs(s: *const ::std::os::raw::c_char, stream: *mut FILE)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn dquotedztrdup(s: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getkeystring(s: *mut ::std::os::raw::c_char,
                        len: *mut ::std::os::raw::c_int,
                        how: ::std::os::raw::c_int,
                        misc: *mut ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strpfx(s: *const ::std::os::raw::c_char,
                  t: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strsfx(s: *mut ::std::os::raw::c_char,
                  t: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn init_dirsav(d: Dirsav);
}
extern "C" {
    pub fn lchdir(path: *const ::std::os::raw::c_char, d: *mut dirsav,
                  hard: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn restoredir(d: *mut dirsav) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn privasserted() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mode_to_octal(mode: mode_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mailstat(path: *mut ::std::os::raw::c_char, st: *mut stat)
     -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "default_watchfmt"]
    pub static default_watchfmt: *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn dowatch();
}
extern "C" {
    pub fn bin_log(nam: *mut ::std::os::raw::c_char,
                   argv: *mut *mut ::std::os::raw::c_char, ops: Options,
                   func: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout___va_list_tag() {
    assert_eq!(::std::mem::size_of::<__va_list_tag>() , 24usize , concat ! (
               "Size of: " , stringify ! ( __va_list_tag ) ));
    assert_eq! (::std::mem::align_of::<__va_list_tag>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( __va_list_tag ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __va_list_tag ) ) . gp_offset as * const
                _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( __va_list_tag ) , "::"
                , stringify ! ( gp_offset ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __va_list_tag ) ) . fp_offset as * const
                _ as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( __va_list_tag ) , "::"
                , stringify ! ( fp_offset ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __va_list_tag ) ) . overflow_arg_area as
                * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( __va_list_tag ) , "::"
                , stringify ! ( overflow_arg_area ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __va_list_tag ) ) . reg_save_area as *
                const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( __va_list_tag ) , "::"
                , stringify ! ( reg_save_area ) ));
}
impl Clone for __va_list_tag {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __locale_data {
    pub _address: u8,
}
impl Clone for __locale_data {
    fn clone(&self) -> Self { *self }
}
